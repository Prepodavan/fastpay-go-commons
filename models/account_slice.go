// Generated by: gen
// TypeWriter: slice
// Directive: +gen on *Account

package models

// AccountSlice is a slice of type *Account. Use it where you would use []*Account.
type AccountSlice []*Account

// Any verifies that one or more elements of AccountSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#Any
func (rcv AccountSlice) Any(fn func(*Account) bool) bool {
	for _, v := range rcv {
		if fn(v) {
			return true
		}
	}
	return false
}

// Where returns a new AccountSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv AccountSlice) Where(fn func(*Account) bool) (result AccountSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Count gives the number elements of AccountSlice that return true for the passed func. See: http://clipperhouse.github.io/gen/#Count
func (rcv AccountSlice) Count(fn func(*Account) bool) (result int) {
	for _, v := range rcv {
		if fn(v) {
			result++
		}
	}
	return
}

// SelectAddressOfAccount projects a slice of AddressOfAccount from AccountSlice, typically called a map in other frameworks. See: http://clipperhouse.github.io/gen/#Select
func (rcv AccountSlice) SelectAddressOfAccount(fn func(*Account) AddressOfAccount) (result []AddressOfAccount) {
	for _, v := range rcv {
		result = append(result, fn(v))
	}
	return
}

// AggregateAddressOfAccount iterates over AccountSlice, operating on each element while maintaining ‘state’. See: http://clipperhouse.github.io/gen/#Aggregate
func (rcv AccountSlice) AggregateAddressOfAccount(fn func(AddressOfAccount, *Account) AddressOfAccount) (result AddressOfAccount) {
	for _, v := range rcv {
		result = fn(result, v)
	}
	return
}

// All verifies that all elements of AccountSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#All
func (rcv AccountSlice) All(fn func(*Account) bool) bool {
	for _, v := range rcv {
		if !fn(v) {
			return false
		}
	}
	return true
}
