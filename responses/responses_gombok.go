// Code generated by gombok. DO NOT EDIT.

package responses

import (
	currencyexchangecontracttypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-exchange-contract-type-enum"
	stateenum "github.com/SolarLabRU/fastpay-go-commons/enums/state_enum"
	models "github.com/SolarLabRU/fastpay-go-commons/models"
)

func (wrr *WithdrawResultResponse) GetData() (data *models.WithdrawResult) {
	if wrr != nil {
		data = wrr.Data
	}
	return
}

func (wrr *WithdrawResultResponse) SetData(data *models.WithdrawResult) {
	wrr.Data = data
}

func (wrr *WithdrawRejectResponse) GetHistory() (history models.TransactionHistory) {
	if wrr != nil {
		history = wrr.History
	}
	return
}

func (wrr *WithdrawRejectResponse) SetHistory(history models.TransactionHistory) {
	wrr.History = history
}

func (wrr *WithdrawRejectResponse) GetData() (data string) {
	if wrr != nil {
		data = wrr.Data
	}
	return
}

func (wrr *WithdrawRejectResponse) SetData(data string) {
	wrr.Data = data
}

func (wcr *WithdrawConfirmResponse) GetHistory() (history models.TransactionHistory) {
	if wcr != nil {
		history = wcr.History
	}
	return
}

func (wcr *WithdrawConfirmResponse) SetHistory(history models.TransactionHistory) {
	wcr.History = history
}

func (wcr *WithdrawConfirmResponse) GetData() (data string) {
	if wcr != nil {
		data = wcr.Data
	}
	return
}

func (wcr *WithdrawConfirmResponse) SetData(data string) {
	wcr.Data = data
}

func (tr *TransferResponse) GetHistory() (history models.TransactionHistory) {
	if tr != nil {
		history = tr.History
	}
	return
}

func (tr *TransferResponse) SetHistory(history models.TransactionHistory) {
	tr.History = history
}

func (tr *TransferResponse) GetData() (data string) {
	if tr != nil {
		data = tr.Data
	}
	return
}

func (tr *TransferResponse) SetData(data string) {
	tr.Data = data
}

func (tbr *TransferBatchResponse) GetHistories() (histories []models.TransactionHistory) {
	if tbr != nil {
		histories = tbr.Histories
	}
	return
}

func (tbr *TransferBatchResponse) SetHistories(histories []models.TransactionHistory) {
	tbr.Histories = histories
}

func (tbr *TransferBatchResponse) GetData() (data string) {
	if tbr != nil {
		data = tbr.Data
	}
	return
}

func (tbr *TransferBatchResponse) SetData(data string) {
	tbr.Data = data
}

func (tr *TopupResponse) GetData() (data string) {
	if tr != nil {
		data = tr.Data
	}
	return
}

func (tr *TopupResponse) SetData(data string) {
	tr.Data = data
}

func (sibr *SenderIsBankResponse) GetData() (data bool) {
	if sibr != nil {
		data = sibr.Data
	}
	return
}

func (sibr *SenderIsBankResponse) SetData(data bool) {
	sibr.Data = data
}

func (sar *SenderAddressResponse) GetData() (data SenderAddressData) {
	if sar != nil {
		data = sar.Data
	}
	return
}

func (sar *SenderAddressResponse) SetData(data SenderAddressData) {
	sar.Data = data
}

func (sad *SenderAddressData) GetAddress() (address string) {
	if sad != nil {
		address = sad.Address
	}
	return
}

func (sad *SenderAddressData) SetAddress(address string) {
	sad.Address = address
}

func (sdr *SafeDealResponse) GetData() (data models.DealResponseData) {
	if sdr != nil {
		data = sdr.Data
	}
	return
}

func (sdr *SafeDealResponse) SetData(data models.DealResponseData) {
	sdr.Data = data
}

func (sddr *SafeDealDepositResponse) GetData() (data models.SafeDealDeposit) {
	if sddr != nil {
		data = sddr.Data
	}
	return
}

func (sddr *SafeDealDepositResponse) SetData(data models.SafeDealDeposit) {
	sddr.Data = data
}

func (ri *RoutesItem) GetCommission() (commission *models.CurrencyContractRoutingItem) {
	if ri != nil {
		commission = ri.Commission
	}
	return
}

func (ri *RoutesItem) SetCommission(commission *models.CurrencyContractRoutingItem) {
	ri.Commission = commission
}

func (ri *RoutesItem) GetMiddle() (middle *models.CurrencyContractRoutingItem) {
	if ri != nil {
		middle = ri.Middle
	}
	return
}

func (ri *RoutesItem) SetMiddle(middle *models.CurrencyContractRoutingItem) {
	ri.Middle = middle
}

func (ri *RoutesItem) GetInput() (input *models.CurrencyContractRoutingItem) {
	if ri != nil {
		input = ri.Input
	}
	return
}

func (ri *RoutesItem) SetInput(input *models.CurrencyContractRoutingItem) {
	ri.Input = input
}

func (m *Metadata) GetFetchedRecordsCount() (fetchedRecordsCount int32) {
	if m != nil {
		fetchedRecordsCount = m.FetchedRecordsCount
	}
	return
}

func (m *Metadata) SetFetchedRecordsCount(fetchedRecordsCount int32) {
	m.FetchedRecordsCount = fetchedRecordsCount
}

func (m *Metadata) GetBookmark() (bookmark string) {
	if m != nil {
		bookmark = m.Bookmark
	}
	return
}

func (m *Metadata) SetBookmark(bookmark string) {
	m.Bookmark = bookmark
}

func (msddr *MakeSafeDealDepositResponse) GetData() (data []models.EventBatchItem) {
	if msddr != nil {
		data = msddr.Data
	}
	return
}

func (msddr *MakeSafeDealDepositResponse) SetData(data []models.EventBatchItem) {
	msddr.Data = data
}

func (lr *LimitResponse) GetData() (data LimitData) {
	if lr != nil {
		data = lr.Data
	}
	return
}

func (lr *LimitResponse) SetData(data LimitData) {
	lr.Data = data
}

func (ld *LimitData) GetValue() (value int64) {
	if ld != nil {
		value = ld.Value
	}
	return
}

func (ld *LimitData) SetValue(value int64) {
	ld.Value = value
}

func (ir *InvoiceResponse) GetData() (data models.Invoice) {
	if ir != nil {
		data = ir.Data
	}
	return
}

func (ir *InvoiceResponse) SetData(data models.Invoice) {
	ir.Data = data
}

func (ipr *InvoicePageResponse) GetData() (data InvoicePageData) {
	if ipr != nil {
		data = ipr.Data
	}
	return
}

func (ipr *InvoicePageResponse) SetData(data InvoicePageData) {
	ipr.Data = data
}

func (ipd *InvoicePageData) GetMetadata() (metadata Metadata) {
	if ipd != nil {
		metadata = ipd.Metadata
	}
	return
}

func (ipd *InvoicePageData) SetMetadata(metadata Metadata) {
	ipd.Metadata = metadata
}

func (ipd *InvoicePageData) GetItems() (items []models.Invoice) {
	if ipd != nil {
		items = ipd.Items
	}
	return
}

func (ipd *InvoicePageData) SetItems(items []models.Invoice) {
	ipd.Items = items
}

func (ilr *InvoiceListResponse) GetData() (data []models.Invoice) {
	if ilr != nil {
		data = ilr.Data
	}
	return
}

func (ilr *InvoiceListResponse) SetData(data []models.Invoice) {
	ilr.Data = data
}

func (icr *InvoiceCreateResponse) GetIsInvoiceCreate() (isInvoiceCreate bool) {
	if icr != nil {
		isInvoiceCreate = icr.IsInvoiceCreate
	}
	return
}

func (icr *InvoiceCreateResponse) SetIsInvoiceCreate(isInvoiceCreate bool) {
	icr.IsInvoiceCreate = isInvoiceCreate
}

func (gbrr *GetBestRoutesResponse) GetData() (data [][]models.CurrencyContractRoutingItem) {
	if gbrr != nil {
		data = gbrr.Data
	}
	return
}

func (gbrr *GetBestRoutesResponse) SetData(data [][]models.CurrencyContractRoutingItem) {
	gbrr.Data = data
}

func (gbbtrd *GetBankBalanceTotalResponseData) GetBank() (bank models.BankInfo) {
	if gbbtrd != nil {
		bank = gbbtrd.Bank
	}
	return
}

func (gbbtrd *GetBankBalanceTotalResponseData) SetBank(bank models.BankInfo) {
	gbbtrd.Bank = bank
}

func (gbbtrd *GetBankBalanceTotalResponseData) GetLiabilities() (liabilities []models.AmountOfBank) {
	if gbbtrd != nil {
		liabilities = gbbtrd.Liabilities
	}
	return
}

func (gbbtrd *GetBankBalanceTotalResponseData) SetLiabilities(liabilities []models.AmountOfBank) {
	gbbtrd.Liabilities = liabilities
}

func (gbbtrd *GetBankBalanceTotalResponseData) GetClaims() (claims []models.AmountOfBank) {
	if gbbtrd != nil {
		claims = gbbtrd.Claims
	}
	return
}

func (gbbtrd *GetBankBalanceTotalResponseData) SetClaims(claims []models.AmountOfBank) {
	gbbtrd.Claims = claims
}

func (gbbtrd *GetBankBalanceTotalResponseData) GetIssue() (issue int64) {
	if gbbtrd != nil {
		issue = gbbtrd.Issue
	}
	return
}

func (gbbtrd *GetBankBalanceTotalResponseData) SetIssue(issue int64) {
	gbbtrd.Issue = issue
}

func (gbbtrd *GetBankBalanceTotalResponseData) GetIssueLimit() (issueLimit int64) {
	if gbbtrd != nil {
		issueLimit = gbbtrd.IssueLimit
	}
	return
}

func (gbbtrd *GetBankBalanceTotalResponseData) SetIssueLimit(issueLimit int64) {
	gbbtrd.IssueLimit = issueLimit
}

func (gbbtr *GetBankBalanceTotalResponse) GetData() (data []GetBankBalanceTotalResponseData) {
	if gbbtr != nil {
		data = gbbtr.Data
	}
	return
}

func (gbbtr *GetBankBalanceTotalResponse) SetData(data []GetBankBalanceTotalResponseData) {
	gbbtr.Data = data
}

func (gapr *GetAvailablePlatformsResponse) GetData() (data string) {
	if gapr != nil {
		data = gapr.Data
	}
	return
}

func (gapr *GetAvailablePlatformsResponse) SetData(data string) {
	gapr.Data = data
}

func (etcecr *ExecutedTransactionCurrencyExchangeContractResponse) GetData() (data ExecutedTransactionCurrencyExchangeContractData) {
	if etcecr != nil {
		data = etcecr.Data
	}
	return
}

func (etcecr *ExecutedTransactionCurrencyExchangeContractResponse) SetData(data ExecutedTransactionCurrencyExchangeContractData) {
	etcecr.Data = data
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) GetTransactions() (transactions []models.ExecutedTransactionCurrencyExchangeContractItem) {
	if etcecd != nil {
		transactions = etcecd.Transactions
	}
	return
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) SetTransactions(transactions []models.ExecutedTransactionCurrencyExchangeContractItem) {
	etcecd.Transactions = transactions
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) GetCommission() (commission int64) {
	if etcecd != nil {
		commission = etcecd.Commission
	}
	return
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) SetCommission(commission int64) {
	etcecd.Commission = commission
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) GetAmountInput() (amountInput int64) {
	if etcecd != nil {
		amountInput = etcecd.AmountInput
	}
	return
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) SetAmountInput(amountInput int64) {
	etcecd.AmountInput = amountInput
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) GetAmountOutput() (amountOutput int64) {
	if etcecd != nil {
		amountOutput = etcecd.AmountOutput
	}
	return
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) SetAmountOutput(amountOutput int64) {
	etcecd.AmountOutput = amountOutput
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) GetTransactionHistories() (transactionHistories []models.TransactionHistory) {
	if etcecd != nil {
		transactionHistories = etcecd.TransactionHistories
	}
	return
}

func (etcecd *ExecutedTransactionCurrencyExchangeContractData) SetTransactionHistories(transactionHistories []models.TransactionHistory) {
	etcecd.TransactionHistories = transactionHistories
}

func (clr *CustomersListResponse) GetData() (data []models.Customer) {
	if clr != nil {
		data = clr.Data
	}
	return
}

func (clr *CustomersListResponse) SetData(data []models.Customer) {
	clr.Data = data
}

func (cr *CustomerResponse) GetData() (data models.Customer) {
	if cr != nil {
		data = cr.Data
	}
	return
}

func (cr *CustomerResponse) SetData(data models.Customer) {
	cr.Data = data
}

func (cpr *CustomerPageResponse) GetData() (data CustomerPageData) {
	if cpr != nil {
		data = cpr.Data
	}
	return
}

func (cpr *CustomerPageResponse) SetData(data CustomerPageData) {
	cpr.Data = data
}

func (cpd *CustomerPageData) GetMetadata() (metadata Metadata) {
	if cpd != nil {
		metadata = cpd.Metadata
	}
	return
}

func (cpd *CustomerPageData) SetMetadata(metadata Metadata) {
	cpd.Metadata = metadata
}

func (cpd *CustomerPageData) GetItems() (items []models.Customer) {
	if cpd != nil {
		items = cpd.Items
	}
	return
}

func (cpd *CustomerPageData) SetItems(items []models.Customer) {
	cpd.Items = items
}

func (cr *CurrencyResponse) GetData() (data models.Currency) {
	if cr != nil {
		data = cr.Data
	}
	return
}

func (cr *CurrencyResponse) SetData(data models.Currency) {
	cr.Data = data
}

func (cpr *CurrencyPageResponse) GetData() (data CurrencyPageData) {
	if cpr != nil {
		data = cpr.Data
	}
	return
}

func (cpr *CurrencyPageResponse) SetData(data CurrencyPageData) {
	cpr.Data = data
}

func (cpd *CurrencyPageData) GetMetadata() (metadata Metadata) {
	if cpd != nil {
		metadata = cpd.Metadata
	}
	return
}

func (cpd *CurrencyPageData) SetMetadata(metadata Metadata) {
	cpd.Metadata = metadata
}

func (cpd *CurrencyPageData) GetItems() (items []models.Currency) {
	if cpd != nil {
		items = cpd.Items
	}
	return
}

func (cpd *CurrencyPageData) SetItems(items []models.Currency) {
	cpd.Items = items
}

func (clr *CurrencyListResponse) GetData() (data []models.Currency) {
	if clr != nil {
		data = clr.Data
	}
	return
}

func (clr *CurrencyListResponse) SetData(data []models.Currency) {
	clr.Data = data
}

func (cecpr *CurrencyExchangeContractPageResponse) GetData() (data CurrencyExchangeContractPageData) {
	if cecpr != nil {
		data = cecpr.Data
	}
	return
}

func (cecpr *CurrencyExchangeContractPageResponse) SetData(data CurrencyExchangeContractPageData) {
	cecpr.Data = data
}

func (cecpd *CurrencyExchangeContractPageData) GetMetadata() (metadata Metadata) {
	if cecpd != nil {
		metadata = cecpd.Metadata
	}
	return
}

func (cecpd *CurrencyExchangeContractPageData) SetMetadata(metadata Metadata) {
	cecpd.Metadata = metadata
}

func (cecpd *CurrencyExchangeContractPageData) GetItems() (items []models.CurrencyExchangeContract) {
	if cecpd != nil {
		items = cecpd.Items
	}
	return
}

func (cecpd *CurrencyExchangeContractPageData) SetItems(items []models.CurrencyExchangeContract) {
	cecpd.Items = items
}

func (cthpr *CrossTransactionHistoryPageResponse) GetData() (data CrossTransactionHistoryPageData) {
	if cthpr != nil {
		data = cthpr.Data
	}
	return
}

func (cthpr *CrossTransactionHistoryPageResponse) SetData(data CrossTransactionHistoryPageData) {
	cthpr.Data = data
}

func (cthpd *CrossTransactionHistoryPageData) GetMetadata() (metadata Metadata) {
	if cthpd != nil {
		metadata = cthpd.Metadata
	}
	return
}

func (cthpd *CrossTransactionHistoryPageData) SetMetadata(metadata Metadata) {
	cthpd.Metadata = metadata
}

func (cthpd *CrossTransactionHistoryPageData) GetItems() (items []models.CrossTransactionHistory) {
	if cthpd != nil {
		items = cthpd.Items
	}
	return
}

func (cthpd *CrossTransactionHistoryPageData) SetItems(items []models.CrossTransactionHistory) {
	cthpd.Items = items
}

func (cr *ContractResponse) GetData() (data models.CurrencyExchangeContract) {
	if cr != nil {
		data = cr.Data
	}
	return
}

func (cr *ContractResponse) SetData(data models.CurrencyExchangeContract) {
	cr.Data = data
}

func (cbr *ClientBankResponse) GetData() (data ClientBankItemResponse) {
	if cbr != nil {
		data = cbr.Data
	}
	return
}

func (cbr *ClientBankResponse) SetData(data ClientBankItemResponse) {
	cbr.Data = data
}

func (cbp *ClientBankParam) GetKey() (key string) {
	if cbp != nil {
		key = cbp.Key
	}
	return
}

func (cbp *ClientBankParam) SetKey(key string) {
	cbp.Key = key
}

func (cbp *ClientBankParam) GetValue() (value string) {
	if cbp != nil {
		value = cbp.Value
	}
	return
}

func (cbp *ClientBankParam) SetValue(value string) {
	cbp.Value = value
}

func (cbpr *ClientBankPageResponse) GetData() (data ClientBankPageData) {
	if cbpr != nil {
		data = cbpr.Data
	}
	return
}

func (cbpr *ClientBankPageResponse) SetData(data ClientBankPageData) {
	cbpr.Data = data
}

func (cbpd *ClientBankPageData) GetMetadata() (metadata Metadata) {
	if cbpd != nil {
		metadata = cbpd.Metadata
	}
	return
}

func (cbpd *ClientBankPageData) SetMetadata(metadata Metadata) {
	cbpd.Metadata = metadata
}

func (cbpd *ClientBankPageData) GetItems() (items []ClientBankItemResponse) {
	if cbpd != nil {
		items = cbpd.Items
	}
	return
}

func (cbpd *ClientBankPageData) SetItems(items []ClientBankItemResponse) {
	cbpd.Items = items
}

func (cbir *ClientBankItemResponse) GetAddress() (address string) {
	if cbir != nil {
		address = cbir.Address
	}
	return
}

func (cbir *ClientBankItemResponse) SetAddress(address string) {
	cbir.Address = address
}

func (cbir *ClientBankItemResponse) GetBankDisplayName() (bankDisplayName string) {
	if cbir != nil {
		bankDisplayName = cbir.BankDisplayName
	}
	return
}

func (cbir *ClientBankItemResponse) SetBankDisplayName(bankDisplayName string) {
	cbir.BankDisplayName = bankDisplayName
}

func (cbir *ClientBankItemResponse) GetAvailableContractTypes() (availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	if cbir != nil {
		availableContractTypes = cbir.AvailableContractTypes
	}
	return
}

func (cbir *ClientBankItemResponse) SetAvailableContractTypes(availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	cbir.AvailableContractTypes = availableContractTypes
}

func (cbir *ClientBankItemResponse) GetState() (state stateenum.State) {
	if cbir != nil {
		state = cbir.State
	}
	return
}

func (cbir *ClientBankItemResponse) SetState(state stateenum.State) {
	cbir.State = state
}

func (cbir *ClientBankItemResponse) GetCountryCode() (countryCode string) {
	if cbir != nil {
		countryCode = cbir.CountryCode
	}
	return
}

func (cbir *ClientBankItemResponse) SetCountryCode(countryCode string) {
	cbir.CountryCode = countryCode
}

func (cbir *ClientBankItemResponse) GetOwner() (owner string) {
	if cbir != nil {
		owner = cbir.Owner
	}
	return
}

func (cbir *ClientBankItemResponse) SetOwner(owner string) {
	cbir.Owner = owner
}

func (crr *ClearingResultResponse) GetData() (data models.ClearingData) {
	if crr != nil {
		data = crr.Data
	}
	return
}

func (crr *ClearingResultResponse) SetData(data models.ClearingData) {
	crr.Data = data
}

func (cpr *ClearingPageResponse) GetData() (data ClearingPageData) {
	if cpr != nil {
		data = cpr.Data
	}
	return
}

func (cpr *ClearingPageResponse) SetData(data ClearingPageData) {
	cpr.Data = data
}

func (cpd *ClearingPageData) GetMetadata() (metadata Metadata) {
	if cpd != nil {
		metadata = cpd.Metadata
	}
	return
}

func (cpd *ClearingPageData) SetMetadata(metadata Metadata) {
	cpd.Metadata = metadata
}

func (cpd *ClearingPageData) GetItems() (items []models.ClearingData) {
	if cpd != nil {
		items = cpd.Items
	}
	return
}

func (cpd *ClearingPageData) SetItems(items []models.ClearingData) {
	cpd.Items = items
}

func (clr *ClearingListResponse) GetData() (data []models.ClearingData) {
	if clr != nil {
		data = clr.Data
	}
	return
}

func (clr *ClearingListResponse) SetData(data []models.ClearingData) {
	clr.Data = data
}

func (cpr *ClaimsPageResponse) GetData() (data ClaimsPageData) {
	if cpr != nil {
		data = cpr.Data
	}
	return
}

func (cpr *ClaimsPageResponse) SetData(data ClaimsPageData) {
	cpr.Data = data
}

func (cpd *ClaimsPageData) GetMetadata() (metadata Metadata) {
	if cpd != nil {
		metadata = cpd.Metadata
	}
	return
}

func (cpd *ClaimsPageData) SetMetadata(metadata Metadata) {
	cpd.Metadata = metadata
}

func (cpd *ClaimsPageData) GetItems() (items []models.ClaimsItem) {
	if cpd != nil {
		items = cpd.Items
	}
	return
}

func (cpd *ClaimsPageData) SetItems(items []models.ClaimsItem) {
	cpd.Items = items
}

func (clr *ClaimsListResponse) GetData() (data []models.ClaimsItem) {
	if clr != nil {
		data = clr.Data
	}
	return
}

func (clr *ClaimsListResponse) SetData(data []models.ClaimsItem) {
	clr.Data = data
}

func (br *BaseResponse) GetErrorCode() (errorCode int) {
	if br != nil {
		errorCode = br.ErrorCode
	}
	return
}

func (br *BaseResponse) SetErrorCode(errorCode int) {
	br.ErrorCode = errorCode
}

func (br *BaseResponse) GetErrorMessage() (errorMessage string) {
	if br != nil {
		errorMessage = br.ErrorMessage
	}
	return
}

func (br *BaseResponse) SetErrorMessage(errorMessage string) {
	br.ErrorMessage = errorMessage
}

func (br *BaseResponse) GetTransactionId() (transactionId string) {
	if br != nil {
		transactionId = br.TransactionId
	}
	return
}

func (br *BaseResponse) SetTransactionId(transactionId string) {
	br.TransactionId = transactionId
}

func (br *BaseResponse) GetSenderAddress() (senderAddress string) {
	if br != nil {
		senderAddress = br.SenderAddress
	}
	return
}

func (br *BaseResponse) SetSenderAddress(senderAddress string) {
	br.SenderAddress = senderAddress
}

func (btr *BankTotalResponse) GetData() (data BankTotalData) {
	if btr != nil {
		data = btr.Data
	}
	return
}

func (btr *BankTotalResponse) SetData(data BankTotalData) {
	btr.Data = data
}

func (btd *BankTotalData) GetTotal() (total int) {
	if btd != nil {
		total = btd.Total
	}
	return
}

func (btd *BankTotalData) SetTotal(total int) {
	btd.Total = total
}

func (br *BankResponse) GetData() (data models.Bank) {
	if br != nil {
		data = br.Data
	}
	return
}

func (br *BankResponse) SetData(data models.Bank) {
	br.Data = data
}

func (bpr *BankPageResponse) GetData() (data BankPageData) {
	if bpr != nil {
		data = bpr.Data
	}
	return
}

func (bpr *BankPageResponse) SetData(data BankPageData) {
	bpr.Data = data
}

func (bpd *BankPageData) GetMetadata() (metadata Metadata) {
	if bpd != nil {
		metadata = bpd.Metadata
	}
	return
}

func (bpd *BankPageData) SetMetadata(metadata Metadata) {
	bpd.Metadata = metadata
}

func (bpd *BankPageData) GetItems() (items []models.Bank) {
	if bpd != nil {
		items = bpd.Items
	}
	return
}

func (bpd *BankPageData) SetItems(items []models.Bank) {
	bpd.Items = items
}

func (blr *BankListResponse) GetData() (data []models.Bank) {
	if blr != nil {
		data = blr.Data
	}
	return
}

func (blr *BankListResponse) SetData(data []models.Bank) {
	blr.Data = data
}

func (bclr *BankClaimsLiabilitiesResponse) GetData() (data BankClaimsLiabilities) {
	if bclr != nil {
		data = bclr.Data
	}
	return
}

func (bclr *BankClaimsLiabilitiesResponse) SetData(data BankClaimsLiabilities) {
	bclr.Data = data
}

func (bbr *BankBalanceResponse) GetData() (data BankBalanceData) {
	if bbr != nil {
		data = bbr.Data
	}
	return
}

func (bbr *BankBalanceResponse) SetData(data BankBalanceData) {
	bbr.Data = data
}

func (bbd *BankBalanceData) GetLiabilities() (liabilities []models.AmountOfBank) {
	if bbd != nil {
		liabilities = bbd.Liabilities
	}
	return
}

func (bbd *BankBalanceData) SetLiabilities(liabilities []models.AmountOfBank) {
	bbd.Liabilities = liabilities
}

func (bbd *BankBalanceData) GetClaims() (claims []models.AmountOfBank) {
	if bbd != nil {
		claims = bbd.Claims
	}
	return
}

func (bbd *BankBalanceData) SetClaims(claims []models.AmountOfBank) {
	bbd.Claims = claims
}

func (bbd *BankBalanceData) GetIssue() (issue int64) {
	if bbd != nil {
		issue = bbd.Issue
	}
	return
}

func (bbd *BankBalanceData) SetIssue(issue int64) {
	bbd.Issue = issue
}

func (bbd *BankBalanceData) GetIssueLimit() (issueLimit int64) {
	if bbd != nil {
		issueLimit = bbd.IssueLimit
	}
	return
}

func (bbd *BankBalanceData) SetIssueLimit(issueLimit int64) {
	bbd.IssueLimit = issueLimit
}

func (alr *ArbitratorListResponse) GetData() (data []models.Arbitrator) {
	if alr != nil {
		data = alr.Data
	}
	return
}

func (alr *ArbitratorListResponse) SetData(data []models.Arbitrator) {
	alr.Data = data
}

func (ar *AccountResponse) GetData() (data models.Account) {
	if ar != nil {
		data = ar.Data
	}
	return
}

func (ar *AccountResponse) SetData(data models.Account) {
	ar.Data = data
}

func (apr *AccountPageResponse) GetData() (data AccountPageData) {
	if apr != nil {
		data = apr.Data
	}
	return
}

func (apr *AccountPageResponse) SetData(data AccountPageData) {
	apr.Data = data
}

func (apd *AccountPageData) GetMetadata() (metadata Metadata) {
	if apd != nil {
		metadata = apd.Metadata
	}
	return
}

func (apd *AccountPageData) SetMetadata(metadata Metadata) {
	apd.Metadata = metadata
}

func (apd *AccountPageData) GetItems() (items []models.Account) {
	if apd != nil {
		items = apd.Items
	}
	return
}

func (apd *AccountPageData) SetItems(items []models.Account) {
	apd.Items = items
}

func (alr *AccountListResponse) GetData() (data []models.Account) {
	if alr != nil {
		data = alr.Data
	}
	return
}

func (alr *AccountListResponse) SetData(data []models.Account) {
	alr.Data = data
}

func (alr *AccountLimitsResponse) GetData() (data AccountLimitsData) {
	if alr != nil {
		data = alr.Data
	}
	return
}

func (alr *AccountLimitsResponse) SetData(data AccountLimitsData) {
	alr.Data = data
}

func (ald *AccountLimitsData) GetOperationLimit() (operationLimit int64) {
	if ald != nil {
		operationLimit = ald.OperationLimit
	}
	return
}

func (ald *AccountLimitsData) SetOperationLimit(operationLimit int64) {
	ald.OperationLimit = operationLimit
}

func (ald *AccountLimitsData) GetBalanceLimit() (balanceLimit int64) {
	if ald != nil {
		balanceLimit = ald.BalanceLimit
	}
	return
}

func (ald *AccountLimitsData) SetBalanceLimit(balanceLimit int64) {
	ald.BalanceLimit = balanceLimit
}

func (ald *AccountLimitsData) GetDailyLimit() (dailyLimit int64) {
	if ald != nil {
		dailyLimit = ald.DailyLimit
	}
	return
}

func (ald *AccountLimitsData) SetDailyLimit(dailyLimit int64) {
	ald.DailyLimit = dailyLimit
}

func (ald *AccountLimitsData) GetMonthlyLimit() (monthlyLimit int64) {
	if ald != nil {
		monthlyLimit = ald.MonthlyLimit
	}
	return
}

func (ald *AccountLimitsData) SetMonthlyLimit(monthlyLimit int64) {
	ald.MonthlyLimit = monthlyLimit
}

func (abr *AccountBalanceResponse) GetData() (data AccountBalanceData) {
	if abr != nil {
		data = abr.Data
	}
	return
}

func (abr *AccountBalanceResponse) SetData(data AccountBalanceData) {
	abr.Data = data
}

func (abd *AccountBalanceData) GetItems() (items []models.AmountOfBank) {
	if abd != nil {
		items = abd.Items
	}
	return
}

func (abd *AccountBalanceData) SetItems(items []models.AmountOfBank) {
	abd.Items = items
}

func (abd *AccountBalanceData) GetTotal() (total int64) {
	if abd != nil {
		total = abd.Total
	}
	return
}

func (abd *AccountBalanceData) SetTotal(total int64) {
	abd.Total = total
}

func (aar *AccountAddressResponse) GetData() (data string) {
	if aar != nil {
		data = aar.Data
	}
	return
}

func (aar *AccountAddressResponse) SetData(data string) {
	aar.Data = data
}
