// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package responses

import (
	json "encoding/json"
	state_enum "github.com/SolarLabRU/fastpay-go-commons/enums/state_enum"
	models "github.com/SolarLabRU/fastpay-go-commons/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses(in *jlexer.Lexer, out *WithdrawResultResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				if out.Data == nil {
					out.Data = new(models.WithdrawResult)
				}
				(*out.Data).UnmarshalEasyJSON(in)
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses(out *jwriter.Writer, in WithdrawResultResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil {
			out.RawString("null")
		} else {
			(*in.Data).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawResultResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawResultResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawResultResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawResultResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses1(in *jlexer.Lexer, out *WithdrawConfirmResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "history":
			(out.History).UnmarshalEasyJSON(in)
		case "data":
			out.Data = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses1(out *jwriter.Writer, in WithdrawConfirmResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix[1:])
		(in.History).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawConfirmResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawConfirmResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawConfirmResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawConfirmResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses1(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses2(in *jlexer.Lexer, out *TransferResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "history":
			(out.History).UnmarshalEasyJSON(in)
		case "data":
			out.Data = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses2(out *jwriter.Writer, in TransferResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix[1:])
		(in.History).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses2(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses3(in *jlexer.Lexer, out *TransferBatchResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "histories":
			if in.IsNull() {
				in.Skip()
				out.Histories = nil
			} else {
				in.Delim('[')
				if out.Histories == nil {
					if !in.IsDelim(']') {
						out.Histories = make([]models.TransactionHistory, 0, 1)
					} else {
						out.Histories = []models.TransactionHistory{}
					}
				} else {
					out.Histories = (out.Histories)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.TransactionHistory
					(v1).UnmarshalEasyJSON(in)
					out.Histories = append(out.Histories, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses3(out *jwriter.Writer, in TransferBatchResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"histories\":"
		out.RawString(prefix[1:])
		if in.Histories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Histories {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferBatchResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferBatchResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferBatchResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferBatchResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses3(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses4(in *jlexer.Lexer, out *TopupResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses4(out *jwriter.Writer, in TopupResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopupResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopupResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopupResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopupResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses4(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses5(in *jlexer.Lexer, out *SenderIsBankResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = bool(in.Bool())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses5(out *jwriter.Writer, in SenderIsBankResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Data))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SenderIsBankResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SenderIsBankResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SenderIsBankResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SenderIsBankResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses5(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses6(in *jlexer.Lexer, out *SenderAddressResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses6(out *jwriter.Writer, in SenderAddressResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SenderAddressResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SenderAddressResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SenderAddressResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SenderAddressResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses6(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses7(in *jlexer.Lexer, out *SenderAddressData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses7(out *jwriter.Writer, in SenderAddressData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SenderAddressData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SenderAddressData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SenderAddressData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SenderAddressData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses7(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses8(in *jlexer.Lexer, out *SafeDealResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses8(out *jwriter.Writer, in SafeDealResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafeDealResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafeDealResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafeDealResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafeDealResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses8(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses9(in *jlexer.Lexer, out *SafeDealDepositResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses9(out *jwriter.Writer, in SafeDealDepositResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafeDealDepositResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafeDealDepositResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafeDealDepositResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafeDealDepositResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses9(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses10(in *jlexer.Lexer, out *RoutesItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Commission":
			if in.IsNull() {
				in.Skip()
				out.Commission = nil
			} else {
				if out.Commission == nil {
					out.Commission = new(models.CurrencyContractRoutingItem)
				}
				(*out.Commission).UnmarshalEasyJSON(in)
			}
		case "Middle":
			if in.IsNull() {
				in.Skip()
				out.Middle = nil
			} else {
				if out.Middle == nil {
					out.Middle = new(models.CurrencyContractRoutingItem)
				}
				(*out.Middle).UnmarshalEasyJSON(in)
			}
		case "Input":
			if in.IsNull() {
				in.Skip()
				out.Input = nil
			} else {
				if out.Input == nil {
					out.Input = new(models.CurrencyContractRoutingItem)
				}
				(*out.Input).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses10(out *jwriter.Writer, in RoutesItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Commission\":"
		out.RawString(prefix[1:])
		if in.Commission == nil {
			out.RawString("null")
		} else {
			(*in.Commission).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Middle\":"
		out.RawString(prefix)
		if in.Middle == nil {
			out.RawString("null")
		} else {
			(*in.Middle).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Input\":"
		out.RawString(prefix)
		if in.Input == nil {
			out.RawString("null")
		} else {
			(*in.Input).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoutesItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoutesItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoutesItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoutesItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses10(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses11(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fetchedRecordsCount":
			out.FetchedRecordsCount = int32(in.Int32())
		case "bookmark":
			out.Bookmark = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses11(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fetchedRecordsCount\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.FetchedRecordsCount))
	}
	{
		const prefix string = ",\"bookmark\":"
		out.RawString(prefix)
		out.String(string(in.Bookmark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses11(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses12(in *jlexer.Lexer, out *LimitResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses12(out *jwriter.Writer, in LimitResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses12(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses13(in *jlexer.Lexer, out *LimitData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses13(out *jwriter.Writer, in LimitData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses13(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses14(in *jlexer.Lexer, out *InvoiceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses14(out *jwriter.Writer, in InvoiceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoiceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoiceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoiceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoiceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses14(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses15(in *jlexer.Lexer, out *InvoicePageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses15(out *jwriter.Writer, in InvoicePageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoicePageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoicePageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoicePageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoicePageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses15(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses16(in *jlexer.Lexer, out *InvoicePageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.Invoice, 0, 1)
					} else {
						out.Items = []models.Invoice{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v4 models.Invoice
					(v4).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses16(out *jwriter.Writer, in InvoicePageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Items {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoicePageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoicePageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoicePageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoicePageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses16(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses17(in *jlexer.Lexer, out *InvoiceListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.Invoice, 0, 1)
					} else {
						out.Data = []models.Invoice{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v7 models.Invoice
					(v7).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses17(out *jwriter.Writer, in InvoiceListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Data {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoiceListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoiceListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoiceListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoiceListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses17(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses18(in *jlexer.Lexer, out *GetBestRoutesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([][]models.CurrencyContractRoutingItem, 0, 2)
					} else {
						out.Data = [][]models.CurrencyContractRoutingItem{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v10 []models.CurrencyContractRoutingItem
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						in.Delim('[')
						if v10 == nil {
							if !in.IsDelim(']') {
								v10 = make([]models.CurrencyContractRoutingItem, 0, 1)
							} else {
								v10 = []models.CurrencyContractRoutingItem{}
							}
						} else {
							v10 = (v10)[:0]
						}
						for !in.IsDelim(']') {
							var v11 models.CurrencyContractRoutingItem
							(v11).UnmarshalEasyJSON(in)
							v10 = append(v10, v11)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses18(out *jwriter.Writer, in GetBestRoutesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Data {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v14, v15 := range v13 {
						if v14 > 0 {
							out.RawByte(',')
						}
						(v15).MarshalEasyJSON(out)
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBestRoutesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBestRoutesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBestRoutesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBestRoutesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses18(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses19(in *jlexer.Lexer, out *GetBankBalanceTotalResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bank":
			(out.Bank).UnmarshalEasyJSON(in)
		case "liabilities":
			if in.IsNull() {
				in.Skip()
				out.Liabilities = nil
			} else {
				in.Delim('[')
				if out.Liabilities == nil {
					if !in.IsDelim(']') {
						out.Liabilities = make([]models.AmountOfBank, 0, 2)
					} else {
						out.Liabilities = []models.AmountOfBank{}
					}
				} else {
					out.Liabilities = (out.Liabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v16 models.AmountOfBank
					(v16).UnmarshalEasyJSON(in)
					out.Liabilities = append(out.Liabilities, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "claims":
			if in.IsNull() {
				in.Skip()
				out.Claims = nil
			} else {
				in.Delim('[')
				if out.Claims == nil {
					if !in.IsDelim(']') {
						out.Claims = make([]models.AmountOfBank, 0, 2)
					} else {
						out.Claims = []models.AmountOfBank{}
					}
				} else {
					out.Claims = (out.Claims)[:0]
				}
				for !in.IsDelim(']') {
					var v17 models.AmountOfBank
					(v17).UnmarshalEasyJSON(in)
					out.Claims = append(out.Claims, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "issue":
			out.Issue = int64(in.Int64())
		case "issueLimit":
			out.IssueLimit = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses19(out *jwriter.Writer, in GetBankBalanceTotalResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bank\":"
		out.RawString(prefix[1:])
		(in.Bank).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"liabilities\":"
		out.RawString(prefix)
		if in.Liabilities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Liabilities {
				if v18 > 0 {
					out.RawByte(',')
				}
				(v19).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix)
		if in.Claims == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Claims {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"issue\":"
		out.RawString(prefix)
		out.Int64(int64(in.Issue))
	}
	{
		const prefix string = ",\"issueLimit\":"
		out.RawString(prefix)
		out.Int64(int64(in.IssueLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBankBalanceTotalResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBankBalanceTotalResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBankBalanceTotalResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBankBalanceTotalResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses19(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses20(in *jlexer.Lexer, out *GetBankBalanceTotalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]GetBankBalanceTotalResponseData, 0, 1)
					} else {
						out.Data = []GetBankBalanceTotalResponseData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v22 GetBankBalanceTotalResponseData
					(v22).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses20(out *jwriter.Writer, in GetBankBalanceTotalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Data {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBankBalanceTotalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBankBalanceTotalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBankBalanceTotalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBankBalanceTotalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses20(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses21(in *jlexer.Lexer, out *GetAvailablePlatformsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses21(out *jwriter.Writer, in GetAvailablePlatformsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAvailablePlatformsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAvailablePlatformsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAvailablePlatformsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAvailablePlatformsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses21(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses22(in *jlexer.Lexer, out *ExecutedTransactionCurrencyExchangeContractResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses22(out *jwriter.Writer, in ExecutedTransactionCurrencyExchangeContractResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecutedTransactionCurrencyExchangeContractResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecutedTransactionCurrencyExchangeContractResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecutedTransactionCurrencyExchangeContractResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecutedTransactionCurrencyExchangeContractResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses22(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses23(in *jlexer.Lexer, out *ExecutedTransactionCurrencyExchangeContractData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]models.ExecutedTransactionCurrencyExchangeContractItem, 0, 1)
					} else {
						out.Transactions = []models.ExecutedTransactionCurrencyExchangeContractItem{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v25 models.ExecutedTransactionCurrencyExchangeContractItem
					(v25).UnmarshalEasyJSON(in)
					out.Transactions = append(out.Transactions, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "commission":
			out.Commission = int64(in.Int64())
		case "amountInput":
			out.AmountInput = int64(in.Int64())
		case "amountOutput":
			out.AmountOutput = int64(in.Int64())
		case "transactionHistories":
			if in.IsNull() {
				in.Skip()
				out.TransactionHistories = nil
			} else {
				in.Delim('[')
				if out.TransactionHistories == nil {
					if !in.IsDelim(']') {
						out.TransactionHistories = make([]models.TransactionHistory, 0, 1)
					} else {
						out.TransactionHistories = []models.TransactionHistory{}
					}
				} else {
					out.TransactionHistories = (out.TransactionHistories)[:0]
				}
				for !in.IsDelim(']') {
					var v26 models.TransactionHistory
					(v26).UnmarshalEasyJSON(in)
					out.TransactionHistories = append(out.TransactionHistories, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses23(out *jwriter.Writer, in ExecutedTransactionCurrencyExchangeContractData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix[1:])
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Transactions {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"commission\":"
		out.RawString(prefix)
		out.Int64(int64(in.Commission))
	}
	{
		const prefix string = ",\"amountInput\":"
		out.RawString(prefix)
		out.Int64(int64(in.AmountInput))
	}
	{
		const prefix string = ",\"amountOutput\":"
		out.RawString(prefix)
		out.Int64(int64(in.AmountOutput))
	}
	{
		const prefix string = ",\"transactionHistories\":"
		out.RawString(prefix)
		if in.TransactionHistories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.TransactionHistories {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecutedTransactionCurrencyExchangeContractData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecutedTransactionCurrencyExchangeContractData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecutedTransactionCurrencyExchangeContractData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecutedTransactionCurrencyExchangeContractData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses23(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses24(in *jlexer.Lexer, out *CustomersListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.Customer, 0, 1)
					} else {
						out.Data = []models.Customer{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v31 models.Customer
					(v31).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses24(out *jwriter.Writer, in CustomersListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Data {
				if v32 > 0 {
					out.RawByte(',')
				}
				(v33).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomersListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomersListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomersListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomersListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses24(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses25(in *jlexer.Lexer, out *CustomerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses25(out *jwriter.Writer, in CustomerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses25(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses26(in *jlexer.Lexer, out *CustomerPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses26(out *jwriter.Writer, in CustomerPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomerPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomerPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomerPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomerPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses26(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses27(in *jlexer.Lexer, out *CustomerPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.Customer, 0, 1)
					} else {
						out.Items = []models.Customer{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v34 models.Customer
					(v34).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses27(out *jwriter.Writer, in CustomerPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Items {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomerPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomerPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomerPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomerPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses27(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses28(in *jlexer.Lexer, out *CurrencyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses28(out *jwriter.Writer, in CurrencyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses28(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses29(in *jlexer.Lexer, out *CurrencyPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses29(out *jwriter.Writer, in CurrencyPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses29(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses30(in *jlexer.Lexer, out *CurrencyPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.Currency, 0, 1)
					} else {
						out.Items = []models.Currency{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v37 models.Currency
					(v37).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses30(out *jwriter.Writer, in CurrencyPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Items {
				if v38 > 0 {
					out.RawByte(',')
				}
				(v39).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses30(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses31(in *jlexer.Lexer, out *CurrencyListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.Currency, 0, 1)
					} else {
						out.Data = []models.Currency{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v40 models.Currency
					(v40).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses31(out *jwriter.Writer, in CurrencyListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Data {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses31(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses32(in *jlexer.Lexer, out *CurrencyExchangeContractPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses32(out *jwriter.Writer, in CurrencyExchangeContractPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyExchangeContractPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyExchangeContractPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyExchangeContractPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyExchangeContractPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses32(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses33(in *jlexer.Lexer, out *CurrencyExchangeContractPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.CurrencyExchangeContract, 0, 1)
					} else {
						out.Items = []models.CurrencyExchangeContract{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v43 models.CurrencyExchangeContract
					(v43).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses33(out *jwriter.Writer, in CurrencyExchangeContractPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Items {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyExchangeContractPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyExchangeContractPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyExchangeContractPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyExchangeContractPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses33(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses34(in *jlexer.Lexer, out *CrossTransactionHistoryPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses34(out *jwriter.Writer, in CrossTransactionHistoryPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossTransactionHistoryPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossTransactionHistoryPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossTransactionHistoryPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossTransactionHistoryPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses34(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses35(in *jlexer.Lexer, out *CrossTransactionHistoryPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.CrossTransactionHistory, 0, 1)
					} else {
						out.Items = []models.CrossTransactionHistory{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v46 models.CrossTransactionHistory
					(v46).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses35(out *jwriter.Writer, in CrossTransactionHistoryPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Items {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossTransactionHistoryPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossTransactionHistoryPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossTransactionHistoryPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossTransactionHistoryPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses35(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses36(in *jlexer.Lexer, out *ContractResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses36(out *jwriter.Writer, in ContractResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContractResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContractResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses36(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses37(in *jlexer.Lexer, out *ClientBankResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses37(out *jwriter.Writer, in ClientBankResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientBankResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientBankResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientBankResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientBankResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses37(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses38(in *jlexer.Lexer, out *ClientBankParam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses38(out *jwriter.Writer, in ClientBankParam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientBankParam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientBankParam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientBankParam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientBankParam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses38(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses39(in *jlexer.Lexer, out *ClientBankPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses39(out *jwriter.Writer, in ClientBankPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientBankPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientBankPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientBankPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientBankPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses39(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses40(in *jlexer.Lexer, out *ClientBankPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]ClientBankItemResponse, 0, 1)
					} else {
						out.Items = []ClientBankItemResponse{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v49 ClientBankItemResponse
					(v49).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses40(out *jwriter.Writer, in ClientBankPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Items {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientBankPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientBankPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientBankPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientBankPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses40(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses41(in *jlexer.Lexer, out *ClientBankItemResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "bankDisplayName":
			out.BankDisplayName = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(map[string]string)
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 string
					v52 = string(in.String())
					(out.Params)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "owner":
			out.Owner = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses41(out *jwriter.Writer, in ClientBankItemResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"bankDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.BankDisplayName))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v53First := true
			for v53Name, v53Value := range in.Params {
				if v53First {
					v53First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v53Name))
				out.RawByte(':')
				out.String(string(v53Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientBankItemResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientBankItemResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientBankItemResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientBankItemResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses41(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses42(in *jlexer.Lexer, out *ClearingResultResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses42(out *jwriter.Writer, in ClearingResultResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingResultResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingResultResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingResultResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingResultResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses42(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses43(in *jlexer.Lexer, out *ClearingPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses43(out *jwriter.Writer, in ClearingPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses43(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses44(in *jlexer.Lexer, out *ClearingPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.ClearingData, 0, 1)
					} else {
						out.Items = []models.ClearingData{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v54 models.ClearingData
					(v54).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses44(out *jwriter.Writer, in ClearingPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v55, v56 := range in.Items {
				if v55 > 0 {
					out.RawByte(',')
				}
				(v56).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses44(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses45(in *jlexer.Lexer, out *ClearingListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.ClearingData, 0, 1)
					} else {
						out.Data = []models.ClearingData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v57 models.ClearingData
					(v57).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses45(out *jwriter.Writer, in ClearingListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v58, v59 := range in.Data {
				if v58 > 0 {
					out.RawByte(',')
				}
				(v59).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses45(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses46(in *jlexer.Lexer, out *ClaimsPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses46(out *jwriter.Writer, in ClaimsPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses46(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses47(in *jlexer.Lexer, out *ClaimsPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.ClaimsItem, 0, 1)
					} else {
						out.Items = []models.ClaimsItem{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v60 models.ClaimsItem
					(v60).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses47(out *jwriter.Writer, in ClaimsPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v61, v62 := range in.Items {
				if v61 > 0 {
					out.RawByte(',')
				}
				(v62).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses47(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses48(in *jlexer.Lexer, out *ClaimsListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.ClaimsItem, 0, 1)
					} else {
						out.Data = []models.ClaimsItem{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v63 models.ClaimsItem
					(v63).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses48(out *jwriter.Writer, in ClaimsListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v64, v65 := range in.Data {
				if v64 > 0 {
					out.RawByte(',')
				}
				(v65).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses48(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses49(in *jlexer.Lexer, out *BaseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses49(out *jwriter.Writer, in BaseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses49(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses50(in *jlexer.Lexer, out *BankTotalResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses50(out *jwriter.Writer, in BankTotalResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankTotalResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankTotalResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankTotalResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankTotalResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses50(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses51(in *jlexer.Lexer, out *BankTotalData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses51(out *jwriter.Writer, in BankTotalData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankTotalData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankTotalData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankTotalData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankTotalData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses51(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses52(in *jlexer.Lexer, out *BankResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses52(out *jwriter.Writer, in BankResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses52(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses53(in *jlexer.Lexer, out *BankPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses53(out *jwriter.Writer, in BankPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses53(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses54(in *jlexer.Lexer, out *BankPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.Bank, 0, 1)
					} else {
						out.Items = []models.Bank{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v66 models.Bank
					(v66).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses54(out *jwriter.Writer, in BankPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.Items {
				if v67 > 0 {
					out.RawByte(',')
				}
				(v68).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses54(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses55(in *jlexer.Lexer, out *BankListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.Bank, 0, 1)
					} else {
						out.Data = []models.Bank{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v69 models.Bank
					(v69).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses55(out *jwriter.Writer, in BankListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v70, v71 := range in.Data {
				if v70 > 0 {
					out.RawByte(',')
				}
				(v71).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses55(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses56(in *jlexer.Lexer, out *BankClaimsLiabilitiesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses56(out *jwriter.Writer, in BankClaimsLiabilitiesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankClaimsLiabilitiesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankClaimsLiabilitiesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankClaimsLiabilitiesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankClaimsLiabilitiesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses56(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses57(in *jlexer.Lexer, out *BankClaimsLiabilities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "claims":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Claims = make(map[string]int64)
				} else {
					out.Claims = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v72 int64
					v72 = int64(in.Int64())
					(out.Claims)[key] = v72
					in.WantComma()
				}
				in.Delim('}')
			}
		case "liabilities":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Liabilities = make(map[string]int64)
				} else {
					out.Liabilities = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v73 int64
					v73 = int64(in.Int64())
					(out.Liabilities)[key] = v73
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses57(out *jwriter.Writer, in BankClaimsLiabilities) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix[1:])
		if in.Claims == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v74First := true
			for v74Name, v74Value := range in.Claims {
				if v74First {
					v74First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v74Name))
				out.RawByte(':')
				out.Int64(int64(v74Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"liabilities\":"
		out.RawString(prefix)
		if in.Liabilities == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v75First := true
			for v75Name, v75Value := range in.Liabilities {
				if v75First {
					v75First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v75Name))
				out.RawByte(':')
				out.Int64(int64(v75Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankClaimsLiabilities) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankClaimsLiabilities) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankClaimsLiabilities) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankClaimsLiabilities) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses57(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses58(in *jlexer.Lexer, out *BankBalanceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses58(out *jwriter.Writer, in BankBalanceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankBalanceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankBalanceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankBalanceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankBalanceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses58(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses59(in *jlexer.Lexer, out *BankBalanceData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "liabilities":
			if in.IsNull() {
				in.Skip()
				out.Liabilities = nil
			} else {
				in.Delim('[')
				if out.Liabilities == nil {
					if !in.IsDelim(']') {
						out.Liabilities = make([]models.AmountOfBank, 0, 2)
					} else {
						out.Liabilities = []models.AmountOfBank{}
					}
				} else {
					out.Liabilities = (out.Liabilities)[:0]
				}
				for !in.IsDelim(']') {
					var v76 models.AmountOfBank
					(v76).UnmarshalEasyJSON(in)
					out.Liabilities = append(out.Liabilities, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "claims":
			if in.IsNull() {
				in.Skip()
				out.Claims = nil
			} else {
				in.Delim('[')
				if out.Claims == nil {
					if !in.IsDelim(']') {
						out.Claims = make([]models.AmountOfBank, 0, 2)
					} else {
						out.Claims = []models.AmountOfBank{}
					}
				} else {
					out.Claims = (out.Claims)[:0]
				}
				for !in.IsDelim(']') {
					var v77 models.AmountOfBank
					(v77).UnmarshalEasyJSON(in)
					out.Claims = append(out.Claims, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "issue":
			out.Issue = int64(in.Int64())
		case "issueLimit":
			out.IssueLimit = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses59(out *jwriter.Writer, in BankBalanceData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"liabilities\":"
		out.RawString(prefix[1:])
		if in.Liabilities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v78, v79 := range in.Liabilities {
				if v78 > 0 {
					out.RawByte(',')
				}
				(v79).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix)
		if in.Claims == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Claims {
				if v80 > 0 {
					out.RawByte(',')
				}
				(v81).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"issue\":"
		out.RawString(prefix)
		out.Int64(int64(in.Issue))
	}
	{
		const prefix string = ",\"issueLimit\":"
		out.RawString(prefix)
		out.Int64(int64(in.IssueLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankBalanceData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankBalanceData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankBalanceData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankBalanceData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses59(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses60(in *jlexer.Lexer, out *ArbitratorListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.Arbitrator, 0, 1)
					} else {
						out.Data = []models.Arbitrator{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v82 models.Arbitrator
					(v82).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses60(out *jwriter.Writer, in ArbitratorListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Data {
				if v83 > 0 {
					out.RawByte(',')
				}
				(v84).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArbitratorListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArbitratorListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArbitratorListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArbitratorListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses60(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses61(in *jlexer.Lexer, out *AccountResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses61(out *jwriter.Writer, in AccountResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses61(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses62(in *jlexer.Lexer, out *AccountPageResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses62(out *jwriter.Writer, in AccountPageResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountPageResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountPageResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountPageResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountPageResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses62(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses63(in *jlexer.Lexer, out *AccountPageData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.Account, 0, 1)
					} else {
						out.Items = []models.Account{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v85 models.Account
					(v85).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses63(out *jwriter.Writer, in AccountPageData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		(in.Metadata).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.Items {
				if v86 > 0 {
					out.RawByte(',')
				}
				(v87).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountPageData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountPageData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountPageData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountPageData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses63(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses64(in *jlexer.Lexer, out *AccountListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]models.Account, 0, 1)
					} else {
						out.Data = []models.Account{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v88 models.Account
					(v88).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses64(out *jwriter.Writer, in AccountListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Data {
				if v89 > 0 {
					out.RawByte(',')
				}
				(v90).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses64(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses65(in *jlexer.Lexer, out *AccountLimitsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses65(out *jwriter.Writer, in AccountLimitsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountLimitsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountLimitsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountLimitsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountLimitsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses65(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses66(in *jlexer.Lexer, out *AccountLimitsData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "operationLimit":
			out.OperationLimit = int64(in.Int64())
		case "balanceLimit":
			out.BalanceLimit = int64(in.Int64())
		case "dailyLimit":
			out.DailyLimit = int64(in.Int64())
		case "monthlyLimit":
			out.MonthlyLimit = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses66(out *jwriter.Writer, in AccountLimitsData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"operationLimit\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.OperationLimit))
	}
	{
		const prefix string = ",\"balanceLimit\":"
		out.RawString(prefix)
		out.Int64(int64(in.BalanceLimit))
	}
	{
		const prefix string = ",\"dailyLimit\":"
		out.RawString(prefix)
		out.Int64(int64(in.DailyLimit))
	}
	{
		const prefix string = ",\"monthlyLimit\":"
		out.RawString(prefix)
		out.Int64(int64(in.MonthlyLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountLimitsData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountLimitsData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountLimitsData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountLimitsData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses66(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses67(in *jlexer.Lexer, out *AccountBalanceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses67(out *jwriter.Writer, in AccountBalanceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountBalanceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountBalanceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountBalanceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountBalanceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses67(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses68(in *jlexer.Lexer, out *AccountBalanceData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]models.AmountOfBank, 0, 2)
					} else {
						out.Items = []models.AmountOfBank{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v91 models.AmountOfBank
					(v91).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses68(out *jwriter.Writer, in AccountBalanceData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix[1:])
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v92, v93 := range in.Items {
				if v92 > 0 {
					out.RawByte(',')
				}
				(v93).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountBalanceData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountBalanceData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountBalanceData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountBalanceData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses68(l, v)
}
func easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses69(in *jlexer.Lexer, out *AccountAddressResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses69(out *jwriter.Writer, in AccountAddressResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountAddressResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountAddressResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComSolarLabRUFastpayGoCommonsResponses69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountAddressResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountAddressResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComSolarLabRUFastpayGoCommonsResponses69(l, v)
}
