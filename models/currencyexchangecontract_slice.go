// Generated by: gen
// TypeWriter: slice
// Directive: +gen on *CurrencyExchangeContract

package models

// CurrencyExchangeContractSlice is a slice of type *CurrencyExchangeContract. Use it where you would use []*CurrencyExchangeContract.
type CurrencyExchangeContractSlice []*CurrencyExchangeContract

// Any verifies that one or more elements of CurrencyExchangeContractSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#Any
func (rcv CurrencyExchangeContractSlice) Any(fn func(*CurrencyExchangeContract) bool) bool {
	for _, v := range rcv {
		if fn(v) {
			return true
		}
	}
	return false
}

// Where returns a new CurrencyExchangeContractSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv CurrencyExchangeContractSlice) Where(fn func(*CurrencyExchangeContract) bool) (result CurrencyExchangeContractSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Count gives the number elements of CurrencyExchangeContractSlice that return true for the passed func. See: http://clipperhouse.github.io/gen/#Count
func (rcv CurrencyExchangeContractSlice) Count(fn func(*CurrencyExchangeContract) bool) (result int) {
	for _, v := range rcv {
		if fn(v) {
			result++
		}
	}
	return
}

// AggregateAddressOfAccountSlice iterates over CurrencyExchangeContractSlice, operating on each element while maintaining ‘state’. See: http://clipperhouse.github.io/gen/#Aggregate
func (rcv CurrencyExchangeContractSlice) AggregateAddressOfAccountSlice(fn func(AddressOfAccountSlice, *CurrencyExchangeContract) AddressOfAccountSlice) (result AddressOfAccountSlice) {
	for _, v := range rcv {
		result = fn(result, v)
	}
	return
}

// AggregateCurrencyContractRoutingItem iterates over CurrencyExchangeContractSlice, operating on each element while maintaining ‘state’. See: http://clipperhouse.github.io/gen/#Aggregate
func (rcv CurrencyExchangeContractSlice) AggregateCurrencyContractRoutingItem(fn func(CurrencyContractRoutingItem, *CurrencyExchangeContract) CurrencyContractRoutingItem) (result CurrencyContractRoutingItem) {
	for _, v := range rcv {
		result = fn(result, v)
	}
	return
}

// All verifies that all elements of CurrencyExchangeContractSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#All
func (rcv CurrencyExchangeContractSlice) All(fn func(*CurrencyExchangeContract) bool) bool {
	for _, v := range rcv {
		if !fn(v) {
			return false
		}
	}
	return true
}
