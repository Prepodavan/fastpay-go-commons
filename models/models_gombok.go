// Code generated by gombok. DO NOT EDIT.

package models

import (
	accessroleenum "github.com/SolarLabRU/fastpay-go-commons/enums/access-role-enum"
	accounttypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/account-type-enum"
	crosstransactionpayloadenum "github.com/SolarLabRU/fastpay-go-commons/enums/cross-transaction-payload-enum"
	crosstransactionstatusenum "github.com/SolarLabRU/fastpay-go-commons/enums/cross-transaction-status-enum"
	currencyexchangecontractcategoryenum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-exchange-contract-category-enum"
	currencyexchangecontracttypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-exchange-contract-type-enum"
	currencytypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-type-enum"
	dealstateenum "github.com/SolarLabRU/fastpay-go-commons/enums/deal-state-enum"
	dealtransferstatusenum "github.com/SolarLabRU/fastpay-go-commons/enums/deal-transfer-status-enum"
	identitytypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/identity-type-enum"
	invitestatusenum "github.com/SolarLabRU/fastpay-go-commons/enums/invite-status-enum"
	invoicestateenum "github.com/SolarLabRU/fastpay-go-commons/enums/invoice-state-enum"
	juridicaltypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/juridical-type-enum"
	memberdealtypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/member-deal-type-enum"
	operationdealtypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/operation-deal-type-enum"
	safedealdeposittypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/safe-deal-deposit-type-enum"
	stateenum "github.com/SolarLabRU/fastpay-go-commons/enums/state_enum"
	transactionstatusenum "github.com/SolarLabRU/fastpay-go-commons/enums/transaction-status-enum"
	transactiontypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/transaction-type-enum"
)

func (wr *WithdrawResult) GetAccountAmount() (accountAmount int64) {
	if wr != nil {
		accountAmount = wr.AccountAmount
	}
	return
}

func (wr *WithdrawResult) SetAccountAmount(accountAmount int64) {
	wr.AccountAmount = accountAmount
}

func (wr *WithdrawResult) GetIssueBankAmount() (issueBankAmount int64) {
	if wr != nil {
		issueBankAmount = wr.IssueBankAmount
	}
	return
}

func (wr *WithdrawResult) SetIssueBankAmount(issueBankAmount int64) {
	wr.IssueBankAmount = issueBankAmount
}

func (wr *WithdrawResult) GetBanksTotalAmount() (banksTotalAmount int64) {
	if wr != nil {
		banksTotalAmount = wr.BanksTotalAmount
	}
	return
}

func (wr *WithdrawResult) SetBanksTotalAmount(banksTotalAmount int64) {
	wr.BanksTotalAmount = banksTotalAmount
}

func (wr *WithdrawResult) GetTxId() (txId string) {
	if wr != nil {
		txId = wr.TxId
	}
	return
}

func (wr *WithdrawResult) SetTxId(txId string) {
	wr.TxId = txId
}

func (tsd *TransferSafeDeal) GetAddressFrom() (addressFrom string) {
	if tsd != nil {
		addressFrom = tsd.AddressFrom
	}
	return
}

func (tsd *TransferSafeDeal) SetAddressFrom(addressFrom string) {
	tsd.AddressFrom = addressFrom
}

func (tsd *TransferSafeDeal) GetAddressTo() (addressTo string) {
	if tsd != nil {
		addressTo = tsd.AddressTo
	}
	return
}

func (tsd *TransferSafeDeal) SetAddressTo(addressTo string) {
	tsd.AddressTo = addressTo
}

func (tsd *TransferSafeDeal) GetCurrencyInfo() (currencyInfo CurrencyDealInfo) {
	if tsd != nil {
		currencyInfo = tsd.CurrencyInfo
	}
	return
}

func (tsd *TransferSafeDeal) SetCurrencyInfo(currencyInfo CurrencyDealInfo) {
	tsd.CurrencyInfo = currencyInfo
}

func (tsd *TransferSafeDeal) GetAmount() (amount int64) {
	if tsd != nil {
		amount = tsd.Amount
	}
	return
}

func (tsd *TransferSafeDeal) SetAmount(amount int64) {
	tsd.Amount = amount
}

func (thl *TransferHistoryLimit) GetTransferHistoryAddress() (transferHistoryAddress string) {
	if thl != nil {
		transferHistoryAddress = thl.TransferHistoryAddress
	}
	return
}

func (thl *TransferHistoryLimit) SetTransferHistoryAddress(transferHistoryAddress string) {
	thl.TransferHistoryAddress = transferHistoryAddress
}

func (thl *TransferHistoryLimit) GetYearMonth() (yearMonth int) {
	if thl != nil {
		yearMonth = thl.YearMonth
	}
	return
}

func (thl *TransferHistoryLimit) SetYearMonth(yearMonth int) {
	thl.YearMonth = yearMonth
}

func (thl *TransferHistoryLimit) GetDay() (day int) {
	if thl != nil {
		day = thl.Day
	}
	return
}

func (thl *TransferHistoryLimit) SetDay(day int) {
	thl.Day = day
}

func (thl *TransferHistoryLimit) GetValue() (value int64) {
	if thl != nil {
		value = thl.Value
	}
	return
}

func (thl *TransferHistoryLimit) SetValue(value int64) {
	thl.Value = value
}

func (thl *TransferHistoryLimit) GetTxID() (txID string) {
	if thl != nil {
		txID = thl.TxID
	}
	return
}

func (thl *TransferHistoryLimit) SetTxID(txID string) {
	thl.TxID = txID
}

func (thl *TransferHistoryLimit) GetDocType() (docType string) {
	if thl != nil {
		docType = thl.DocType
	}
	return
}

func (thl *TransferHistoryLimit) SetDocType(docType string) {
	thl.DocType = docType
}

func (the *TransactionHistoryEvent) GetHistory() (history TransactionHistory) {
	if the != nil {
		history = the.History
	}
	return
}

func (the *TransactionHistoryEvent) SetHistory(history TransactionHistory) {
	the.History = history
}

func (th *TransactionHistory) GetTxId() (txId string) {
	if th != nil {
		txId = th.TxId
	}
	return
}

func (th *TransactionHistory) SetTxId(txId string) {
	th.TxId = txId
}

func (th *TransactionHistory) GetAddressFrom() (addressFrom string) {
	if th != nil {
		addressFrom = th.AddressFrom
	}
	return
}

func (th *TransactionHistory) SetAddressFrom(addressFrom string) {
	th.AddressFrom = addressFrom
}

func (th *TransactionHistory) GetAddressTo() (addressTo string) {
	if th != nil {
		addressTo = th.AddressTo
	}
	return
}

func (th *TransactionHistory) SetAddressTo(addressTo string) {
	th.AddressTo = addressTo
}

func (th *TransactionHistory) GetTxType() (txType transactiontypeenum.TransactionType) {
	if th != nil {
		txType = th.TxType
	}
	return
}

func (th *TransactionHistory) SetTxType(txType transactiontypeenum.TransactionType) {
	th.TxType = txType
}

func (th *TransactionHistory) GetStatus() (status transactionstatusenum.TransactionStatus) {
	if th != nil {
		status = th.Status
	}
	return
}

func (th *TransactionHistory) SetStatus(status transactionstatusenum.TransactionStatus) {
	th.Status = status
}

func (th *TransactionHistory) GetAmount() (amount int64) {
	if th != nil {
		amount = th.Amount
	}
	return
}

func (th *TransactionHistory) SetAmount(amount int64) {
	th.Amount = amount
}

func (th *TransactionHistory) GetCurrencyCode() (currencyCode int) {
	if th != nil {
		currencyCode = th.CurrencyCode
	}
	return
}

func (th *TransactionHistory) SetCurrencyCode(currencyCode int) {
	th.CurrencyCode = currencyCode
}

func (th *TransactionHistory) GetErrorCode() (errorCode int) {
	if th != nil {
		errorCode = th.ErrorCode
	}
	return
}

func (th *TransactionHistory) SetErrorCode(errorCode int) {
	th.ErrorCode = errorCode
}

func (th *TransactionHistory) GetErrorMessage() (errorMessage string) {
	if th != nil {
		errorMessage = th.ErrorMessage
	}
	return
}

func (th *TransactionHistory) SetErrorMessage(errorMessage string) {
	th.ErrorMessage = errorMessage
}

func (th *TransactionHistory) GetPayload() (payload string) {
	if th != nil {
		payload = th.Payload
	}
	return
}

func (th *TransactionHistory) SetPayload(payload string) {
	th.Payload = payload
}

func (th *TransactionHistory) GetTimestamp() (timestamp int64) {
	if th != nil {
		timestamp = th.Timestamp
	}
	return
}

func (th *TransactionHistory) SetTimestamp(timestamp int64) {
	th.Timestamp = timestamp
}

func (th *TransactionHistory) GetTransactionId() (transactionId string) {
	if th != nil {
		transactionId = th.TransactionId
	}
	return
}

func (th *TransactionHistory) SetTransactionId(transactionId string) {
	th.TransactionId = transactionId
}

func (th *TransactionHistory) GetSenderAddress() (senderAddress string) {
	if th != nil {
		senderAddress = th.SenderAddress
	}
	return
}

func (th *TransactionHistory) SetSenderAddress(senderAddress string) {
	th.SenderAddress = senderAddress
}

func (th *TransactionHistory) GetData() (data string) {
	if th != nil {
		data = th.Data
	}
	return
}

func (th *TransactionHistory) SetData(data string) {
	th.Data = data
}

func (th *TransactionHistory) GetInvoiceNumber() (invoiceNumber string) {
	if th != nil {
		invoiceNumber = th.InvoiceNumber
	}
	return
}

func (th *TransactionHistory) SetInvoiceNumber(invoiceNumber string) {
	th.InvoiceNumber = invoiceNumber
}

func (th *TransactionHistory) GetOrdinalNumber() (ordinalNumber int) {
	if th != nil {
		ordinalNumber = th.OrdinalNumber
	}
	return
}

func (th *TransactionHistory) SetOrdinalNumber(ordinalNumber int) {
	th.OrdinalNumber = ordinalNumber
}

func (te *TransactionEvent) GetData() (data []TransactionHistory) {
	if te != nil {
		data = te.Data
	}
	return
}

func (te *TransactionEvent) SetData(data []TransactionHistory) {
	te.Data = data
}

func (td *TermsDeal) GetAddressInitiator() (addressInitiator string) {
	if td != nil {
		addressInitiator = td.AddressInitiator
	}
	return
}

func (td *TermsDeal) SetAddressInitiator(addressInitiator string) {
	td.AddressInitiator = addressInitiator
}

func (td *TermsDeal) GetCurrencyInfoInitiator() (currencyInfoInitiator CurrencyDealInfo) {
	if td != nil {
		currencyInfoInitiator = td.CurrencyInfoInitiator
	}
	return
}

func (td *TermsDeal) SetCurrencyInfoInitiator(currencyInfoInitiator CurrencyDealInfo) {
	td.CurrencyInfoInitiator = currencyInfoInitiator
}

func (td *TermsDeal) GetAmountInitiator() (amountInitiator int64) {
	if td != nil {
		amountInitiator = td.AmountInitiator
	}
	return
}

func (td *TermsDeal) SetAmountInitiator(amountInitiator int64) {
	td.AmountInitiator = amountInitiator
}

func (td *TermsDeal) GetOperationTypeInitiator() (operationTypeInitiator operationdealtypeenum.OperationDealType) {
	if td != nil {
		operationTypeInitiator = td.OperationTypeInitiator
	}
	return
}

func (td *TermsDeal) SetOperationTypeInitiator(operationTypeInitiator operationdealtypeenum.OperationDealType) {
	td.OperationTypeInitiator = operationTypeInitiator
}

func (td *TermsDeal) GetPrice() (price float64) {
	if td != nil {
		price = td.Price
	}
	return
}

func (td *TermsDeal) SetPrice(price float64) {
	td.Price = price
}

func (td *TermsDeal) GetMinAmount() (minAmount int64) {
	if td != nil {
		minAmount = td.MinAmount
	}
	return
}

func (td *TermsDeal) SetMinAmount(minAmount int64) {
	td.MinAmount = minAmount
}

func (td *TermsDeal) GetMaxAmount() (maxAmount int64) {
	if td != nil {
		maxAmount = td.MaxAmount
	}
	return
}

func (td *TermsDeal) SetMaxAmount(maxAmount int64) {
	td.MaxAmount = maxAmount
}

func (td *TermsDeal) GetAddressAcceptor() (addressAcceptor string) {
	if td != nil {
		addressAcceptor = td.AddressAcceptor
	}
	return
}

func (td *TermsDeal) SetAddressAcceptor(addressAcceptor string) {
	td.AddressAcceptor = addressAcceptor
}

func (td *TermsDeal) GetCurrencyInfoAcceptor() (currencyInfoAcceptor CurrencyDealInfo) {
	if td != nil {
		currencyInfoAcceptor = td.CurrencyInfoAcceptor
	}
	return
}

func (td *TermsDeal) SetCurrencyInfoAcceptor(currencyInfoAcceptor CurrencyDealInfo) {
	td.CurrencyInfoAcceptor = currencyInfoAcceptor
}

func (td *TermsDeal) GetOperationTypeAcceptor() (operationTypeAcceptor operationdealtypeenum.OperationDealType) {
	if td != nil {
		operationTypeAcceptor = td.OperationTypeAcceptor
	}
	return
}

func (td *TermsDeal) SetOperationTypeAcceptor(operationTypeAcceptor operationdealtypeenum.OperationDealType) {
	td.OperationTypeAcceptor = operationTypeAcceptor
}

func (td *TermsDeal) GetAmountAcceptor() (amountAcceptor int64) {
	if td != nil {
		amountAcceptor = td.AmountAcceptor
	}
	return
}

func (td *TermsDeal) SetAmountAcceptor(amountAcceptor int64) {
	td.AmountAcceptor = amountAcceptor
}

func (tcc *TermsContractConclude) GetAddressFrom() (addressFrom string) {
	if tcc != nil {
		addressFrom = tcc.AddressFrom
	}
	return
}

func (tcc *TermsContractConclude) SetAddressFrom(addressFrom string) {
	tcc.AddressFrom = addressFrom
}

func (tcc *TermsContractConclude) GetAddressTo() (addressTo string) {
	if tcc != nil {
		addressTo = tcc.AddressTo
	}
	return
}

func (tcc *TermsContractConclude) SetAddressTo(addressTo string) {
	tcc.AddressTo = addressTo
}

func (tcc *TermsContractConclude) GetEscrowAddress() (escrowAddress string) {
	if tcc != nil {
		escrowAddress = tcc.EscrowAddress
	}
	return
}

func (tcc *TermsContractConclude) SetEscrowAddress(escrowAddress string) {
	tcc.EscrowAddress = escrowAddress
}

func (tcc *TermsContractConclude) GetMemberTypeTo() (memberTypeTo memberdealtypeenum.MemberDealType) {
	if tcc != nil {
		memberTypeTo = tcc.MemberTypeTo
	}
	return
}

func (tcc *TermsContractConclude) SetMemberTypeTo(memberTypeTo memberdealtypeenum.MemberDealType) {
	tcc.MemberTypeTo = memberTypeTo
}

func (tcc *TermsContractConclude) GetTxId() (txId string) {
	if tcc != nil {
		txId = tcc.TxId
	}
	return
}

func (tcc *TermsContractConclude) SetTxId(txId string) {
	tcc.TxId = txId
}

func (tcc *TermsContractConclude) GetIsComplete() (isComplete bool) {
	if tcc != nil {
		isComplete = tcc.IsComplete
	}
	return
}

func (tcc *TermsContractConclude) SetIsComplete(isComplete bool) {
	tcc.IsComplete = isComplete
}

func (tcc *TermsContractConclude) GetIsCompleteByCrossTransfer() (isCompleteByCrossTransfer bool) {
	if tcc != nil {
		isCompleteByCrossTransfer = tcc.IsCompleteByCrossTransfer
	}
	return
}

func (tcc *TermsContractConclude) SetIsCompleteByCrossTransfer(isCompleteByCrossTransfer bool) {
	tcc.IsCompleteByCrossTransfer = isCompleteByCrossTransfer
}

func (tcc *TermsContractConclude) GetIsInvoiceCreate() (isInvoiceCreate bool) {
	if tcc != nil {
		isInvoiceCreate = tcc.IsInvoiceCreate
	}
	return
}

func (tcc *TermsContractConclude) SetIsInvoiceCreate(isInvoiceCreate bool) {
	tcc.IsInvoiceCreate = isInvoiceCreate
}

func (tcc *TermsContractConclude) GetCurrencyInfo() (currencyInfo CurrencyDealInfo) {
	if tcc != nil {
		currencyInfo = tcc.CurrencyInfo
	}
	return
}

func (tcc *TermsContractConclude) SetCurrencyInfo(currencyInfo CurrencyDealInfo) {
	tcc.CurrencyInfo = currencyInfo
}

func (tcc *TermsContractConclude) GetObligatoryAmount() (obligatoryAmount int64) {
	if tcc != nil {
		obligatoryAmount = tcc.ObligatoryAmount
	}
	return
}

func (tcc *TermsContractConclude) SetObligatoryAmount(obligatoryAmount int64) {
	tcc.ObligatoryAmount = obligatoryAmount
}

func (tcc *TermsContractConclude) GetCurrentAmount() (currentAmount int64) {
	if tcc != nil {
		currentAmount = tcc.CurrentAmount
	}
	return
}

func (tcc *TermsContractConclude) SetCurrentAmount(currentAmount int64) {
	tcc.CurrentAmount = currentAmount
}

func (tcc *TermsContractConclude) GetNeedAmount() (needAmount int64) {
	if tcc != nil {
		needAmount = tcc.NeedAmount
	}
	return
}

func (tcc *TermsContractConclude) SetNeedAmount(needAmount int64) {
	tcc.NeedAmount = needAmount
}

func (sbap *SetBalanceAccountParam) GetAddress() (address string) {
	if sbap != nil {
		address = sbap.Address
	}
	return
}

func (sbap *SetBalanceAccountParam) SetAddress(address string) {
	sbap.Address = address
}

func (sbap *SetBalanceAccountParam) GetAddressBank() (addressBank string) {
	if sbap != nil {
		addressBank = sbap.AddressBank
	}
	return
}

func (sbap *SetBalanceAccountParam) SetAddressBank(addressBank string) {
	sbap.AddressBank = addressBank
}

func (sbap *SetBalanceAccountParam) GetValue() (value int64) {
	if sbap != nil {
		value = sbap.Value
	}
	return
}

func (sbap *SetBalanceAccountParam) SetValue(value int64) {
	sbap.Value = value
}

func (sbap *SetBalanceAccountParam) GetOperation() (operation string) {
	if sbap != nil {
		operation = sbap.Operation
	}
	return
}

func (sbap *SetBalanceAccountParam) SetOperation(operation string) {
	sbap.Operation = operation
}

func (sbap *SetBalanceAccountParam) GetTxId() (txId string) {
	if sbap != nil {
		txId = sbap.TxId
	}
	return
}

func (sbap *SetBalanceAccountParam) SetTxId(txId string) {
	sbap.TxId = txId
}

func (sde *SafeDealEvent) GetData() (data DealResponseData) {
	if sde != nil {
		data = sde.Data
	}
	return
}

func (sde *SafeDealEvent) SetData(data DealResponseData) {
	sde.Data = data
}

func (sdd *SafeDealDeposit) GetSafeDealId() (safeDealId string) {
	if sdd != nil {
		safeDealId = sdd.SafeDealId
	}
	return
}

func (sdd *SafeDealDeposit) SetSafeDealId(safeDealId string) {
	sdd.SafeDealId = safeDealId
}

func (sdd *SafeDealDeposit) GetDeposits() (deposits []DepositDetails) {
	if sdd != nil {
		deposits = sdd.Deposits
	}
	return
}

func (sdd *SafeDealDeposit) SetDeposits(deposits []DepositDetails) {
	sdd.Deposits = deposits
}

func (sdd *SafeDealDeposit) GetCurrentBalance() (currentBalance []SetBalanceAccountParam) {
	if sdd != nil {
		currentBalance = sdd.CurrentBalance
	}
	return
}

func (sdd *SafeDealDeposit) SetCurrentBalance(currentBalance []SetBalanceAccountParam) {
	sdd.CurrentBalance = currentBalance
}

func (sdd *SafeDealDeposit) GetForCompleteBalance() (forCompleteBalance []SetBalanceAccountParam) {
	if sdd != nil {
		forCompleteBalance = sdd.ForCompleteBalance
	}
	return
}

func (sdd *SafeDealDeposit) SetForCompleteBalance(forCompleteBalance []SetBalanceAccountParam) {
	sdd.ForCompleteBalance = forCompleteBalance
}

func (sdd *SafeDealDeposit) GetAddressTo() (addressTo string) {
	if sdd != nil {
		addressTo = sdd.AddressTo
	}
	return
}

func (sdd *SafeDealDeposit) SetAddressTo(addressTo string) {
	sdd.AddressTo = addressTo
}

func (sdd *SafeDealDeposit) GetCurrencyInfo() (currencyInfo CurrencyDealInfo) {
	if sdd != nil {
		currencyInfo = sdd.CurrencyInfo
	}
	return
}

func (sdd *SafeDealDeposit) SetCurrencyInfo(currencyInfo CurrencyDealInfo) {
	sdd.CurrencyInfo = currencyInfo
}

func (sdd *SafeDealDeposit) GetIsComplete() (isComplete bool) {
	if sdd != nil {
		isComplete = sdd.IsComplete
	}
	return
}

func (sdd *SafeDealDeposit) SetIsComplete(isComplete bool) {
	sdd.IsComplete = isComplete
}

func (sdd *SafeDealDeposit) GetCurrentAmount() (currentAmount int64) {
	if sdd != nil {
		currentAmount = sdd.CurrentAmount
	}
	return
}

func (sdd *SafeDealDeposit) SetCurrentAmount(currentAmount int64) {
	sdd.CurrentAmount = currentAmount
}

func (sdd *SafeDealDeposit) GetNeedAmount() (needAmount int64) {
	if sdd != nil {
		needAmount = sdd.NeedAmount
	}
	return
}

func (sdd *SafeDealDeposit) SetNeedAmount(needAmount int64) {
	sdd.NeedAmount = needAmount
}

func (p *Participant) GetAddress() (address string) {
	if p != nil {
		address = p.Address
	}
	return
}

func (p *Participant) SetAddress(address string) {
	p.Address = address
}

func (p *Participant) GetCurrencyInfo() (currencyInfo CurrencyDealInfo) {
	if p != nil {
		currencyInfo = p.CurrencyInfo
	}
	return
}

func (p *Participant) SetCurrencyInfo(currencyInfo CurrencyDealInfo) {
	p.CurrencyInfo = currencyInfo
}

func (p *Participant) GetMemberType() (memberType memberdealtypeenum.MemberDealType) {
	if p != nil {
		memberType = p.MemberType
	}
	return
}

func (p *Participant) SetMemberType(memberType memberdealtypeenum.MemberDealType) {
	p.MemberType = memberType
}

func (p *Participant) GetCreated() (created int64) {
	if p != nil {
		created = p.Created
	}
	return
}

func (p *Participant) SetCreated(created int64) {
	p.Created = created
}

func (p *Participant) GetWasInvited() (wasInvited bool) {
	if p != nil {
		wasInvited = p.WasInvited
	}
	return
}

func (p *Participant) SetWasInvited(wasInvited bool) {
	p.WasInvited = wasInvited
}

func (p *Participant) GetTransferStatus() (transferStatus dealtransferstatusenum.DealTransferStatus) {
	if p != nil {
		transferStatus = p.TransferStatus
	}
	return
}

func (p *Participant) SetTransferStatus(transferStatus dealtransferstatusenum.DealTransferStatus) {
	p.TransferStatus = transferStatus
}

func (la *LimitsAccount) GetDaily() (daily int64) {
	if la != nil {
		daily = la.Daily
	}
	return
}

func (la *LimitsAccount) SetDaily(daily int64) {
	la.Daily = daily
}

func (la *LimitsAccount) GetMonthly() (monthly int64) {
	if la != nil {
		monthly = la.Monthly
	}
	return
}

func (la *LimitsAccount) SetMonthly(monthly int64) {
	la.Monthly = monthly
}

func (ie *InvoiceEvent) GetData() (data Invoice) {
	if ie != nil {
		data = ie.Data
	}
	return
}

func (ie *InvoiceEvent) SetData(data Invoice) {
	ie.Data = data
}

func (i *Invoice) GetNumber() (number string) {
	if i != nil {
		number = i.Number
	}
	return
}

func (i *Invoice) SetNumber(number string) {
	i.Number = number
}

func (i *Invoice) GetCurrencyCode() (currencyCode int) {
	if i != nil {
		currencyCode = i.CurrencyCode
	}
	return
}

func (i *Invoice) SetCurrencyCode(currencyCode int) {
	i.CurrencyCode = currencyCode
}

func (i *Invoice) GetAmount() (amount int64) {
	if i != nil {
		amount = i.Amount
	}
	return
}

func (i *Invoice) SetAmount(amount int64) {
	i.Amount = amount
}

func (i *Invoice) GetDescription() (description string) {
	if i != nil {
		description = i.Description
	}
	return
}

func (i *Invoice) SetDescription(description string) {
	i.Description = description
}

func (i *Invoice) GetRecipient() (recipient string) {
	if i != nil {
		recipient = i.Recipient
	}
	return
}

func (i *Invoice) SetRecipient(recipient string) {
	i.Recipient = recipient
}

func (i *Invoice) GetPayer() (payer string) {
	if i != nil {
		payer = i.Payer
	}
	return
}

func (i *Invoice) SetPayer(payer string) {
	i.Payer = payer
}

func (i *Invoice) GetState() (state invoicestateenum.InvoiceState) {
	if i != nil {
		state = i.State
	}
	return
}

func (i *Invoice) SetState(state invoicestateenum.InvoiceState) {
	i.State = state
}

func (i *Invoice) GetCreated() (created int64) {
	if i != nil {
		created = i.Created
	}
	return
}

func (i *Invoice) SetCreated(created int64) {
	i.Created = created
}

func (i *Invoice) GetUpdated() (updated int64) {
	if i != nil {
		updated = i.Updated
	}
	return
}

func (i *Invoice) SetUpdated(updated int64) {
	i.Updated = updated
}

func (i *Invoice) GetErrorCode() (errorCode int) {
	if i != nil {
		errorCode = i.ErrorCode
	}
	return
}

func (i *Invoice) SetErrorCode(errorCode int) {
	i.ErrorCode = errorCode
}

func (i *Invoice) GetOwner() (owner string) {
	if i != nil {
		owner = i.Owner
	}
	return
}

func (i *Invoice) SetOwner(owner string) {
	i.Owner = owner
}

func (i *Invoice) GetDocType() (docType string) {
	if i != nil {
		docType = i.DocType
	}
	return
}

func (i *Invoice) SetDocType(docType string) {
	i.DocType = docType
}

func (i *Invitation) GetAddressFrom() (addressFrom string) {
	if i != nil {
		addressFrom = i.AddressFrom
	}
	return
}

func (i *Invitation) SetAddressFrom(addressFrom string) {
	i.AddressFrom = addressFrom
}

func (i *Invitation) GetInviteAddress() (inviteAddress string) {
	if i != nil {
		inviteAddress = i.InviteAddress
	}
	return
}

func (i *Invitation) SetInviteAddress(inviteAddress string) {
	i.InviteAddress = inviteAddress
}

func (i *Invitation) GetInviteCurrencyInfo() (inviteCurrencyInfo CurrencyDealInfo) {
	if i != nil {
		inviteCurrencyInfo = i.InviteCurrencyInfo
	}
	return
}

func (i *Invitation) SetInviteCurrencyInfo(inviteCurrencyInfo CurrencyDealInfo) {
	i.InviteCurrencyInfo = inviteCurrencyInfo
}

func (i *Invitation) GetCreated() (created int64) {
	if i != nil {
		created = i.Created
	}
	return
}

func (i *Invitation) SetCreated(created int64) {
	i.Created = created
}

func (i *Invitation) GetInviteStatus() (inviteStatus invitestatusenum.InviteStatus) {
	if i != nil {
		inviteStatus = i.InviteStatus
	}
	return
}

func (i *Invitation) SetInviteStatus(inviteStatus invitestatusenum.InviteStatus) {
	i.InviteStatus = inviteStatus
}

func (i *Invitation) GetMemberType() (memberType memberdealtypeenum.MemberDealType) {
	if i != nil {
		memberType = i.MemberType
	}
	return
}

func (i *Invitation) SetMemberType(memberType memberdealtypeenum.MemberDealType) {
	i.MemberType = memberType
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) GetFrom() (from string) {
	if etceci != nil {
		from = etceci.From
	}
	return
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) SetFrom(from string) {
	etceci.From = from
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) GetTo() (to string) {
	if etceci != nil {
		to = etceci.To
	}
	return
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) SetTo(to string) {
	etceci.To = to
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) GetCurrencyCode() (currencyCode int) {
	if etceci != nil {
		currencyCode = etceci.CurrencyCode
	}
	return
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) SetCurrencyCode(currencyCode int) {
	etceci.CurrencyCode = currencyCode
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) GetAmount() (amount int64) {
	if etceci != nil {
		amount = etceci.Amount
	}
	return
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) SetAmount(amount int64) {
	etceci.Amount = amount
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) GetInvoiceNumber() (invoiceNumber string) {
	if etceci != nil {
		invoiceNumber = etceci.InvoiceNumber
	}
	return
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) SetInvoiceNumber(invoiceNumber string) {
	etceci.InvoiceNumber = invoiceNumber
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) GetPayload() (payload crosstransactionpayloadenum.CrossTransactionPayload) {
	if etceci != nil {
		payload = etceci.Payload
	}
	return
}

func (etceci *ExecutedTransactionCurrencyExchangeContractItem) SetPayload(payload crosstransactionpayloadenum.CrossTransactionPayload) {
	etceci.Payload = payload
}

func (ebi *EventBatchItem) GetEventName() (eventName string) {
	if ebi != nil {
		eventName = ebi.EventName
	}
	return
}

func (ebi *EventBatchItem) SetEventName(eventName string) {
	ebi.EventName = eventName
}

func (eb *EventBatch) GetEvents() (events []EventBatchItem) {
	if eb != nil {
		events = eb.Events
	}
	return
}

func (eb *EventBatch) SetEvents(events []EventBatchItem) {
	eb.Events = events
}

func (db *DepositedBalance) GetIssueBankAddress() (issueBankAddress string) {
	if db != nil {
		issueBankAddress = db.IssueBankAddress
	}
	return
}

func (db *DepositedBalance) SetIssueBankAddress(issueBankAddress string) {
	db.IssueBankAddress = issueBankAddress
}

func (dsdh *DepositSafeDealHistory) GetAddressFrom() (addressFrom string) {
	if dsdh != nil {
		addressFrom = dsdh.AddressFrom
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetAddressFrom(addressFrom string) {
	dsdh.AddressFrom = addressFrom
}

func (dsdh *DepositSafeDealHistory) GetAddressTo() (addressTo string) {
	if dsdh != nil {
		addressTo = dsdh.AddressTo
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetAddressTo(addressTo string) {
	dsdh.AddressTo = addressTo
}

func (dsdh *DepositSafeDealHistory) GetCurrencyInfo() (currencyInfo CurrencyDealInfo) {
	if dsdh != nil {
		currencyInfo = dsdh.CurrencyInfo
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetCurrencyInfo(currencyInfo CurrencyDealInfo) {
	dsdh.CurrencyInfo = currencyInfo
}

func (dsdh *DepositSafeDealHistory) GetAmount() (amount int64) {
	if dsdh != nil {
		amount = dsdh.Amount
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetAmount(amount int64) {
	dsdh.Amount = amount
}

func (dsdh *DepositSafeDealHistory) GetType() (_type safedealdeposittypeenum.SafeDealDepositType) {
	if dsdh != nil {
		_type = dsdh.Type
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetType(_type safedealdeposittypeenum.SafeDealDepositType) {
	dsdh.Type = _type
}

func (dsdh *DepositSafeDealHistory) GetTxID() (txID string) {
	if dsdh != nil {
		txID = dsdh.TxID
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetTxID(txID string) {
	dsdh.TxID = txID
}

func (dsdh *DepositSafeDealHistory) GetTimestamp() (timestamp int64) {
	if dsdh != nil {
		timestamp = dsdh.Timestamp
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetTimestamp(timestamp int64) {
	dsdh.Timestamp = timestamp
}

func (dsdh *DepositSafeDealHistory) GetOrdinalNumber() (ordinalNumber int) {
	if dsdh != nil {
		ordinalNumber = dsdh.OrdinalNumber
	}
	return
}

func (dsdh *DepositSafeDealHistory) SetOrdinalNumber(ordinalNumber int) {
	dsdh.OrdinalNumber = ordinalNumber
}

func (dd *DepositDetails) GetAddressFrom() (addressFrom string) {
	if dd != nil {
		addressFrom = dd.AddressFrom
	}
	return
}

func (dd *DepositDetails) SetAddressFrom(addressFrom string) {
	dd.AddressFrom = addressFrom
}

func (dd *DepositDetails) GetAmount() (amount int64) {
	if dd != nil {
		amount = dd.Amount
	}
	return
}

func (dd *DepositDetails) SetAmount(amount int64) {
	dd.Amount = amount
}

func (dd *DepositDetails) GetTxID() (txID string) {
	if dd != nil {
		txID = dd.TxID
	}
	return
}

func (dd *DepositDetails) SetTxID(txID string) {
	dd.TxID = txID
}

func (drd *DealResponseData) GetId() (id string) {
	if drd != nil {
		id = drd.Id
	}
	return
}

func (drd *DealResponseData) SetId(id string) {
	drd.Id = id
}

func (drd *DealResponseData) GetOfferId() (offerId string) {
	if drd != nil {
		offerId = drd.OfferId
	}
	return
}

func (drd *DealResponseData) SetOfferId(offerId string) {
	drd.OfferId = offerId
}

func (drd *DealResponseData) GetOwner() (owner string) {
	if drd != nil {
		owner = drd.Owner
	}
	return
}

func (drd *DealResponseData) SetOwner(owner string) {
	drd.Owner = owner
}

func (drd *DealResponseData) GetState() (state dealstateenum.DealState) {
	if drd != nil {
		state = drd.State
	}
	return
}

func (drd *DealResponseData) SetState(state dealstateenum.DealState) {
	drd.State = state
}

func (drd *DealResponseData) GetTerms() (terms TermsDeal) {
	if drd != nil {
		terms = drd.Terms
	}
	return
}

func (drd *DealResponseData) SetTerms(terms TermsDeal) {
	drd.Terms = terms
}

func (drd *DealResponseData) GetActualTerms() (actualTerms TermsDeal) {
	if drd != nil {
		actualTerms = drd.ActualTerms
	}
	return
}

func (drd *DealResponseData) SetActualTerms(actualTerms TermsDeal) {
	drd.ActualTerms = actualTerms
}

func (drd *DealResponseData) GetInvitations() (invitations []Invitation) {
	if drd != nil {
		invitations = drd.Invitations
	}
	return
}

func (drd *DealResponseData) SetInvitations(invitations []Invitation) {
	drd.Invitations = invitations
}

func (drd *DealResponseData) GetParticipants() (participants []Participant) {
	if drd != nil {
		participants = drd.Participants
	}
	return
}

func (drd *DealResponseData) SetParticipants(participants []Participant) {
	drd.Participants = participants
}

func (drd *DealResponseData) GetTermsContractConclude() (termsContractConclude []TermsContractConclude) {
	if drd != nil {
		termsContractConclude = drd.TermsContractConclude
	}
	return
}

func (drd *DealResponseData) SetTermsContractConclude(termsContractConclude []TermsContractConclude) {
	drd.TermsContractConclude = termsContractConclude
}

func (drd *DealResponseData) GetNecessaryTransfers() (necessaryTransfers []TransferSafeDeal) {
	if drd != nil {
		necessaryTransfers = drd.NecessaryTransfers
	}
	return
}

func (drd *DealResponseData) SetNecessaryTransfers(necessaryTransfers []TransferSafeDeal) {
	drd.NecessaryTransfers = necessaryTransfers
}

func (drd *DealResponseData) GetDepositHistory() (depositHistory []DepositSafeDealHistory) {
	if drd != nil {
		depositHistory = drd.DepositHistory
	}
	return
}

func (drd *DealResponseData) SetDepositHistory(depositHistory []DepositSafeDealHistory) {
	drd.DepositHistory = depositHistory
}

func (d *Deal) GetId() (id string) {
	if d != nil {
		id = d.Id
	}
	return
}

func (d *Deal) SetId(id string) {
	d.Id = id
}

func (d *Deal) GetOfferId() (offerId string) {
	if d != nil {
		offerId = d.OfferId
	}
	return
}

func (d *Deal) SetOfferId(offerId string) {
	d.OfferId = offerId
}

func (d *Deal) GetSenderBank() (senderBank string) {
	if d != nil {
		senderBank = d.SenderBank
	}
	return
}

func (d *Deal) SetSenderBank(senderBank string) {
	d.SenderBank = senderBank
}

func (d *Deal) GetOwner() (owner string) {
	if d != nil {
		owner = d.Owner
	}
	return
}

func (d *Deal) SetOwner(owner string) {
	d.Owner = owner
}

func (d *Deal) GetState() (state dealstateenum.DealState) {
	if d != nil {
		state = d.State
	}
	return
}

func (d *Deal) SetState(state dealstateenum.DealState) {
	d.State = state
}

func (d *Deal) GetTerms() (terms TermsDeal) {
	if d != nil {
		terms = d.Terms
	}
	return
}

func (d *Deal) SetTerms(terms TermsDeal) {
	d.Terms = terms
}

func (d *Deal) GetActualTerms() (actualTerms TermsDeal) {
	if d != nil {
		actualTerms = d.ActualTerms
	}
	return
}

func (d *Deal) SetActualTerms(actualTerms TermsDeal) {
	d.ActualTerms = actualTerms
}

func (d *Deal) GetDepositHistory() (depositHistory []DepositSafeDealHistory) {
	if d != nil {
		depositHistory = d.DepositHistory
	}
	return
}

func (d *Deal) SetDepositHistory(depositHistory []DepositSafeDealHistory) {
	d.DepositHistory = depositHistory
}

func (cr *CustomerRing) GetNext() (next *CustomerRing) {
	if cr != nil {
		next = cr.next
	}
	return
}

func (cr *CustomerRing) SetNext(next *CustomerRing) {
	cr.next = next
}

func (cr *CustomerRing) GetPrev() (prev *CustomerRing) {
	if cr != nil {
		prev = cr.prev
	}
	return
}

func (cr *CustomerRing) SetPrev(prev *CustomerRing) {
	cr.prev = prev
}

func (cr *CustomerRing) GetValue() (value Customer) {
	if cr != nil {
		value = cr.Value
	}
	return
}

func (cr *CustomerRing) SetValue(value Customer) {
	cr.Value = value
}

func (cl *CustomerList) GetRoot() (root CustomerElement) {
	if cl != nil {
		root = cl.root
	}
	return
}

func (cl *CustomerList) SetRoot(root CustomerElement) {
	cl.root = root
}

func (cl *CustomerList) GetLen() (_len int) {
	if cl != nil {
		_len = cl.len
	}
	return
}

func (cl *CustomerList) SetLen(_len int) {
	cl.len = _len
}

func (ce *CustomerEvent) GetData() (data Customer) {
	if ce != nil {
		data = ce.Data
	}
	return
}

func (ce *CustomerEvent) SetData(data Customer) {
	ce.Data = data
}

func (ce *CustomerElement) GetNext() (next *CustomerElement) {
	if ce != nil {
		next = ce.next
	}
	return
}

func (ce *CustomerElement) SetNext(next *CustomerElement) {
	ce.next = next
}

func (ce *CustomerElement) GetPrev() (prev *CustomerElement) {
	if ce != nil {
		prev = ce.prev
	}
	return
}

func (ce *CustomerElement) SetPrev(prev *CustomerElement) {
	ce.prev = prev
}

func (ce *CustomerElement) GetList() (list *CustomerList) {
	if ce != nil {
		list = ce.list
	}
	return
}

func (ce *CustomerElement) SetList(list *CustomerList) {
	ce.list = list
}

func (ce *CustomerElement) GetValue() (value Customer) {
	if ce != nil {
		value = ce.Value
	}
	return
}

func (ce *CustomerElement) SetValue(value Customer) {
	ce.Value = value
}

func (c *Customer) GetIdentifier() (identifier string) {
	if c != nil {
		identifier = c.Identifier
	}
	return
}

func (c *Customer) SetIdentifier(identifier string) {
	c.Identifier = identifier
}

func (c *Customer) GetBankAddress() (bankAddress string) {
	if c != nil {
		bankAddress = c.BankAddress
	}
	return
}

func (c *Customer) SetBankAddress(bankAddress string) {
	c.BankAddress = bankAddress
}

func (c *Customer) GetBankDisplayName() (bankDisplayName string) {
	if c != nil {
		bankDisplayName = c.BankDisplayName
	}
	return
}

func (c *Customer) SetBankDisplayName(bankDisplayName string) {
	c.BankDisplayName = bankDisplayName
}

func (c *Customer) GetCountryCode() (countryCode string) {
	if c != nil {
		countryCode = c.CountryCode
	}
	return
}

func (c *Customer) SetCountryCode(countryCode string) {
	c.CountryCode = countryCode
}

func (c *Customer) GetCustomerDisplayName() (customerDisplayName string) {
	if c != nil {
		customerDisplayName = c.CustomerDisplayName
	}
	return
}

func (c *Customer) SetCustomerDisplayName(customerDisplayName string) {
	c.CustomerDisplayName = customerDisplayName
}

func (c *Customer) GetDocType() (docType string) {
	if c != nil {
		docType = c.DocType
	}
	return
}

func (c *Customer) SetDocType(docType string) {
	c.DocType = docType
}

func (ci *CurrencyInfo) GetCode() (code int) {
	if ci != nil {
		code = ci.Code
	}
	return
}

func (ci *CurrencyInfo) SetCode(code int) {
	ci.Code = code
}

func (ci *CurrencyInfo) GetSymbol() (symbol string) {
	if ci != nil {
		symbol = ci.Symbol
	}
	return
}

func (ci *CurrencyInfo) SetSymbol(symbol string) {
	ci.Symbol = symbol
}

func (ci *CurrencyInfo) GetUnit() (unit string) {
	if ci != nil {
		unit = ci.Unit
	}
	return
}

func (ci *CurrencyInfo) SetUnit(unit string) {
	ci.Unit = unit
}

func (cecr *CurrencyExchangeContractRing) GetNext() (next *CurrencyExchangeContractRing) {
	if cecr != nil {
		next = cecr.next
	}
	return
}

func (cecr *CurrencyExchangeContractRing) SetNext(next *CurrencyExchangeContractRing) {
	cecr.next = next
}

func (cecr *CurrencyExchangeContractRing) GetPrev() (prev *CurrencyExchangeContractRing) {
	if cecr != nil {
		prev = cecr.prev
	}
	return
}

func (cecr *CurrencyExchangeContractRing) SetPrev(prev *CurrencyExchangeContractRing) {
	cecr.prev = prev
}

func (cecr *CurrencyExchangeContractRing) GetValue() (value *CurrencyExchangeContract) {
	if cecr != nil {
		value = cecr.Value
	}
	return
}

func (cecr *CurrencyExchangeContractRing) SetValue(value *CurrencyExchangeContract) {
	cecr.Value = value
}

func (cecm *CurrencyExchangeContractMutable) GetId() (id string) {
	if cecm != nil {
		id = cecm.Id
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetId(id string) {
	cecm.Id = id
}

func (cecm *CurrencyExchangeContractMutable) GetAddressAccountSell() (addressAccountSell string) {
	if cecm != nil {
		addressAccountSell = cecm.AddressAccountSell
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetAddressAccountSell(addressAccountSell string) {
	cecm.AddressAccountSell = addressAccountSell
}

func (cecm *CurrencyExchangeContractMutable) GetAddressAccountBuy() (addressAccountBuy string) {
	if cecm != nil {
		addressAccountBuy = cecm.AddressAccountBuy
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetAddressAccountBuy(addressAccountBuy string) {
	cecm.AddressAccountBuy = addressAccountBuy
}

func (cecm *CurrencyExchangeContractMutable) GetAddressCommission() (addressCommission string) {
	if cecm != nil {
		addressCommission = cecm.AddressCommission
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetAddressCommission(addressCommission string) {
	cecm.AddressCommission = addressCommission
}

func (cecm *CurrencyExchangeContractMutable) GetCurrencyInfoSell() (currencyInfoSell CurrencyInfo) {
	if cecm != nil {
		currencyInfoSell = cecm.CurrencyInfoSell
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetCurrencyInfoSell(currencyInfoSell CurrencyInfo) {
	cecm.CurrencyInfoSell = currencyInfoSell
}

func (cecm *CurrencyExchangeContractMutable) GetCurrencyInfoBuy() (currencyInfoBuy CurrencyInfo) {
	if cecm != nil {
		currencyInfoBuy = cecm.CurrencyInfoBuy
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetCurrencyInfoBuy(currencyInfoBuy CurrencyInfo) {
	cecm.CurrencyInfoBuy = currencyInfoBuy
}

func (cecm *CurrencyExchangeContractMutable) GetCategory() (category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	if cecm != nil {
		category = cecm.Category
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetCategory(category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	cecm.Category = category
}

func (cecm *CurrencyExchangeContractMutable) GetType() (_type currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	if cecm != nil {
		_type = cecm.Type
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetType(_type currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	cecm.Type = _type
}

func (cecm *CurrencyExchangeContractMutable) GetPrice() (price float64) {
	if cecm != nil {
		price = cecm.Price
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetPrice(price float64) {
	cecm.Price = price
}

func (cecm *CurrencyExchangeContractMutable) GetFractionalCommission() (fractionalCommission float64) {
	if cecm != nil {
		fractionalCommission = cecm.FractionalCommission
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetFractionalCommission(fractionalCommission float64) {
	cecm.FractionalCommission = fractionalCommission
}

func (cecm *CurrencyExchangeContractMutable) GetMaxCommission() (maxCommission int64) {
	if cecm != nil {
		maxCommission = cecm.MaxCommission
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetMaxCommission(maxCommission int64) {
	cecm.MaxCommission = maxCommission
}

func (cecm *CurrencyExchangeContractMutable) GetMinAmount() (minAmount int64) {
	if cecm != nil {
		minAmount = cecm.MinAmount
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetMinAmount(minAmount int64) {
	cecm.MinAmount = minAmount
}

func (cecm *CurrencyExchangeContractMutable) GetMaxAmount() (maxAmount int64) {
	if cecm != nil {
		maxAmount = cecm.MaxAmount
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetMaxAmount(maxAmount int64) {
	cecm.MaxAmount = maxAmount
}

func (cecm *CurrencyExchangeContractMutable) GetStartDate() (startDate int64) {
	if cecm != nil {
		startDate = cecm.StartDate
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetStartDate(startDate int64) {
	cecm.StartDate = startDate
}

func (cecm *CurrencyExchangeContractMutable) GetEndDate() (endDate int64) {
	if cecm != nil {
		endDate = cecm.EndDate
	}
	return
}

func (cecm *CurrencyExchangeContractMutable) SetEndDate(endDate int64) {
	cecm.EndDate = endDate
}

func (cecl *CurrencyExchangeContractList) GetRoot() (root CurrencyExchangeContractElement) {
	if cecl != nil {
		root = cecl.root
	}
	return
}

func (cecl *CurrencyExchangeContractList) SetRoot(root CurrencyExchangeContractElement) {
	cecl.root = root
}

func (cecl *CurrencyExchangeContractList) GetLen() (_len int) {
	if cecl != nil {
		_len = cecl.len
	}
	return
}

func (cecl *CurrencyExchangeContractList) SetLen(_len int) {
	cecl.len = _len
}

func (cece *CurrencyExchangeContractElement) GetNext() (next *CurrencyExchangeContractElement) {
	if cece != nil {
		next = cece.next
	}
	return
}

func (cece *CurrencyExchangeContractElement) SetNext(next *CurrencyExchangeContractElement) {
	cece.next = next
}

func (cece *CurrencyExchangeContractElement) GetPrev() (prev *CurrencyExchangeContractElement) {
	if cece != nil {
		prev = cece.prev
	}
	return
}

func (cece *CurrencyExchangeContractElement) SetPrev(prev *CurrencyExchangeContractElement) {
	cece.prev = prev
}

func (cece *CurrencyExchangeContractElement) GetList() (list *CurrencyExchangeContractList) {
	if cece != nil {
		list = cece.list
	}
	return
}

func (cece *CurrencyExchangeContractElement) SetList(list *CurrencyExchangeContractList) {
	cece.list = list
}

func (cece *CurrencyExchangeContractElement) GetValue() (value *CurrencyExchangeContract) {
	if cece != nil {
		value = cece.Value
	}
	return
}

func (cece *CurrencyExchangeContractElement) SetValue(value *CurrencyExchangeContract) {
	cece.Value = value
}

func (cec *CurrencyExchangeContract) GetBankAddress() (bankAddress string) {
	if cec != nil {
		bankAddress = cec.BankAddress
	}
	return
}

func (cec *CurrencyExchangeContract) SetBankAddress(bankAddress string) {
	cec.BankAddress = bankAddress
}

func (cec *CurrencyExchangeContract) GetBankDisplayName() (bankDisplayName string) {
	if cec != nil {
		bankDisplayName = cec.BankDisplayName
	}
	return
}

func (cec *CurrencyExchangeContract) SetBankDisplayName(bankDisplayName string) {
	cec.BankDisplayName = bankDisplayName
}

func (cec *CurrencyExchangeContract) GetDocType() (docType string) {
	if cec != nil {
		docType = cec.DocType
	}
	return
}

func (cec *CurrencyExchangeContract) SetDocType(docType string) {
	cec.DocType = docType
}

func (ce *CurrencyEvent) GetData() (data Currency) {
	if ce != nil {
		data = ce.Data
	}
	return
}

func (ce *CurrencyEvent) SetData(data Currency) {
	ce.Data = data
}

func (cdi *CurrencyDealInfo) GetCode() (code int) {
	if cdi != nil {
		code = cdi.Code
	}
	return
}

func (cdi *CurrencyDealInfo) SetCode(code int) {
	cdi.Code = code
}

func (cdi *CurrencyDealInfo) GetName() (name string) {
	if cdi != nil {
		name = cdi.Name
	}
	return
}

func (cdi *CurrencyDealInfo) SetName(name string) {
	cdi.Name = name
}

func (cdi *CurrencyDealInfo) GetUnit() (unit string) {
	if cdi != nil {
		unit = cdi.Unit
	}
	return
}

func (cdi *CurrencyDealInfo) SetUnit(unit string) {
	cdi.Unit = unit
}

func (ccrir *CurrencyContractRoutingItemRing) GetNext() (next *CurrencyContractRoutingItemRing) {
	if ccrir != nil {
		next = ccrir.next
	}
	return
}

func (ccrir *CurrencyContractRoutingItemRing) SetNext(next *CurrencyContractRoutingItemRing) {
	ccrir.next = next
}

func (ccrir *CurrencyContractRoutingItemRing) GetPrev() (prev *CurrencyContractRoutingItemRing) {
	if ccrir != nil {
		prev = ccrir.prev
	}
	return
}

func (ccrir *CurrencyContractRoutingItemRing) SetPrev(prev *CurrencyContractRoutingItemRing) {
	ccrir.prev = prev
}

func (ccrir *CurrencyContractRoutingItemRing) GetValue() (value *CurrencyContractRoutingItem) {
	if ccrir != nil {
		value = ccrir.Value
	}
	return
}

func (ccrir *CurrencyContractRoutingItemRing) SetValue(value *CurrencyContractRoutingItem) {
	ccrir.Value = value
}

func (ccril *CurrencyContractRoutingItemList) GetRoot() (root CurrencyContractRoutingItemElement) {
	if ccril != nil {
		root = ccril.root
	}
	return
}

func (ccril *CurrencyContractRoutingItemList) SetRoot(root CurrencyContractRoutingItemElement) {
	ccril.root = root
}

func (ccril *CurrencyContractRoutingItemList) GetLen() (_len int) {
	if ccril != nil {
		_len = ccril.len
	}
	return
}

func (ccril *CurrencyContractRoutingItemList) SetLen(_len int) {
	ccril.len = _len
}

func (ccrie *CurrencyContractRoutingItemElement) GetNext() (next *CurrencyContractRoutingItemElement) {
	if ccrie != nil {
		next = ccrie.next
	}
	return
}

func (ccrie *CurrencyContractRoutingItemElement) SetNext(next *CurrencyContractRoutingItemElement) {
	ccrie.next = next
}

func (ccrie *CurrencyContractRoutingItemElement) GetPrev() (prev *CurrencyContractRoutingItemElement) {
	if ccrie != nil {
		prev = ccrie.prev
	}
	return
}

func (ccrie *CurrencyContractRoutingItemElement) SetPrev(prev *CurrencyContractRoutingItemElement) {
	ccrie.prev = prev
}

func (ccrie *CurrencyContractRoutingItemElement) GetList() (list *CurrencyContractRoutingItemList) {
	if ccrie != nil {
		list = ccrie.list
	}
	return
}

func (ccrie *CurrencyContractRoutingItemElement) SetList(list *CurrencyContractRoutingItemList) {
	ccrie.list = list
}

func (ccrie *CurrencyContractRoutingItemElement) GetValue() (value *CurrencyContractRoutingItem) {
	if ccrie != nil {
		value = ccrie.Value
	}
	return
}

func (ccrie *CurrencyContractRoutingItemElement) SetValue(value *CurrencyContractRoutingItem) {
	ccrie.Value = value
}

func (ccri *CurrencyContractRoutingItem) GetAmountInput() (amountInput int64) {
	if ccri != nil {
		amountInput = ccri.AmountInput
	}
	return
}

func (ccri *CurrencyContractRoutingItem) SetAmountInput(amountInput int64) {
	ccri.AmountInput = amountInput
}

func (ccri *CurrencyContractRoutingItem) GetAmountOutput() (amountOutput int64) {
	if ccri != nil {
		amountOutput = ccri.AmountOutput
	}
	return
}

func (ccri *CurrencyContractRoutingItem) SetAmountOutput(amountOutput int64) {
	ccri.AmountOutput = amountOutput
}

func (c *Currency) GetCode() (code int) {
	if c != nil {
		code = c.Code
	}
	return
}

func (c *Currency) SetCode(code int) {
	c.Code = code
}

func (c *Currency) GetName() (name string) {
	if c != nil {
		name = c.Name
	}
	return
}

func (c *Currency) SetName(name string) {
	c.Name = name
}

func (c *Currency) GetType() (_type currencytypeenum.CurrencyType) {
	if c != nil {
		_type = c.Type
	}
	return
}

func (c *Currency) SetType(_type currencytypeenum.CurrencyType) {
	c.Type = _type
}

func (c *Currency) GetUnit() (unit string) {
	if c != nil {
		unit = c.Unit
	}
	return
}

func (c *Currency) SetUnit(unit string) {
	c.Unit = unit
}

func (c *Currency) GetSymbol() (symbol string) {
	if c != nil {
		symbol = c.Symbol
	}
	return
}

func (c *Currency) SetSymbol(symbol string) {
	c.Symbol = symbol
}

func (c *Currency) GetDecimals() (decimals int) {
	if c != nil {
		decimals = c.Decimals
	}
	return
}

func (c *Currency) SetDecimals(decimals int) {
	c.Decimals = decimals
}

func (c *Currency) GetEnabled() (enabled bool) {
	if c != nil {
		enabled = c.Enabled
	}
	return
}

func (c *Currency) SetEnabled(enabled bool) {
	c.Enabled = enabled
}

func (c *Currency) GetDocType() (docType string) {
	if c != nil {
		docType = c.DocType
	}
	return
}

func (c *Currency) SetDocType(docType string) {
	c.DocType = docType
}

func (cthe *CrossTransactionHistoryEvent) GetData() (data CrossTransactionHistory) {
	if cthe != nil {
		data = cthe.Data
	}
	return
}

func (cthe *CrossTransactionHistoryEvent) SetData(data CrossTransactionHistory) {
	cthe.Data = data
}

func (cth *CrossTransactionHistory) GetRoutes() (routes []CurrencyContractRoutingItem) {
	if cth != nil {
		routes = cth.Routes
	}
	return
}

func (cth *CrossTransactionHistory) SetRoutes(routes []CurrencyContractRoutingItem) {
	cth.Routes = routes
}

func (cth *CrossTransactionHistory) GetAddressFrom() (addressFrom string) {
	if cth != nil {
		addressFrom = cth.AddressFrom
	}
	return
}

func (cth *CrossTransactionHistory) SetAddressFrom(addressFrom string) {
	cth.AddressFrom = addressFrom
}

func (cth *CrossTransactionHistory) GetTimestamp() (timestamp int64) {
	if cth != nil {
		timestamp = cth.Timestamp
	}
	return
}

func (cth *CrossTransactionHistory) SetTimestamp(timestamp int64) {
	cth.Timestamp = timestamp
}

func (cth *CrossTransactionHistory) GetTransactionId() (transactionId string) {
	if cth != nil {
		transactionId = cth.TransactionId
	}
	return
}

func (cth *CrossTransactionHistory) SetTransactionId(transactionId string) {
	cth.TransactionId = transactionId
}

func (cth *CrossTransactionHistory) GetAmount() (amount int64) {
	if cth != nil {
		amount = cth.Amount
	}
	return
}

func (cth *CrossTransactionHistory) SetAmount(amount int64) {
	cth.Amount = amount
}

func (cth *CrossTransactionHistory) GetPayload() (payload string) {
	if cth != nil {
		payload = cth.Payload
	}
	return
}

func (cth *CrossTransactionHistory) SetPayload(payload string) {
	cth.Payload = payload
}

func (cth *CrossTransactionHistory) GetTo() (to string) {
	if cth != nil {
		to = cth.To
	}
	return
}

func (cth *CrossTransactionHistory) SetTo(to string) {
	cth.To = to
}

func (cth *CrossTransactionHistory) GetEncryptedSecretKeys() (encryptedSecretKeys []AccountSecretKey) {
	if cth != nil {
		encryptedSecretKeys = cth.EncryptedSecretKeys
	}
	return
}

func (cth *CrossTransactionHistory) SetEncryptedSecretKeys(encryptedSecretKeys []AccountSecretKey) {
	cth.EncryptedSecretKeys = encryptedSecretKeys
}

func (cth *CrossTransactionHistory) GetCurrencyCodeFrom() (currencyCodeFrom int) {
	if cth != nil {
		currencyCodeFrom = cth.CurrencyCodeFrom
	}
	return
}

func (cth *CrossTransactionHistory) SetCurrencyCodeFrom(currencyCodeFrom int) {
	cth.CurrencyCodeFrom = currencyCodeFrom
}

func (cth *CrossTransactionHistory) GetCurrencyCodeTo() (currencyCodeTo int) {
	if cth != nil {
		currencyCodeTo = cth.CurrencyCodeTo
	}
	return
}

func (cth *CrossTransactionHistory) SetCurrencyCodeTo(currencyCodeTo int) {
	cth.CurrencyCodeTo = currencyCodeTo
}

func (cth *CrossTransactionHistory) GetCustomerIdentifier() (customerIdentifier string) {
	if cth != nil {
		customerIdentifier = cth.CustomerIdentifier
	}
	return
}

func (cth *CrossTransactionHistory) SetCustomerIdentifier(customerIdentifier string) {
	cth.CustomerIdentifier = customerIdentifier
}

func (cth *CrossTransactionHistory) GetCountryCode() (countryCode string) {
	if cth != nil {
		countryCode = cth.CountryCode
	}
	return
}

func (cth *CrossTransactionHistory) SetCountryCode(countryCode string) {
	cth.CountryCode = countryCode
}

func (cth *CrossTransactionHistory) GetDetails() (details []ExecutedTransactionCurrencyExchangeContractItem) {
	if cth != nil {
		details = cth.Details
	}
	return
}

func (cth *CrossTransactionHistory) SetDetails(details []ExecutedTransactionCurrencyExchangeContractItem) {
	cth.Details = details
}

func (cth *CrossTransactionHistory) GetSenderAddress() (senderAddress string) {
	if cth != nil {
		senderAddress = cth.SenderAddress
	}
	return
}

func (cth *CrossTransactionHistory) SetSenderAddress(senderAddress string) {
	cth.SenderAddress = senderAddress
}

func (cth *CrossTransactionHistory) GetBankAddress() (bankAddress string) {
	if cth != nil {
		bankAddress = cth.BankAddress
	}
	return
}

func (cth *CrossTransactionHistory) SetBankAddress(bankAddress string) {
	cth.BankAddress = bankAddress
}

func (cth *CrossTransactionHistory) GetStatus() (status crosstransactionstatusenum.CrossTransactionStatus) {
	if cth != nil {
		status = cth.Status
	}
	return
}

func (cth *CrossTransactionHistory) SetStatus(status crosstransactionstatusenum.CrossTransactionStatus) {
	cth.Status = status
}

func (cth *CrossTransactionHistory) GetTxId() (txId string) {
	if cth != nil {
		txId = cth.TxId
	}
	return
}

func (cth *CrossTransactionHistory) SetTxId(txId string) {
	cth.TxId = txId
}

func (cth *CrossTransactionHistory) GetErrorCode() (errorCode int) {
	if cth != nil {
		errorCode = cth.ErrorCode
	}
	return
}

func (cth *CrossTransactionHistory) SetErrorCode(errorCode int) {
	cth.ErrorCode = errorCode
}

func (cth *CrossTransactionHistory) GetErrorMessage() (errorMessage string) {
	if cth != nil {
		errorMessage = cth.ErrorMessage
	}
	return
}

func (cth *CrossTransactionHistory) SetErrorMessage(errorMessage string) {
	cth.ErrorMessage = errorMessage
}

func (cth *CrossTransactionHistory) GetData() (data string) {
	if cth != nil {
		data = cth.Data
	}
	return
}

func (cth *CrossTransactionHistory) SetData(data string) {
	cth.Data = data
}

func (cth *CrossTransactionHistory) GetInvoiceNumber() (invoiceNumber string) {
	if cth != nil {
		invoiceNumber = cth.InvoiceNumber
	}
	return
}

func (cth *CrossTransactionHistory) SetInvoiceNumber(invoiceNumber string) {
	cth.InvoiceNumber = invoiceNumber
}

func (cth *CrossTransactionHistory) GetTransactionHistories() (transactionHistories []TransactionHistory) {
	if cth != nil {
		transactionHistories = cth.TransactionHistories
	}
	return
}

func (cth *CrossTransactionHistory) SetTransactionHistories(transactionHistories []TransactionHistory) {
	cth.TransactionHistories = transactionHistories
}

func (cte *CrossTransactionEvent) GetData() (data CrossTransactionHistory) {
	if cte != nil {
		data = cte.Data
	}
	return
}

func (cte *CrossTransactionEvent) SetData(data CrossTransactionHistory) {
	cte.Data = data
}

func (ce *ContractEvent) GetData() (data CurrencyExchangeContract) {
	if ce != nil {
		data = ce.Data
	}
	return
}

func (ce *ContractEvent) SetData(data CurrencyExchangeContract) {
	ce.Data = data
}

func (cbe *ClientBankEvent) GetData() (data ClientBank) {
	if cbe != nil {
		data = cbe.Data
	}
	return
}

func (cbe *ClientBankEvent) SetData(data ClientBank) {
	cbe.Data = data
}

func (cb *ClientBank) GetAddress() (address string) {
	if cb != nil {
		address = cb.Address
	}
	return
}

func (cb *ClientBank) SetAddress(address string) {
	cb.Address = address
}

func (cb *ClientBank) GetBankDisplayName() (bankDisplayName string) {
	if cb != nil {
		bankDisplayName = cb.BankDisplayName
	}
	return
}

func (cb *ClientBank) SetBankDisplayName(bankDisplayName string) {
	cb.BankDisplayName = bankDisplayName
}

func (cb *ClientBank) GetState() (state stateenum.State) {
	if cb != nil {
		state = cb.State
	}
	return
}

func (cb *ClientBank) SetState(state stateenum.State) {
	cb.State = state
}

func (cb *ClientBank) GetCountryCode() (countryCode string) {
	if cb != nil {
		countryCode = cb.CountryCode
	}
	return
}

func (cb *ClientBank) SetCountryCode(countryCode string) {
	cb.CountryCode = countryCode
}

func (cb *ClientBank) GetOwner() (owner string) {
	if cb != nil {
		owner = cb.Owner
	}
	return
}

func (cb *ClientBank) SetOwner(owner string) {
	cb.Owner = owner
}

func (cb *ClientBank) GetAvailableContractTypes() (availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	if cb != nil {
		availableContractTypes = cb.AvailableContractTypes
	}
	return
}

func (cb *ClientBank) SetAvailableContractTypes(availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	cb.AvailableContractTypes = availableContractTypes
}

func (cb *ClientBank) GetDocType() (docType string) {
	if cb != nil {
		docType = cb.DocType
	}
	return
}

func (cb *ClientBank) SetDocType(docType string) {
	cb.DocType = docType
}

func (ci *ClearingInfo) GetId() (id string) {
	if ci != nil {
		id = ci.Id
	}
	return
}

func (ci *ClearingInfo) SetId(id string) {
	ci.Id = id
}

func (ci *ClearingInfo) GetOwner() (owner string) {
	if ci != nil {
		owner = ci.Owner
	}
	return
}

func (ci *ClearingInfo) SetOwner(owner string) {
	ci.Owner = owner
}

func (ci *ClearingInfo) GetClaims() (claims int64) {
	if ci != nil {
		claims = ci.Claims
	}
	return
}

func (ci *ClearingInfo) SetClaims(claims int64) {
	ci.Claims = claims
}

func (ci *ClearingInfo) GetLiabilities() (liabilities int64) {
	if ci != nil {
		liabilities = ci.Liabilities
	}
	return
}

func (ci *ClearingInfo) SetLiabilities(liabilities int64) {
	ci.Liabilities = liabilities
}

func (ci *ClearingInfo) GetHistory() (history []ClaimsItem) {
	if ci != nil {
		history = ci.History
	}
	return
}

func (ci *ClearingInfo) SetHistory(history []ClaimsItem) {
	ci.History = history
}

func (ci *ClearingInfo) GetProcedure() (procedure []ClaimsItem) {
	if ci != nil {
		procedure = ci.Procedure
	}
	return
}

func (ci *ClearingInfo) SetProcedure(procedure []ClaimsItem) {
	ci.Procedure = procedure
}

func (ci *ClearingInfo) GetCreated() (created int64) {
	if ci != nil {
		created = ci.Created
	}
	return
}

func (ci *ClearingInfo) SetCreated(created int64) {
	ci.Created = created
}

func (ci *ClearingInfo) GetDocType() (docType string) {
	if ci != nil {
		docType = ci.DocType
	}
	return
}

func (ci *ClearingInfo) SetDocType(docType string) {
	ci.DocType = docType
}

func (ce *ClearingEvent) GetData() (data ClearingData) {
	if ce != nil {
		data = ce.Data
	}
	return
}

func (ce *ClearingEvent) SetData(data ClearingData) {
	ce.Data = data
}

func (cd *ClearingData) GetId() (id string) {
	if cd != nil {
		id = cd.Id
	}
	return
}

func (cd *ClearingData) SetId(id string) {
	cd.Id = id
}

func (cd *ClearingData) GetOwner() (owner string) {
	if cd != nil {
		owner = cd.Owner
	}
	return
}

func (cd *ClearingData) SetOwner(owner string) {
	cd.Owner = owner
}

func (cd *ClearingData) GetClaims() (claims int64) {
	if cd != nil {
		claims = cd.Claims
	}
	return
}

func (cd *ClearingData) SetClaims(claims int64) {
	cd.Claims = claims
}

func (cd *ClearingData) GetLiabilities() (liabilities int64) {
	if cd != nil {
		liabilities = cd.Liabilities
	}
	return
}

func (cd *ClearingData) SetLiabilities(liabilities int64) {
	cd.Liabilities = liabilities
}

func (cd *ClearingData) GetHistory() (history []ClaimsItemResponse) {
	if cd != nil {
		history = cd.History
	}
	return
}

func (cd *ClearingData) SetHistory(history []ClaimsItemResponse) {
	cd.History = history
}

func (cd *ClearingData) GetNetting() (netting []AmountOfBank) {
	if cd != nil {
		netting = cd.Netting
	}
	return
}

func (cd *ClearingData) SetNetting(netting []AmountOfBank) {
	cd.Netting = netting
}

func (cd *ClearingData) GetProcedure() (procedure []ClaimsItemResponse) {
	if cd != nil {
		procedure = cd.Procedure
	}
	return
}

func (cd *ClearingData) SetProcedure(procedure []ClaimsItemResponse) {
	cd.Procedure = procedure
}

func (cd *ClearingData) GetCreated() (created int64) {
	if cd != nil {
		created = cd.Created
	}
	return
}

func (cd *ClearingData) SetCreated(created int64) {
	cd.Created = created
}

func (cb *ClearingBank) GetClaims() (claims int64) {
	if cb != nil {
		claims = cb.Claims
	}
	return
}

func (cb *ClearingBank) SetClaims(claims int64) {
	cb.Claims = claims
}

func (cb *ClearingBank) GetLiabilities() (liabilities int64) {
	if cb != nil {
		liabilities = cb.Liabilities
	}
	return
}

func (cb *ClearingBank) SetLiabilities(liabilities int64) {
	cb.Liabilities = liabilities
}

func (cir *ClaimsItemResponse) GetCurrencyCode() (currencyCode int) {
	if cir != nil {
		currencyCode = cir.CurrencyCode
	}
	return
}

func (cir *ClaimsItemResponse) SetCurrencyCode(currencyCode int) {
	cir.CurrencyCode = currencyCode
}

func (cir *ClaimsItemResponse) GetBankClaims() (bankClaims BankInfo) {
	if cir != nil {
		bankClaims = cir.BankClaims
	}
	return
}

func (cir *ClaimsItemResponse) SetBankClaims(bankClaims BankInfo) {
	cir.BankClaims = bankClaims
}

func (cir *ClaimsItemResponse) GetBankLiabilities() (bankLiabilities BankInfo) {
	if cir != nil {
		bankLiabilities = cir.BankLiabilities
	}
	return
}

func (cir *ClaimsItemResponse) SetBankLiabilities(bankLiabilities BankInfo) {
	cir.BankLiabilities = bankLiabilities
}

func (cir *ClaimsItemResponse) GetAmount() (amount int64) {
	if cir != nil {
		amount = cir.Amount
	}
	return
}

func (cir *ClaimsItemResponse) SetAmount(amount int64) {
	cir.Amount = amount
}

func (cir *ClaimsItemResponse) GetUnconfirmed() (unconfirmed int64) {
	if cir != nil {
		unconfirmed = cir.Unconfirmed
	}
	return
}

func (cir *ClaimsItemResponse) SetUnconfirmed(unconfirmed int64) {
	cir.Unconfirmed = unconfirmed
}

func (cid *ClaimsItemDoc) GetDocType() (docType string) {
	if cid != nil {
		docType = cid.DocType
	}
	return
}

func (cid *ClaimsItemDoc) SetDocType(docType string) {
	cid.DocType = docType
}

func (cid *ClaimsItemDoc) GetId() (id string) {
	if cid != nil {
		id = cid.Id
	}
	return
}

func (cid *ClaimsItemDoc) SetId(id string) {
	cid.Id = id
}

func (ci *ClaimsItem) GetCurrencyCode() (currencyCode int) {
	if ci != nil {
		currencyCode = ci.CurrencyCode
	}
	return
}

func (ci *ClaimsItem) SetCurrencyCode(currencyCode int) {
	ci.CurrencyCode = currencyCode
}

func (ci *ClaimsItem) GetBankClaims() (bankClaims string) {
	if ci != nil {
		bankClaims = ci.BankClaims
	}
	return
}

func (ci *ClaimsItem) SetBankClaims(bankClaims string) {
	ci.BankClaims = bankClaims
}

func (ci *ClaimsItem) GetBankLiabilities() (bankLiabilities string) {
	if ci != nil {
		bankLiabilities = ci.BankLiabilities
	}
	return
}

func (ci *ClaimsItem) SetBankLiabilities(bankLiabilities string) {
	ci.BankLiabilities = bankLiabilities
}

func (ci *ClaimsItem) GetAmount() (amount int64) {
	if ci != nil {
		amount = ci.Amount
	}
	return
}

func (ci *ClaimsItem) SetAmount(amount int64) {
	ci.Amount = amount
}

func (ci *ClaimsItem) GetUnconfirmed() (unconfirmed int64) {
	if ci != nil {
		unconfirmed = ci.Unconfirmed
	}
	return
}

func (ci *ClaimsItem) SetUnconfirmed(unconfirmed int64) {
	ci.Unconfirmed = unconfirmed
}

func (ce *ClaimsEvent) GetData() (data []ClaimsItem) {
	if ce != nil {
		data = ce.Data
	}
	return
}

func (ce *ClaimsEvent) SetData(data []ClaimsItem) {
	ce.Data = data
}

func (ca *ClaimsAggregate) GetAmount() (amount int64) {
	if ca != nil {
		amount = ca.Amount
	}
	return
}

func (ca *ClaimsAggregate) SetAmount(amount int64) {
	ca.Amount = amount
}

func (ca *ClaimsAggregate) GetUnconfirmed() (unconfirmed int64) {
	if ca != nil {
		unconfirmed = ca.Unconfirmed
	}
	return
}

func (ca *ClaimsAggregate) SetUnconfirmed(unconfirmed int64) {
	ca.Unconfirmed = unconfirmed
}

func (ca *ClaimsAggregate) GetIds() (ids []string) {
	if ca != nil {
		ids = ca.Ids
	}
	return
}

func (ca *ClaimsAggregate) SetIds(ids []string) {
	ca.Ids = ids
}

func (be *BaseEvent) GetChaincodeName() (chaincodeName string) {
	if be != nil {
		chaincodeName = be.ChaincodeName
	}
	return
}

func (be *BaseEvent) SetChaincodeName(chaincodeName string) {
	be.ChaincodeName = chaincodeName
}

func (be *BaseEvent) GetFunctionName() (functionName string) {
	if be != nil {
		functionName = be.FunctionName
	}
	return
}

func (be *BaseEvent) SetFunctionName(functionName string) {
	be.FunctionName = functionName
}

func (bi *BankInfo) GetAddress() (address string) {
	if bi != nil {
		address = bi.Address
	}
	return
}

func (bi *BankInfo) SetAddress(address string) {
	bi.Address = address
}

func (bi *BankInfo) GetName() (name string) {
	if bi != nil {
		name = bi.Name
	}
	return
}

func (bi *BankInfo) SetName(name string) {
	bi.Name = name
}

func (bi *BankInfo) GetBik() (bik string) {
	if bi != nil {
		bik = bi.Bik
	}
	return
}

func (bi *BankInfo) SetBik(bik string) {
	bi.Bik = bik
}

func (be *BankEvent) GetData() (data Bank) {
	if be != nil {
		data = be.Data
	}
	return
}

func (be *BankEvent) SetData(data Bank) {
	be.Data = data
}

func (b *Bank) SetAddress(address string) {
	b.Address = address
}

func (b *Bank) GetName() (name string) {
	if b != nil {
		name = b.Name
	}
	return
}

func (b *Bank) SetName(name string) {
	b.Name = name
}

func (b *Bank) GetBIK() (bIK string) {
	if b != nil {
		bIK = b.BIK
	}
	return
}

func (b *Bank) SetBIK(bIK string) {
	b.BIK = bIK
}

func (b *Bank) GetState() (state stateenum.State) {
	if b != nil {
		state = b.State
	}
	return
}

func (b *Bank) SetState(state stateenum.State) {
	b.State = state
}

func (b *Bank) GetCreatedBy() (createdBy string) {
	if b != nil {
		createdBy = b.CreatedBy
	}
	return
}

func (b *Bank) SetCreatedBy(createdBy string) {
	b.CreatedBy = createdBy
}

func (b *Bank) GetEncrypted() (encrypted bool) {
	if b != nil {
		encrypted = b.Encrypted
	}
	return
}

func (b *Bank) SetEncrypted(encrypted bool) {
	b.Encrypted = encrypted
}

func (b *Bank) GetMSPId() (mSPId string) {
	if b != nil {
		mSPId = b.MSPId
	}
	return
}

func (b *Bank) SetMSPId(mSPId string) {
	b.MSPId = mSPId
}

func (b *Bank) GetRoles() (roles []accessroleenum.AccessRole) {
	if b != nil {
		roles = b.Roles
	}
	return
}

func (b *Bank) SetRoles(roles []accessroleenum.AccessRole) {
	b.Roles = roles
}

func (b *Bank) GetAvailableContractTypes() (availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	if b != nil {
		availableContractTypes = b.AvailableContractTypes
	}
	return
}

func (b *Bank) SetAvailableContractTypes(availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	b.AvailableContractTypes = availableContractTypes
}

func (b *Bank) GetConf() (conf string) {
	if b != nil {
		conf = b.Conf
	}
	return
}

func (b *Bank) SetConf(conf string) {
	b.Conf = conf
}

func (b *Bank) GetDocType() (docType string) {
	if b != nil {
		docType = b.DocType
	}
	return
}

func (b *Bank) SetDocType(docType string) {
	b.DocType = docType
}

func (ape *AvailablePlatformsEvent) GetData() (data string) {
	if ape != nil {
		data = ape.Data
	}
	return
}

func (ape *AvailablePlatformsEvent) SetData(data string) {
	ape.Data = data
}

func (ae *ArbitratorEvent) GetData() (data Arbitrator) {
	if ae != nil {
		data = ae.Data
	}
	return
}

func (ae *ArbitratorEvent) SetData(data Arbitrator) {
	ae.Data = data
}

func (a *Arbitrator) GetAddress() (address string) {
	if a != nil {
		address = a.Address
	}
	return
}

func (a *Arbitrator) SetAddress(address string) {
	a.Address = address
}

func (a *Arbitrator) GetName() (name string) {
	if a != nil {
		name = a.Name
	}
	return
}

func (a *Arbitrator) SetName(name string) {
	a.Name = name
}

func (a *Arbitrator) GetDocType() (docType string) {
	if a != nil {
		docType = a.DocType
	}
	return
}

func (a *Arbitrator) SetDocType(docType string) {
	a.DocType = docType
}

func (aob *AmountOfBank) GetAddress() (address string) {
	if aob != nil {
		address = aob.Address
	}
	return
}

func (aob *AmountOfBank) SetAddress(address string) {
	aob.Address = address
}

func (aob *AmountOfBank) GetAmount() (amount int64) {
	if aob != nil {
		amount = aob.Amount
	}
	return
}

func (aob *AmountOfBank) SetAmount(amount int64) {
	aob.Amount = amount
}

func (aoar *AddressOfAccountRing) GetNext() (next *AddressOfAccountRing) {
	if aoar != nil {
		next = aoar.next
	}
	return
}

func (aoar *AddressOfAccountRing) SetNext(next *AddressOfAccountRing) {
	aoar.next = next
}

func (aoar *AddressOfAccountRing) GetPrev() (prev *AddressOfAccountRing) {
	if aoar != nil {
		prev = aoar.prev
	}
	return
}

func (aoar *AddressOfAccountRing) SetPrev(prev *AddressOfAccountRing) {
	aoar.prev = prev
}

func (aoar *AddressOfAccountRing) GetValue() (value AddressOfAccount) {
	if aoar != nil {
		value = aoar.Value
	}
	return
}

func (aoar *AddressOfAccountRing) SetValue(value AddressOfAccount) {
	aoar.Value = value
}

func (aoal *AddressOfAccountList) GetRoot() (root AddressOfAccountElement) {
	if aoal != nil {
		root = aoal.root
	}
	return
}

func (aoal *AddressOfAccountList) SetRoot(root AddressOfAccountElement) {
	aoal.root = root
}

func (aoal *AddressOfAccountList) GetLen() (_len int) {
	if aoal != nil {
		_len = aoal.len
	}
	return
}

func (aoal *AddressOfAccountList) SetLen(_len int) {
	aoal.len = _len
}

func (aoae *AddressOfAccountElement) GetNext() (next *AddressOfAccountElement) {
	if aoae != nil {
		next = aoae.next
	}
	return
}

func (aoae *AddressOfAccountElement) SetNext(next *AddressOfAccountElement) {
	aoae.next = next
}

func (aoae *AddressOfAccountElement) GetPrev() (prev *AddressOfAccountElement) {
	if aoae != nil {
		prev = aoae.prev
	}
	return
}

func (aoae *AddressOfAccountElement) SetPrev(prev *AddressOfAccountElement) {
	aoae.prev = prev
}

func (aoae *AddressOfAccountElement) GetList() (list *AddressOfAccountList) {
	if aoae != nil {
		list = aoae.list
	}
	return
}

func (aoae *AddressOfAccountElement) SetList(list *AddressOfAccountList) {
	aoae.list = list
}

func (aoae *AddressOfAccountElement) GetValue() (value AddressOfAccount) {
	if aoae != nil {
		value = aoae.Value
	}
	return
}

func (aoae *AddressOfAccountElement) SetValue(value AddressOfAccount) {
	aoae.Value = value
}

func (ask *AccountSecretKey) GetAddressTo() (addressTo string) {
	if ask != nil {
		addressTo = ask.AddressTo
	}
	return
}

func (ask *AccountSecretKey) SetAddressTo(addressTo string) {
	ask.AddressTo = addressTo
}

func (ask *AccountSecretKey) GetEncryptedSecretKey() (encryptedSecretKey string) {
	if ask != nil {
		encryptedSecretKey = ask.EncryptedSecretKey
	}
	return
}

func (ask *AccountSecretKey) SetEncryptedSecretKey(encryptedSecretKey string) {
	ask.EncryptedSecretKey = encryptedSecretKey
}

func (ar *AccountRing) GetNext() (next *AccountRing) {
	if ar != nil {
		next = ar.next
	}
	return
}

func (ar *AccountRing) SetNext(next *AccountRing) {
	ar.next = next
}

func (ar *AccountRing) GetPrev() (prev *AccountRing) {
	if ar != nil {
		prev = ar.prev
	}
	return
}

func (ar *AccountRing) SetPrev(prev *AccountRing) {
	ar.prev = prev
}

func (ar *AccountRing) GetValue() (value *Account) {
	if ar != nil {
		value = ar.Value
	}
	return
}

func (ar *AccountRing) SetValue(value *Account) {
	ar.Value = value
}

func (al *AccountList) GetRoot() (root AccountElement) {
	if al != nil {
		root = al.root
	}
	return
}

func (al *AccountList) SetRoot(root AccountElement) {
	al.root = root
}

func (al *AccountList) GetLen() (_len int) {
	if al != nil {
		_len = al.len
	}
	return
}

func (al *AccountList) SetLen(_len int) {
	al.len = _len
}

func (ae *AccountEvent) GetData() (data Account) {
	if ae != nil {
		data = ae.Data
	}
	return
}

func (ae *AccountEvent) SetData(data Account) {
	ae.Data = data
}

func (ae *AccountElement) GetNext() (next *AccountElement) {
	if ae != nil {
		next = ae.next
	}
	return
}

func (ae *AccountElement) SetNext(next *AccountElement) {
	ae.next = next
}

func (ae *AccountElement) GetPrev() (prev *AccountElement) {
	if ae != nil {
		prev = ae.prev
	}
	return
}

func (ae *AccountElement) SetPrev(prev *AccountElement) {
	ae.prev = prev
}

func (ae *AccountElement) GetList() (list *AccountList) {
	if ae != nil {
		list = ae.list
	}
	return
}

func (ae *AccountElement) SetList(list *AccountList) {
	ae.list = list
}

func (ae *AccountElement) GetValue() (value *Account) {
	if ae != nil {
		value = ae.Value
	}
	return
}

func (ae *AccountElement) SetValue(value *Account) {
	ae.Value = value
}

func (ab *AccountBalance) GetAccountBalanceAddress() (accountBalanceAddress string) {
	if ab != nil {
		accountBalanceAddress = ab.AccountBalanceAddress
	}
	return
}

func (ab *AccountBalance) SetAccountBalanceAddress(accountBalanceAddress string) {
	ab.AccountBalanceAddress = accountBalanceAddress
}

func (ab *AccountBalance) GetAccountBalanceAddressBank() (accountBalanceAddressBank string) {
	if ab != nil {
		accountBalanceAddressBank = ab.AccountBalanceAddressBank
	}
	return
}

func (ab *AccountBalance) SetAccountBalanceAddressBank(accountBalanceAddressBank string) {
	ab.AccountBalanceAddressBank = accountBalanceAddressBank
}

func (ab *AccountBalance) GetOp() (op string) {
	if ab != nil {
		op = ab.Op
	}
	return
}

func (ab *AccountBalance) SetOp(op string) {
	ab.Op = op
}

func (ab *AccountBalance) GetAmount() (amount int64) {
	if ab != nil {
		amount = ab.Amount
	}
	return
}

func (ab *AccountBalance) SetAmount(amount int64) {
	ab.Amount = amount
}

func (ab *AccountBalance) GetTxID() (txID string) {
	if ab != nil {
		txID = ab.TxID
	}
	return
}

func (ab *AccountBalance) SetTxID(txID string) {
	ab.TxID = txID
}

func (ab *AccountBalance) GetDocType() (docType string) {
	if ab != nil {
		docType = ab.DocType
	}
	return
}

func (ab *AccountBalance) SetDocType(docType string) {
	ab.DocType = docType
}

func (a *Account) GetAddress() (address string) {
	if a != nil {
		address = a.Address
	}
	return
}

func (a *Account) SetAddress(address string) {
	a.Address = address
}

func (a *Account) GetState() (state stateenum.State) {
	if a != nil {
		state = a.State
	}
	return
}

func (a *Account) SetState(state stateenum.State) {
	a.State = state
}

func (a *Account) GetCurrencyCode() (currencyCode int) {
	if a != nil {
		currencyCode = a.CurrencyCode
	}
	return
}

func (a *Account) SetCurrencyCode(currencyCode int) {
	a.CurrencyCode = currencyCode
}

func (a *Account) GetJuridicalType() (juridicalType juridicaltypeenum.JuridicalType) {
	if a != nil {
		juridicalType = a.JuridicalType
	}
	return
}

func (a *Account) SetJuridicalType(juridicalType juridicaltypeenum.JuridicalType) {
	a.JuridicalType = juridicalType
}

func (a *Account) GetClientBankAddress() (clientBankAddress string) {
	if a != nil {
		clientBankAddress = a.ClientBankAddress
	}
	return
}

func (a *Account) SetClientBankAddress(clientBankAddress string) {
	a.ClientBankAddress = clientBankAddress
}

func (a *Account) GetIdentityType() (identityType identitytypeenum.IdentityType) {
	if a != nil {
		identityType = a.IdentityType
	}
	return
}

func (a *Account) SetIdentityType(identityType identitytypeenum.IdentityType) {
	a.IdentityType = identityType
}

func (a *Account) GetOwner() (owner string) {
	if a != nil {
		owner = a.Owner
	}
	return
}

func (a *Account) SetOwner(owner string) {
	a.Owner = owner
}

func (a *Account) GetType() (_type accounttypeenum.AccountType) {
	if a != nil {
		_type = a.Type
	}
	return
}

func (a *Account) SetType(_type accounttypeenum.AccountType) {
	a.Type = _type
}

func (a *Account) GetAvailableContractTypes() (availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	if a != nil {
		availableContractTypes = a.AvailableContractTypes
	}
	return
}

func (a *Account) SetAvailableContractTypes(availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	a.AvailableContractTypes = availableContractTypes
}

func (a *Account) GetIdentifiers() (identifiers []string) {
	if a != nil {
		identifiers = a.Identifiers
	}
	return
}

func (a *Account) SetIdentifiers(identifiers []string) {
	a.Identifiers = identifiers
}

func (a *Account) GetEncrypted() (encrypted bool) {
	if a != nil {
		encrypted = a.Encrypted
	}
	return
}

func (a *Account) SetEncrypted(encrypted bool) {
	a.Encrypted = encrypted
}

func (a *Account) GetCreated() (created int64) {
	if a != nil {
		created = a.Created
	}
	return
}

func (a *Account) SetCreated(created int64) {
	a.Created = created
}

func (a *Account) GetPublicKey() (publicKey string) {
	if a != nil {
		publicKey = a.PublicKey
	}
	return
}

func (a *Account) SetPublicKey(publicKey string) {
	a.PublicKey = publicKey
}

func (a *Account) GetDocType() (docType string) {
	if a != nil {
		docType = a.DocType
	}
	return
}

func (a *Account) SetDocType(docType string) {
	a.DocType = docType
}
