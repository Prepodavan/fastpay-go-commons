// Generated by: gen
// TypeWriter: slice
// Directive: +gen on AddressOfAccount

package models

// AddressOfAccountSlice is a slice of type AddressOfAccount. Use it where you would use []AddressOfAccount.
type AddressOfAccountSlice []AddressOfAccount

// Distinct returns a new AddressOfAccountSlice whose elements are unique. See: http://clipperhouse.github.io/gen/#Distinct
func (rcv AddressOfAccountSlice) Distinct() (result AddressOfAccountSlice) {
	appended := make(map[AddressOfAccount]bool)
	for _, v := range rcv {
		if !appended[v] {
			result = append(result, v)
			appended[v] = true
		}
	}
	return result
}

// Any verifies that one or more elements of AddressOfAccountSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#Any
func (rcv AddressOfAccountSlice) Any(fn func(AddressOfAccount) bool) bool {
	for _, v := range rcv {
		if fn(v) {
			return true
		}
	}
	return false
}

// All verifies that all elements of AddressOfAccountSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#All
func (rcv AddressOfAccountSlice) All(fn func(AddressOfAccount) bool) bool {
	for _, v := range rcv {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Where returns a new AddressOfAccountSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv AddressOfAccountSlice) Where(fn func(AddressOfAccount) bool) (result AddressOfAccountSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Count gives the number elements of AddressOfAccountSlice that return true for the passed func. See: http://clipperhouse.github.io/gen/#Count
func (rcv AddressOfAccountSlice) Count(fn func(AddressOfAccount) bool) (result int) {
	for _, v := range rcv {
		if fn(v) {
			result++
		}
	}
	return
}

// AggregateAccountSlice iterates over AddressOfAccountSlice, operating on each element while maintaining ‘state’. See: http://clipperhouse.github.io/gen/#Aggregate
func (rcv AddressOfAccountSlice) AggregateAccountSlice(fn func(AccountSlice, AddressOfAccount) AccountSlice) (result AccountSlice) {
	for _, v := range rcv {
		result = fn(result, v)
	}
	return
}

// SelectAccount projects a slice of *Account from AddressOfAccountSlice, typically called a map in other frameworks. See: http://clipperhouse.github.io/gen/#Select
func (rcv AddressOfAccountSlice) SelectAccount(fn func(AddressOfAccount) *Account) (result []*Account) {
	for _, v := range rcv {
		result = append(result, fn(v))
	}
	return
}
