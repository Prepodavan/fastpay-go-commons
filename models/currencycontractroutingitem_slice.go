// Generated by: gen
// TypeWriter: slice
// Directive: +gen on *CurrencyContractRoutingItem

package models

// CurrencyContractRoutingItemSlice is a slice of type *CurrencyContractRoutingItem. Use it where you would use []*CurrencyContractRoutingItem.
type CurrencyContractRoutingItemSlice []*CurrencyContractRoutingItem

// Any verifies that one or more elements of CurrencyContractRoutingItemSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#Any
func (rcv CurrencyContractRoutingItemSlice) Any(fn func(*CurrencyContractRoutingItem) bool) bool {
	for _, v := range rcv {
		if fn(v) {
			return true
		}
	}
	return false
}

// All verifies that all elements of CurrencyContractRoutingItemSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#All
func (rcv CurrencyContractRoutingItemSlice) All(fn func(*CurrencyContractRoutingItem) bool) bool {
	for _, v := range rcv {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Where returns a new CurrencyContractRoutingItemSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv CurrencyContractRoutingItemSlice) Where(fn func(*CurrencyContractRoutingItem) bool) (result CurrencyContractRoutingItemSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// Count gives the number elements of CurrencyContractRoutingItemSlice that return true for the passed func. See: http://clipperhouse.github.io/gen/#Count
func (rcv CurrencyContractRoutingItemSlice) Count(fn func(*CurrencyContractRoutingItem) bool) (result int) {
	for _, v := range rcv {
		if fn(v) {
			result++
		}
	}
	return
}

// SelectCurrencyContractRoutingItem projects a slice of CurrencyContractRoutingItem from CurrencyContractRoutingItemSlice, typically called a map in other frameworks. See: http://clipperhouse.github.io/gen/#Select
func (rcv CurrencyContractRoutingItemSlice) SelectCurrencyContractRoutingItem(fn func(*CurrencyContractRoutingItem) CurrencyContractRoutingItem) (result []CurrencyContractRoutingItem) {
	for _, v := range rcv {
		result = append(result, fn(v))
	}
	return
}
