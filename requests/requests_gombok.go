// Code generated by gombok. DO NOT EDIT.

package requests

import (
	accounttypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/account-type-enum"
	currencyexchangecontractcategoryenum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-exchange-contract-category-enum"
	currencyexchangecontracttypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-exchange-contract-type-enum"
	currencytypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-type-enum"
	filtercontractstateenum "github.com/SolarLabRU/fastpay-go-commons/enums/filter-contract-state-enum"
	identitytypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/identity-type-enum"
	invoicestateenum "github.com/SolarLabRU/fastpay-go-commons/enums/invoice-state-enum"
	juridicaltypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/juridical-type-enum"
	limittypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/limit-type-enum"
	memberdealtypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/member-deal-type-enum"
	operationdealtypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/operation-deal-type-enum"
	stateenum "github.com/SolarLabRU/fastpay-go-commons/enums/state_enum"
	transactiontypeenum "github.com/SolarLabRU/fastpay-go-commons/enums/transaction-type-enum"
	models "github.com/SolarLabRU/fastpay-go-commons/models"
)

func (_in *handler) GetFun() (fun string) {
	if _in != nil {
		fun = _in.fun
	}
	return
}

func (_in *handler) SetFun(fun string) {
	_in.fun = fun
}

func (_in *handler) GetName() (name string) {
	if _in != nil {
		name = _in.name
	}
	return
}

func (_in *handler) SetName(name string) {
	_in.name = name
}

func (wwsr *WithdrawWithoutSignRequest) GetAddressFrom() (addressFrom string) {
	if wwsr != nil {
		addressFrom = wwsr.AddressFrom
	}
	return
}

func (wwsr *WithdrawWithoutSignRequest) SetAddressFrom(addressFrom string) {
	wwsr.AddressFrom = addressFrom
}

func (wwsr *WithdrawWithoutSignRequest) GetAmount() (amount int64) {
	if wwsr != nil {
		amount = wwsr.Amount
	}
	return
}

func (wwsr *WithdrawWithoutSignRequest) SetAmount(amount int64) {
	wwsr.Amount = amount
}

func (wwsr *WithdrawWithoutSignRequest) GetCurrencyCode() (currencyCode int) {
	if wwsr != nil {
		currencyCode = wwsr.CurrencyCode
	}
	return
}

func (wwsr *WithdrawWithoutSignRequest) SetCurrencyCode(currencyCode int) {
	wwsr.CurrencyCode = currencyCode
}

func (wwsr *WithdrawWithoutSignRequest) GetPayload() (payload string) {
	if wwsr != nil {
		payload = wwsr.Payload
	}
	return
}

func (wwsr *WithdrawWithoutSignRequest) SetPayload(payload string) {
	wwsr.Payload = payload
}

func (wwsr *WithdrawWithoutSignRequest) GetTransactionId() (transactionId string) {
	if wwsr != nil {
		transactionId = wwsr.TransactionId
	}
	return
}

func (wwsr *WithdrawWithoutSignRequest) SetTransactionId(transactionId string) {
	wwsr.TransactionId = transactionId
}

func (wrr *WithdrawResultRequest) GetAddressFrom() (addressFrom string) {
	if wrr != nil {
		addressFrom = wrr.AddressFrom
	}
	return
}

func (wrr *WithdrawResultRequest) SetAddressFrom(addressFrom string) {
	wrr.AddressFrom = addressFrom
}

func (wrr *WithdrawResultRequest) GetTxId() (txId string) {
	if wrr != nil {
		txId = wrr.TxId
	}
	return
}

func (wrr *WithdrawResultRequest) SetTxId(txId string) {
	wrr.TxId = txId
}

func (wrr *WithdrawRejectRequest) GetAddressFrom() (addressFrom string) {
	if wrr != nil {
		addressFrom = wrr.AddressFrom
	}
	return
}

func (wrr *WithdrawRejectRequest) SetAddressFrom(addressFrom string) {
	wrr.AddressFrom = addressFrom
}

func (wrr *WithdrawRejectRequest) GetTxId() (txId string) {
	if wrr != nil {
		txId = wrr.TxId
	}
	return
}

func (wrr *WithdrawRejectRequest) SetTxId(txId string) {
	wrr.TxId = txId
}

func (wrr *WithdrawRejectRequest) GetCurrencyCode() (currencyCode int) {
	if wrr != nil {
		currencyCode = wrr.CurrencyCode
	}
	return
}

func (wrr *WithdrawRejectRequest) SetCurrencyCode(currencyCode int) {
	wrr.CurrencyCode = currencyCode
}

func (wrr *WithdrawRejectRequest) GetTransactionId() (transactionId string) {
	if wrr != nil {
		transactionId = wrr.TransactionId
	}
	return
}

func (wrr *WithdrawRejectRequest) SetTransactionId(transactionId string) {
	wrr.TransactionId = transactionId
}

func (wcr *WithdrawConfirmRequest) GetAddressFrom() (addressFrom string) {
	if wcr != nil {
		addressFrom = wcr.AddressFrom
	}
	return
}

func (wcr *WithdrawConfirmRequest) SetAddressFrom(addressFrom string) {
	wcr.AddressFrom = addressFrom
}

func (wcr *WithdrawConfirmRequest) GetTxId() (txId string) {
	if wcr != nil {
		txId = wcr.TxId
	}
	return
}

func (wcr *WithdrawConfirmRequest) SetTxId(txId string) {
	wcr.TxId = txId
}

func (wcr *WithdrawConfirmRequest) GetCurrencyCode() (currencyCode int) {
	if wcr != nil {
		currencyCode = wcr.CurrencyCode
	}
	return
}

func (wcr *WithdrawConfirmRequest) SetCurrencyCode(currencyCode int) {
	wcr.CurrencyCode = currencyCode
}

func (wcr *WithdrawConfirmRequest) GetTransactionId() (transactionId string) {
	if wcr != nil {
		transactionId = wcr.TransactionId
	}
	return
}

func (wcr *WithdrawConfirmRequest) SetTransactionId(transactionId string) {
	wcr.TransactionId = transactionId
}

func (uscbr *UpdateStateClientBankRequest) GetState() (state stateenum.State) {
	if uscbr != nil {
		state = uscbr.State
	}
	return
}

func (uscbr *UpdateStateClientBankRequest) SetState(state stateenum.State) {
	uscbr.State = state
}

func (uscbr *UpdateStateClientBankRequest) GetAddress() (address string) {
	if uscbr != nil {
		address = uscbr.Address
	}
	return
}

func (uscbr *UpdateStateClientBankRequest) SetAddress(address string) {
	uscbr.Address = address
}

func (ujr *UpdateJuridicalRequest) GetAddress() (address string) {
	if ujr != nil {
		address = ujr.Address
	}
	return
}

func (ujr *UpdateJuridicalRequest) SetAddress(address string) {
	ujr.Address = address
}

func (ujr *UpdateJuridicalRequest) GetJuridicalType() (juridicalType juridicaltypeenum.JuridicalType) {
	if ujr != nil {
		juridicalType = ujr.JuridicalType
	}
	return
}

func (ujr *UpdateJuridicalRequest) SetJuridicalType(juridicalType juridicaltypeenum.JuridicalType) {
	ujr.JuridicalType = juridicalType
}

func (uisr *UpdateInvoiceStateRequest) GetNumber() (number string) {
	if uisr != nil {
		number = uisr.Number
	}
	return
}

func (uisr *UpdateInvoiceStateRequest) SetNumber(number string) {
	uisr.Number = number
}

func (uisr *UpdateInvoiceStateRequest) GetRecipient() (recipient string) {
	if uisr != nil {
		recipient = uisr.Recipient
	}
	return
}

func (uisr *UpdateInvoiceStateRequest) SetRecipient(recipient string) {
	uisr.Recipient = recipient
}

func (uisr *UpdateInvoiceStateRequest) GetCurrencyCode() (currencyCode int) {
	if uisr != nil {
		currencyCode = uisr.CurrencyCode
	}
	return
}

func (uisr *UpdateInvoiceStateRequest) SetCurrencyCode(currencyCode int) {
	uisr.CurrencyCode = currencyCode
}

func (uisr *UpdateInvoiceStateRequest) GetState() (state invoicestateenum.InvoiceState) {
	if uisr != nil {
		state = uisr.State
	}
	return
}

func (uisr *UpdateInvoiceStateRequest) SetState(state invoicestateenum.InvoiceState) {
	uisr.State = state
}

func (uir *UpdateInvoiceRequest) GetNumber() (number string) {
	if uir != nil {
		number = uir.Number
	}
	return
}

func (uir *UpdateInvoiceRequest) SetNumber(number string) {
	uir.Number = number
}

func (uir *UpdateInvoiceRequest) GetRecipient() (recipient string) {
	if uir != nil {
		recipient = uir.Recipient
	}
	return
}

func (uir *UpdateInvoiceRequest) SetRecipient(recipient string) {
	uir.Recipient = recipient
}

func (uir *UpdateInvoiceRequest) GetPayer() (payer string) {
	if uir != nil {
		payer = uir.Payer
	}
	return
}

func (uir *UpdateInvoiceRequest) SetPayer(payer string) {
	uir.Payer = payer
}

func (uir *UpdateInvoiceRequest) GetState() (state invoicestateenum.InvoiceState) {
	if uir != nil {
		state = uir.State
	}
	return
}

func (uir *UpdateInvoiceRequest) SetState(state invoicestateenum.InvoiceState) {
	uir.State = state
}

func (uir *UpdateInvoiceRequest) GetCurrencyCode() (currencyCode int) {
	if uir != nil {
		currencyCode = uir.CurrencyCode
	}
	return
}

func (uir *UpdateInvoiceRequest) SetCurrencyCode(currencyCode int) {
	uir.CurrencyCode = currencyCode
}

func (uir *UpdateInvoiceRequest) GetErrorCode() (errorCode int) {
	if uir != nil {
		errorCode = uir.ErrorCode
	}
	return
}

func (uir *UpdateInvoiceRequest) SetErrorCode(errorCode int) {
	uir.ErrorCode = errorCode
}

func (uir *UpdateIdentityRequest) GetAddress() (address string) {
	if uir != nil {
		address = uir.Address
	}
	return
}

func (uir *UpdateIdentityRequest) SetAddress(address string) {
	uir.Address = address
}

func (uir *UpdateIdentityRequest) GetIdentityType() (identityType identitytypeenum.IdentityType) {
	if uir != nil {
		identityType = uir.IdentityType
	}
	return
}

func (uir *UpdateIdentityRequest) SetIdentityType(identityType identitytypeenum.IdentityType) {
	uir.IdentityType = identityType
}

func (ubsr *UpdateBankStateRequest) SetAddress(address string) {
	ubsr.Address = address
}

func (ubsr *UpdateBankStateRequest) GetState() (state stateenum.State) {
	if ubsr != nil {
		state = ubsr.State
	}
	return
}

func (ubsr *UpdateBankStateRequest) SetState(state stateenum.State) {
	ubsr.State = state
}

func (uact *UpdateAvailableContractTypes) SetAddress(address string) {
	uact.Address = address
}

func (uact *UpdateAvailableContractTypes) GetAvailableContractTypes() (availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	if uact != nil {
		availableContractTypes = uact.AvailableContractTypes
	}
	return
}

func (uact *UpdateAvailableContractTypes) SetAvailableContractTypes(availableContractTypes []currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	uact.AvailableContractTypes = availableContractTypes
}

func (uasr *UpdateAccountStateRequest) GetAddress() (address string) {
	if uasr != nil {
		address = uasr.Address
	}
	return
}

func (uasr *UpdateAccountStateRequest) SetAddress(address string) {
	uasr.Address = address
}

func (uasr *UpdateAccountStateRequest) GetState() (state stateenum.State) {
	if uasr != nil {
		state = uasr.State
	}
	return
}

func (uasr *UpdateAccountStateRequest) SetState(state stateenum.State) {
	uasr.State = state
}

func (uasir *UpdateAccountStateInternalRequest) GetAddress() (address string) {
	if uasir != nil {
		address = uasir.Address
	}
	return
}

func (uasir *UpdateAccountStateInternalRequest) SetAddress(address string) {
	uasir.Address = address
}

func (uasir *UpdateAccountStateInternalRequest) GetState() (state stateenum.State) {
	if uasir != nil {
		state = uasir.State
	}
	return
}

func (uasir *UpdateAccountStateInternalRequest) SetState(state stateenum.State) {
	uasir.State = state
}

func (tft *TransfersFromTo) GetTo() (to string) {
	if tft != nil {
		to = tft.To
	}
	return
}

func (tft *TransfersFromTo) SetTo(to string) {
	tft.To = to
}

func (tft *TransfersFromTo) GetAmount() (amount int64) {
	if tft != nil {
		amount = tft.Amount
	}
	return
}

func (tft *TransfersFromTo) SetAmount(amount int64) {
	tft.Amount = amount
}

func (tft *TransfersFromTo) GetPayload() (payload string) {
	if tft != nil {
		payload = tft.Payload
	}
	return
}

func (tft *TransfersFromTo) SetPayload(payload string) {
	tft.Payload = payload
}

func (tfr *TransfersFromRequest) GetAddressFrom() (addressFrom string) {
	if tfr != nil {
		addressFrom = tfr.AddressFrom
	}
	return
}

func (tfr *TransfersFromRequest) SetAddressFrom(addressFrom string) {
	tfr.AddressFrom = addressFrom
}

func (tfr *TransfersFromRequest) GetTo() (to []TransfersFromTo) {
	if tfr != nil {
		to = tfr.To
	}
	return
}

func (tfr *TransfersFromRequest) SetTo(to []TransfersFromTo) {
	tfr.To = to
}

func (tfr *TransfersFromRequest) GetCurrencyCode() (currencyCode int) {
	if tfr != nil {
		currencyCode = tfr.CurrencyCode
	}
	return
}

func (tfr *TransfersFromRequest) SetCurrencyCode(currencyCode int) {
	tfr.CurrencyCode = currencyCode
}

func (tfr *TransfersFromRequest) GetTransactionId() (transactionId string) {
	if tfr != nil {
		transactionId = tfr.TransactionId
	}
	return
}

func (tfr *TransfersFromRequest) SetTransactionId(transactionId string) {
	tfr.TransactionId = transactionId
}

func (tr *TransferRequest) GetAddressFrom() (addressFrom string) {
	if tr != nil {
		addressFrom = tr.AddressFrom
	}
	return
}

func (tr *TransferRequest) SetAddressFrom(addressFrom string) {
	tr.AddressFrom = addressFrom
}

func (tr *TransferRequest) GetTo() (to string) {
	if tr != nil {
		to = tr.To
	}
	return
}

func (tr *TransferRequest) SetTo(to string) {
	tr.To = to
}

func (tr *TransferRequest) GetCurrencyCode() (currencyCode int) {
	if tr != nil {
		currencyCode = tr.CurrencyCode
	}
	return
}

func (tr *TransferRequest) SetCurrencyCode(currencyCode int) {
	tr.CurrencyCode = currencyCode
}

func (tr *TransferRequest) GetAmount() (amount int64) {
	if tr != nil {
		amount = tr.Amount
	}
	return
}

func (tr *TransferRequest) SetAmount(amount int64) {
	tr.Amount = amount
}

func (tr *TransferRequest) GetPayload() (payload string) {
	if tr != nil {
		payload = tr.Payload
	}
	return
}

func (tr *TransferRequest) SetPayload(payload string) {
	tr.Payload = payload
}

func (tr *TransferRequest) GetMsgHash() (msgHash string) {
	if tr != nil {
		msgHash = tr.MsgHash
	}
	return
}

func (tr *TransferRequest) SetMsgHash(msgHash string) {
	tr.MsgHash = msgHash
}

func (tr *TransferRequest) GetSig() (sig SignDto) {
	if tr != nil {
		sig = tr.Sig
	}
	return
}

func (tr *TransferRequest) SetSig(sig SignDto) {
	tr.Sig = sig
}

func (tr *TransferRequest) GetInvoiceNumber() (invoiceNumber string) {
	if tr != nil {
		invoiceNumber = tr.InvoiceNumber
	}
	return
}

func (tr *TransferRequest) SetInvoiceNumber(invoiceNumber string) {
	tr.InvoiceNumber = invoiceNumber
}

func (tr *TransferRequest) GetExp() (exp int64) {
	if tr != nil {
		exp = tr.Exp
	}
	return
}

func (tr *TransferRequest) SetExp(exp int64) {
	tr.Exp = exp
}

func (tr *TransferRequest) GetTransactionId() (transactionId string) {
	if tr != nil {
		transactionId = tr.TransactionId
	}
	return
}

func (tr *TransferRequest) SetTransactionId(transactionId string) {
	tr.TransactionId = transactionId
}

func (tr *TransferRequest) GetTxType() (txType transactiontypeenum.TransactionType) {
	if tr != nil {
		txType = tr.TxType
	}
	return
}

func (tr *TransferRequest) SetTxType(txType transactiontypeenum.TransactionType) {
	tr.TxType = txType
}

func (tbr *TransferBatchRequest) GetTransfers() (transfers []TransferRequest) {
	if tbr != nil {
		transfers = tbr.Transfers
	}
	return
}

func (tbr *TransferBatchRequest) SetTransfers(transfers []TransferRequest) {
	tbr.Transfers = transfers
}

func (tr *TopupRequest) GetAddressTo() (addressTo string) {
	if tr != nil {
		addressTo = tr.AddressTo
	}
	return
}

func (tr *TopupRequest) SetAddressTo(addressTo string) {
	tr.AddressTo = addressTo
}

func (tr *TopupRequest) GetAmount() (amount int64) {
	if tr != nil {
		amount = tr.Amount
	}
	return
}

func (tr *TopupRequest) SetAmount(amount int64) {
	tr.Amount = amount
}

func (tr *TopupRequest) GetCurrencyCode() (currencyCode int) {
	if tr != nil {
		currencyCode = tr.CurrencyCode
	}
	return
}

func (tr *TopupRequest) SetCurrencyCode(currencyCode int) {
	tr.CurrencyCode = currencyCode
}

func (tr *TopupRequest) GetPayload() (payload string) {
	if tr != nil {
		payload = tr.Payload
	}
	return
}

func (tr *TopupRequest) SetPayload(payload string) {
	tr.Payload = payload
}

func (tr *TopupRequest) GetTransactionId() (transactionId string) {
	if tr != nil {
		transactionId = tr.TransactionId
	}
	return
}

func (tr *TopupRequest) SetTransactionId(transactionId string) {
	tr.TransactionId = transactionId
}

func (tudr *TopUpDepositRequest) GetSafeDealId() (safeDealId string) {
	if tudr != nil {
		safeDealId = tudr.SafeDealId
	}
	return
}

func (tudr *TopUpDepositRequest) SetSafeDealId(safeDealId string) {
	tudr.SafeDealId = safeDealId
}

func (tudr *TopUpDepositRequest) GetAddressFrom() (addressFrom string) {
	if tudr != nil {
		addressFrom = tudr.AddressFrom
	}
	return
}

func (tudr *TopUpDepositRequest) SetAddressFrom(addressFrom string) {
	tudr.AddressFrom = addressFrom
}

func (tudr *TopUpDepositRequest) GetAddressTo() (addressTo string) {
	if tudr != nil {
		addressTo = tudr.AddressTo
	}
	return
}

func (tudr *TopUpDepositRequest) SetAddressTo(addressTo string) {
	tudr.AddressTo = addressTo
}

func (tudr *TopUpDepositRequest) GetCurrencyInfo() (currencyInfo models.CurrencyDealInfo) {
	if tudr != nil {
		currencyInfo = tudr.CurrencyInfo
	}
	return
}

func (tudr *TopUpDepositRequest) SetCurrencyInfo(currencyInfo models.CurrencyDealInfo) {
	tudr.CurrencyInfo = currencyInfo
}

func (tudr *TopUpDepositRequest) GetAmount() (amount int64) {
	if tudr != nil {
		amount = tudr.Amount
	}
	return
}

func (tudr *TopUpDepositRequest) SetAmount(amount int64) {
	tudr.Amount = amount
}

func (tudr *TopUpDepositRequest) GetNeedAmount() (needAmount int64) {
	if tudr != nil {
		needAmount = tudr.NeedAmount
	}
	return
}

func (tudr *TopUpDepositRequest) SetNeedAmount(needAmount int64) {
	tudr.NeedAmount = needAmount
}

func (sd *SignDto) GetR() (r string) {
	if sd != nil {
		r = sd.R
	}
	return
}

func (sd *SignDto) SetR(r string) {
	sd.R = r
}

func (sd *SignDto) GetS() (s string) {
	if sd != nil {
		s = sd.S
	}
	return
}

func (sd *SignDto) SetS(s string) {
	sd.S = s
}

func (sd *SignDto) GetV() (v int) {
	if sd != nil {
		v = sd.V
	}
	return
}

func (sd *SignDto) SetV(v int) {
	sd.V = v
}

func (sper *SetPaymentErrorRequest) GetNumber() (number string) {
	if sper != nil {
		number = sper.Number
	}
	return
}

func (sper *SetPaymentErrorRequest) SetNumber(number string) {
	sper.Number = number
}

func (sper *SetPaymentErrorRequest) GetRecipient() (recipient string) {
	if sper != nil {
		recipient = sper.Recipient
	}
	return
}

func (sper *SetPaymentErrorRequest) SetRecipient(recipient string) {
	sper.Recipient = recipient
}

func (sper *SetPaymentErrorRequest) GetCurrencyCode() (currencyCode int) {
	if sper != nil {
		currencyCode = sper.CurrencyCode
	}
	return
}

func (sper *SetPaymentErrorRequest) SetCurrencyCode(currencyCode int) {
	sper.CurrencyCode = currencyCode
}

func (sper *SetPaymentErrorRequest) GetErrorCode() (errorCode int) {
	if sper != nil {
		errorCode = sper.ErrorCode
	}
	return
}

func (sper *SetPaymentErrorRequest) SetErrorCode(errorCode int) {
	sper.ErrorCode = errorCode
}

func (slr *SetLimitRequest) GetValue() (value int64) {
	if slr != nil {
		value = slr.Value
	}
	return
}

func (slr *SetLimitRequest) SetValue(value int64) {
	slr.Value = value
}

func (silr *SetIssueLimitRequest) GetAddress() (address string) {
	if silr != nil {
		address = silr.Address
	}
	return
}

func (silr *SetIssueLimitRequest) SetAddress(address string) {
	silr.Address = address
}

func (silr *SetIssueLimitRequest) GetValue() (value int64) {
	if silr != nil {
		value = silr.Value
	}
	return
}

func (silr *SetIssueLimitRequest) SetValue(value int64) {
	silr.Value = value
}

func (silr *SetIssueLimitRequest) GetCurrencyCode() (currencyCode int) {
	if silr != nil {
		currencyCode = silr.CurrencyCode
	}
	return
}

func (silr *SetIssueLimitRequest) SetCurrencyCode(currencyCode int) {
	silr.CurrencyCode = currencyCode
}

func (sebcr *SetEnabledByCodeRequest) GetCode() (code int) {
	if sebcr != nil {
		code = sebcr.Code
	}
	return
}

func (sebcr *SetEnabledByCodeRequest) SetCode(code int) {
	sebcr.Code = code
}

func (sebcr *SetEnabledByCodeRequest) GetEnabled() (enabled bool) {
	if sebcr != nil {
		enabled = sebcr.Enabled
	}
	return
}

func (sebcr *SetEnabledByCodeRequest) SetEnabled(enabled bool) {
	sebcr.Enabled = enabled
}

func (sbcr *SetBankConfRequest) GetConf() (conf string) {
	if sbcr != nil {
		conf = sbcr.Conf
	}
	return
}

func (sbcr *SetBankConfRequest) SetConf(conf string) {
	sbcr.Conf = conf
}

func (sapr *SetAvailablePlatformsRequest) GetAvailablePlatforms() (availablePlatforms string) {
	if sapr != nil {
		availablePlatforms = sapr.AvailablePlatforms
	}
	return
}

func (sapr *SetAvailablePlatformsRequest) SetAvailablePlatforms(availablePlatforms string) {
	sapr.AvailablePlatforms = availablePlatforms
}

func (scr *SaveClaimsRequest) GetClaims() (claims []models.ClaimsItem) {
	if scr != nil {
		claims = scr.Claims
	}
	return
}

func (scr *SaveClaimsRequest) SetClaims(claims []models.ClaimsItem) {
	scr.Claims = claims
}

func (scr *SaveClaimsRequest) GetCurrencyCode() (currencyCode int) {
	if scr != nil {
		currencyCode = scr.CurrencyCode
	}
	return
}

func (scr *SaveClaimsRequest) SetCurrencyCode(currencyCode int) {
	scr.CurrencyCode = currencyCode
}

func (rsddr *ReturnSafeDealDepositRequest) GetSafeDealId() (safeDealId string) {
	if rsddr != nil {
		safeDealId = rsddr.SafeDealId
	}
	return
}

func (rsddr *ReturnSafeDealDepositRequest) SetSafeDealId(safeDealId string) {
	rsddr.SafeDealId = safeDealId
}

func (rsddr *ReturnSafeDealDepositRequest) GetAddressTo() (addressTo string) {
	if rsddr != nil {
		addressTo = rsddr.AddressTo
	}
	return
}

func (rsddr *ReturnSafeDealDepositRequest) SetAddressTo(addressTo string) {
	rsddr.AddressTo = addressTo
}

func (rsddr *ReturnSafeDealDepositRequest) GetCurrencyInfo() (currencyInfo models.CurrencyDealInfo) {
	if rsddr != nil {
		currencyInfo = rsddr.CurrencyInfo
	}
	return
}

func (rsddr *ReturnSafeDealDepositRequest) SetCurrencyInfo(currencyInfo models.CurrencyDealInfo) {
	rsddr.CurrencyInfo = currencyInfo
}

func (rar *RemoveArbitratorRequest) GetAddress() (address string) {
	if rar != nil {
		address = rar.Address
	}
	return
}

func (rar *RemoveArbitratorRequest) SetAddress(address string) {
	rar.Address = address
}

func (rir *RejectInvitationRequest) GetId() (id string) {
	if rir != nil {
		id = rir.Id
	}
	return
}

func (rir *RejectInvitationRequest) SetId(id string) {
	rir.Id = id
}

func (rir *RejectInvitationRequest) GetAddress() (address string) {
	if rir != nil {
		address = rir.Address
	}
	return
}

func (rir *RejectInvitationRequest) SetAddress(address string) {
	rir.Address = address
}

func (rir *RejectInvitationRequest) GetMsgHash() (msgHash string) {
	if rir != nil {
		msgHash = rir.MsgHash
	}
	return
}

func (rir *RejectInvitationRequest) SetMsgHash(msgHash string) {
	rir.MsgHash = msgHash
}

func (rir *RejectInvitationRequest) GetSig() (sig SignDto) {
	if rir != nil {
		sig = rir.Sig
	}
	return
}

func (rir *RejectInvitationRequest) SetSig(sig SignDto) {
	rir.Sig = sig
}

func (rir *RejectInvitationRequest) GetExp() (exp int64) {
	if rir != nil {
		exp = rir.Exp
	}
	return
}

func (rir *RejectInvitationRequest) SetExp(exp int64) {
	rir.Exp = exp
}

func (rar *RejectApplicationRequest) GetId() (id string) {
	if rar != nil {
		id = rar.Id
	}
	return
}

func (rar *RejectApplicationRequest) SetId(id string) {
	rar.Id = id
}

func (rar *RejectApplicationRequest) GetAddress() (address string) {
	if rar != nil {
		address = rar.Address
	}
	return
}

func (rar *RejectApplicationRequest) SetAddress(address string) {
	rar.Address = address
}

func (rar *RejectApplicationRequest) GetMsgHash() (msgHash string) {
	if rar != nil {
		msgHash = rar.MsgHash
	}
	return
}

func (rar *RejectApplicationRequest) SetMsgHash(msgHash string) {
	rar.MsgHash = msgHash
}

func (rar *RejectApplicationRequest) GetSig() (sig SignDto) {
	if rar != nil {
		sig = rar.Sig
	}
	return
}

func (rar *RejectApplicationRequest) SetSig(sig SignDto) {
	rar.Sig = sig
}

func (rar *RejectApplicationRequest) GetExp() (exp int64) {
	if rar != nil {
		exp = rar.Exp
	}
	return
}

func (rar *RejectApplicationRequest) SetExp(exp int64) {
	rar.Exp = exp
}

func (rr *RefundRequest) GetAddressFrom() (addressFrom string) {
	if rr != nil {
		addressFrom = rr.AddressFrom
	}
	return
}

func (rr *RefundRequest) SetAddressFrom(addressFrom string) {
	rr.AddressFrom = addressFrom
}

func (rr *RefundRequest) GetCurrencyCode() (currencyCode int) {
	if rr != nil {
		currencyCode = rr.CurrencyCode
	}
	return
}

func (rr *RefundRequest) SetCurrencyCode(currencyCode int) {
	rr.CurrencyCode = currencyCode
}

func (rr *RefundRequest) GetPayload() (payload string) {
	if rr != nil {
		payload = rr.Payload
	}
	return
}

func (rr *RefundRequest) SetPayload(payload string) {
	rr.Payload = payload
}

func (rr *RefundRequest) GetTransactionId() (transactionId string) {
	if rr != nil {
		transactionId = rr.TransactionId
	}
	return
}

func (rr *RefundRequest) SetTransactionId(transactionId string) {
	rr.TransactionId = transactionId
}

func (par *PublishApplicationRequest) GetId() (id string) {
	if par != nil {
		id = par.Id
	}
	return
}

func (par *PublishApplicationRequest) SetId(id string) {
	par.Id = id
}

func (par *PublishApplicationRequest) GetAddressOwner() (addressOwner string) {
	if par != nil {
		addressOwner = par.AddressOwner
	}
	return
}

func (par *PublishApplicationRequest) SetAddressOwner(addressOwner string) {
	par.AddressOwner = addressOwner
}

func (par *PublishApplicationRequest) GetMsgHash() (msgHash string) {
	if par != nil {
		msgHash = par.MsgHash
	}
	return
}

func (par *PublishApplicationRequest) SetMsgHash(msgHash string) {
	par.MsgHash = msgHash
}

func (par *PublishApplicationRequest) GetSig() (sig SignDto) {
	if par != nil {
		sig = par.Sig
	}
	return
}

func (par *PublishApplicationRequest) SetSig(sig SignDto) {
	par.Sig = sig
}

func (par *PublishApplicationRequest) GetExp() (exp int64) {
	if par != nil {
		exp = par.Exp
	}
	return
}

func (par *PublishApplicationRequest) SetExp(exp int64) {
	par.Exp = exp
}

func (pbbr *PruneBankBalanceRequest) GetAddress() (address string) {
	if pbbr != nil {
		address = pbbr.Address
	}
	return
}

func (pbbr *PruneBankBalanceRequest) SetAddress(address string) {
	pbbr.Address = address
}

func (pbbr *PruneBankBalanceRequest) GetCurrencyCode() (currencyCode int) {
	if pbbr != nil {
		currencyCode = pbbr.CurrencyCode
	}
	return
}

func (pbbr *PruneBankBalanceRequest) SetCurrencyCode(currencyCode int) {
	pbbr.CurrencyCode = currencyCode
}

func (pabr *PruneAccountBalanceRequest) GetAddress() (address string) {
	if pabr != nil {
		address = pabr.Address
	}
	return
}

func (pabr *PruneAccountBalanceRequest) SetAddress(address string) {
	pabr.Address = address
}

func (pabr *PruneAccountBalanceRequest) GetCurrencyCode() (currencyCode int) {
	if pabr != nil {
		currencyCode = pabr.CurrencyCode
	}
	return
}

func (pabr *PruneAccountBalanceRequest) SetCurrencyCode(currencyCode int) {
	pabr.CurrencyCode = currencyCode
}

func (pcr *PerformContractRequest) GetId() (id string) {
	if pcr != nil {
		id = pcr.Id
	}
	return
}

func (pcr *PerformContractRequest) SetId(id string) {
	pcr.Id = id
}

func (pcr *PerformContractRequest) GetAddress() (address string) {
	if pcr != nil {
		address = pcr.Address
	}
	return
}

func (pcr *PerformContractRequest) SetAddress(address string) {
	pcr.Address = address
}

func (pcr *PerformContractRequest) GetMsgHash() (msgHash string) {
	if pcr != nil {
		msgHash = pcr.MsgHash
	}
	return
}

func (pcr *PerformContractRequest) SetMsgHash(msgHash string) {
	pcr.MsgHash = msgHash
}

func (pcr *PerformContractRequest) GetSig() (sig SignDto) {
	if pcr != nil {
		sig = pcr.Sig
	}
	return
}

func (pcr *PerformContractRequest) SetSig(sig SignDto) {
	pcr.Sig = sig
}

func (pcr *PerformContractRequest) GetExp() (exp int64) {
	if pcr != nil {
		exp = pcr.Exp
	}
	return
}

func (pcr *PerformContractRequest) SetExp(exp int64) {
	pcr.Exp = exp
}

func (ppcr *PartialPerformContractRequest) GetActualAmountInitiator() (actualAmountInitiator int64) {
	if ppcr != nil {
		actualAmountInitiator = ppcr.ActualAmountInitiator
	}
	return
}

func (ppcr *PartialPerformContractRequest) SetActualAmountInitiator(actualAmountInitiator int64) {
	ppcr.ActualAmountInitiator = actualAmountInitiator
}

func (ppcr *PartialPerformContractRequest) GetActualAmountAcceptor() (actualAmountAcceptor int64) {
	if ppcr != nil {
		actualAmountAcceptor = ppcr.ActualAmountAcceptor
	}
	return
}

func (ppcr *PartialPerformContractRequest) SetActualAmountAcceptor(actualAmountAcceptor int64) {
	ppcr.ActualAmountAcceptor = actualAmountAcceptor
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) GetSafeDealId() (safeDealId string) {
	if pcsddr != nil {
		safeDealId = pcsddr.SafeDealId
	}
	return
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) SetSafeDealId(safeDealId string) {
	pcsddr.SafeDealId = safeDealId
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) GetAddressTo() (addressTo string) {
	if pcsddr != nil {
		addressTo = pcsddr.AddressTo
	}
	return
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) SetAddressTo(addressTo string) {
	pcsddr.AddressTo = addressTo
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) GetAmount() (amount int64) {
	if pcsddr != nil {
		amount = pcsddr.Amount
	}
	return
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) SetAmount(amount int64) {
	pcsddr.Amount = amount
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) GetCurrencyInfo() (currencyInfo models.CurrencyDealInfo) {
	if pcsddr != nil {
		currencyInfo = pcsddr.CurrencyInfo
	}
	return
}

func (pcsddr *PartialCompleteSafeDealDepositRequest) SetCurrencyInfo(currencyInfo models.CurrencyDealInfo) {
	pcsddr.CurrencyInfo = currencyInfo
}

func (mdr *MakeDepositRequest) GetId() (id string) {
	if mdr != nil {
		id = mdr.Id
	}
	return
}

func (mdr *MakeDepositRequest) SetId(id string) {
	mdr.Id = id
}

func (mdr *MakeDepositRequest) GetAddressFrom() (addressFrom string) {
	if mdr != nil {
		addressFrom = mdr.AddressFrom
	}
	return
}

func (mdr *MakeDepositRequest) SetAddressFrom(addressFrom string) {
	mdr.AddressFrom = addressFrom
}

func (mdr *MakeDepositRequest) GetAddressTo() (addressTo string) {
	if mdr != nil {
		addressTo = mdr.AddressTo
	}
	return
}

func (mdr *MakeDepositRequest) SetAddressTo(addressTo string) {
	mdr.AddressTo = addressTo
}

func (mdr *MakeDepositRequest) GetAmount() (amount int64) {
	if mdr != nil {
		amount = mdr.Amount
	}
	return
}

func (mdr *MakeDepositRequest) SetAmount(amount int64) {
	mdr.Amount = amount
}

func (mdr *MakeDepositRequest) GetMsgHash() (msgHash string) {
	if mdr != nil {
		msgHash = mdr.MsgHash
	}
	return
}

func (mdr *MakeDepositRequest) SetMsgHash(msgHash string) {
	mdr.MsgHash = msgHash
}

func (mdr *MakeDepositRequest) GetSig() (sig SignDto) {
	if mdr != nil {
		sig = mdr.Sig
	}
	return
}

func (mdr *MakeDepositRequest) SetSig(sig SignDto) {
	mdr.Sig = sig
}

func (mdr *MakeDepositRequest) GetExp() (exp int64) {
	if mdr != nil {
		exp = mdr.Exp
	}
	return
}

func (mdr *MakeDepositRequest) SetExp(exp int64) {
	mdr.Exp = exp
}

func (ipr *InvoicePaymentRequest) GetNumber() (number string) {
	if ipr != nil {
		number = ipr.Number
	}
	return
}

func (ipr *InvoicePaymentRequest) SetNumber(number string) {
	ipr.Number = number
}

func (ipr *InvoicePaymentRequest) GetRecipient() (recipient string) {
	if ipr != nil {
		recipient = ipr.Recipient
	}
	return
}

func (ipr *InvoicePaymentRequest) SetRecipient(recipient string) {
	ipr.Recipient = recipient
}

func (ipr *InvoicePaymentRequest) GetPayer() (payer string) {
	if ipr != nil {
		payer = ipr.Payer
	}
	return
}

func (ipr *InvoicePaymentRequest) SetPayer(payer string) {
	ipr.Payer = payer
}

func (ipr *InvoicePaymentRequest) GetCurrencyCode() (currencyCode int) {
	if ipr != nil {
		currencyCode = ipr.CurrencyCode
	}
	return
}

func (ipr *InvoicePaymentRequest) SetCurrencyCode(currencyCode int) {
	ipr.CurrencyCode = currencyCode
}

func (ipr *InvoicePaymentRequest) GetAmount() (amount int64) {
	if ipr != nil {
		amount = ipr.Amount
	}
	return
}

func (ipr *InvoicePaymentRequest) SetAmount(amount int64) {
	ipr.Amount = amount
}

func (ipr *InviteParticipantRequest) GetId() (id string) {
	if ipr != nil {
		id = ipr.Id
	}
	return
}

func (ipr *InviteParticipantRequest) SetId(id string) {
	ipr.Id = id
}

func (ipr *InviteParticipantRequest) GetAddressFrom() (addressFrom string) {
	if ipr != nil {
		addressFrom = ipr.AddressFrom
	}
	return
}

func (ipr *InviteParticipantRequest) SetAddressFrom(addressFrom string) {
	ipr.AddressFrom = addressFrom
}

func (ipr *InviteParticipantRequest) GetAddress() (address string) {
	if ipr != nil {
		address = ipr.Address
	}
	return
}

func (ipr *InviteParticipantRequest) SetAddress(address string) {
	ipr.Address = address
}

func (ipr *InviteParticipantRequest) GetMemberType() (memberType memberdealtypeenum.MemberDealType) {
	if ipr != nil {
		memberType = ipr.MemberType
	}
	return
}

func (ipr *InviteParticipantRequest) SetMemberType(memberType memberdealtypeenum.MemberDealType) {
	ipr.MemberType = memberType
}

func (ipr *InviteParticipantRequest) GetMsgHash() (msgHash string) {
	if ipr != nil {
		msgHash = ipr.MsgHash
	}
	return
}

func (ipr *InviteParticipantRequest) SetMsgHash(msgHash string) {
	ipr.MsgHash = msgHash
}

func (ipr *InviteParticipantRequest) GetSig() (sig SignDto) {
	if ipr != nil {
		sig = ipr.Sig
	}
	return
}

func (ipr *InviteParticipantRequest) SetSig(sig SignDto) {
	ipr.Sig = sig
}

func (ipr *InviteParticipantRequest) GetExp() (exp int64) {
	if ipr != nil {
		exp = ipr.Exp
	}
	return
}

func (ipr *InviteParticipantRequest) SetExp(exp int64) {
	ipr.Exp = exp
}

func (gsdbir *GetSafeDealByIdRequest) GetId() (id string) {
	if gsdbir != nil {
		id = gsdbir.Id
	}
	return
}

func (gsdbir *GetSafeDealByIdRequest) SetId(id string) {
	gsdbir.Id = id
}

func (gpr *GetPageRequest) GetCurrencyCodeOption() (currencyCodeOption int) {
	if gpr != nil {
		currencyCodeOption = gpr.currencyCodeOption
	}
	return
}

func (gpr *GetPageRequest) GetCcName() (ccName string) {
	if gpr != nil {
		ccName = gpr.ccName
	}
	return
}

func (gpr *GetPageRequest) GetMethodName() (methodName string) {
	if gpr != nil {
		methodName = gpr.methodName
	}
	return
}

func (gpr *GetPageRequest) GetPageSize() (pageSize int32) {
	if gpr != nil {
		pageSize = gpr.PageSize
	}
	return
}

func (gpr *GetPageRequest) SetPageSize(pageSize int32) {
	gpr.PageSize = pageSize
}

func (gpr *GetPageRequest) GetBookmark() (bookmark string) {
	if gpr != nil {
		bookmark = gpr.Bookmark
	}
	return
}

func (gpr *GetPageRequest) SetBookmark(bookmark string) {
	gpr.Bookmark = bookmark
}

func (gpcbbar *GetPageCustomersByBankAddressRequest) GetAddress() (address string) {
	if gpcbbar != nil {
		address = gpcbbar.Address
	}
	return
}

func (gpcbbar *GetPageCustomersByBankAddressRequest) SetAddress(address string) {
	gpcbbar.Address = address
}

func (gpcr *GetPageCurrencyRequest) GetType() (_type currencytypeenum.CurrencyType) {
	if gpcr != nil {
		_type = gpcr.Type
	}
	return
}

func (gpcr *GetPageCurrencyRequest) SetType(_type currencytypeenum.CurrencyType) {
	gpcr.Type = _type
}

func (gpcthr *GetPageCrossTransactionHistoryRequest) GetCurrencyCodeOption() (currencyCodeOption int) {
	if gpcthr != nil {
		currencyCodeOption = gpcthr.currencyCodeOption
	}
	return
}

func (gpcthr *GetPageCrossTransactionHistoryRequest) GetCcName() (ccName string) {
	if gpcthr != nil {
		ccName = gpcthr.ccName
	}
	return
}

func (gpcthr *GetPageCrossTransactionHistoryRequest) GetMethodName() (methodName string) {
	if gpcthr != nil {
		methodName = gpcthr.methodName
	}
	return
}

func (gpcthr *GetPageCrossTransactionHistoryRequest) GetPageSize() (pageSize int32) {
	if gpcthr != nil {
		pageSize = gpcthr.PageSize
	}
	return
}

func (gpcthr *GetPageCrossTransactionHistoryRequest) SetPageSize(pageSize int32) {
	gpcthr.PageSize = pageSize
}

func (gpcthr *GetPageCrossTransactionHistoryRequest) GetBookmark() (bookmark string) {
	if gpcthr != nil {
		bookmark = gpcthr.Bookmark
	}
	return
}

func (gpcthr *GetPageCrossTransactionHistoryRequest) SetBookmark(bookmark string) {
	gpcthr.Bookmark = bookmark
}

func (gpbpr *GetPageByPayerRequest) GetPayer() (payer string) {
	if gpbpr != nil {
		payer = gpbpr.Payer
	}
	return
}

func (gpbpr *GetPageByPayerRequest) SetPayer(payer string) {
	gpbpr.Payer = payer
}

func (glcr *GetListCurrencyRequest) GetType() (_type currencytypeenum.CurrencyType) {
	if glcr != nil {
		_type = glcr.Type
	}
	return
}

func (glcr *GetListCurrencyRequest) SetType(_type currencytypeenum.CurrencyType) {
	glcr.Type = _type
}

func (glbpr *GetListByPayerRequest) GetPayer() (payer string) {
	if glbpr != nil {
		payer = glbpr.Payer
	}
	return
}

func (glbpr *GetListByPayerRequest) SetPayer(payer string) {
	glbpr.Payer = payer
}

func (glr *GetLimitRequest) GetLimitType() (limitType limittypeenum.LimitType) {
	if glr != nil {
		limitType = glr.LimitType
	}
	return
}

func (glr *GetLimitRequest) SetLimitType(limitType limittypeenum.LimitType) {
	glr.LimitType = limitType
}

func (glr *GetLimitRequest) GetIdentityType() (identityType identitytypeenum.IdentityType) {
	if glr != nil {
		identityType = glr.IdentityType
	}
	return
}

func (glr *GetLimitRequest) SetIdentityType(identityType identitytypeenum.IdentityType) {
	glr.IdentityType = identityType
}

func (glr *GetLimitRequest) GetJuridicalType() (juridicalType juridicaltypeenum.JuridicalType) {
	if glr != nil {
		juridicalType = glr.JuridicalType
	}
	return
}

func (glr *GetLimitRequest) SetJuridicalType(juridicalType juridicaltypeenum.JuridicalType) {
	glr.JuridicalType = juridicalType
}

func (glr *GetLimitRequest) GetAccountType() (accountType accounttypeenum.AccountType) {
	if glr != nil {
		accountType = glr.AccountType
	}
	return
}

func (glr *GetLimitRequest) SetAccountType(accountType accounttypeenum.AccountType) {
	glr.AccountType = accountType
}

func (glr *GetLimitRequest) GetCurrencyCode() (currencyCode int) {
	if glr != nil {
		currencyCode = glr.CurrencyCode
	}
	return
}

func (glr *GetLimitRequest) SetCurrencyCode(currencyCode int) {
	glr.CurrencyCode = currencyCode
}

func (gilr *GetIssueLimitRequest) GetAddress() (address string) {
	if gilr != nil {
		address = gilr.Address
	}
	return
}

func (gilr *GetIssueLimitRequest) SetAddress(address string) {
	gilr.Address = address
}

func (gilr *GetIssueLimitRequest) GetCurrencyCode() (currencyCode int) {
	if gilr != nil {
		currencyCode = gilr.CurrencyCode
	}
	return
}

func (gilr *GetIssueLimitRequest) SetCurrencyCode(currencyCode int) {
	gilr.CurrencyCode = currencyCode
}

func (gicidr *GetIsCreateInvoiceDepositRequest) GetId() (id string) {
	if gicidr != nil {
		id = gicidr.Id
	}
	return
}

func (gicidr *GetIsCreateInvoiceDepositRequest) SetId(id string) {
	gicidr.Id = id
}

func (gicidr *GetIsCreateInvoiceDepositRequest) GetAddressTo() (addressTo string) {
	if gicidr != nil {
		addressTo = gicidr.AddressTo
	}
	return
}

func (gicidr *GetIsCreateInvoiceDepositRequest) SetAddressTo(addressTo string) {
	gicidr.AddressTo = addressTo
}

func (gir *GetInvoiceRequest) GetNumber() (number string) {
	if gir != nil {
		number = gir.Number
	}
	return
}

func (gir *GetInvoiceRequest) SetNumber(number string) {
	gir.Number = number
}

func (gir *GetInvoiceRequest) GetRecipient() (recipient string) {
	if gir != nil {
		recipient = gir.Recipient
	}
	return
}

func (gir *GetInvoiceRequest) SetRecipient(recipient string) {
	gir.Recipient = recipient
}

func (gcibiaccr *GetCustomersInfoByIdAndCountryCodeRequest) GetIdentifier() (identifier string) {
	if gcibiaccr != nil {
		identifier = gcibiaccr.Identifier
	}
	return
}

func (gcibiaccr *GetCustomersInfoByIdAndCountryCodeRequest) SetIdentifier(identifier string) {
	gcibiaccr.Identifier = identifier
}

func (gcibiaccr *GetCustomersInfoByIdAndCountryCodeRequest) GetCountryCode() (countryCode string) {
	if gcibiaccr != nil {
		countryCode = gcibiaccr.CountryCode
	}
	return
}

func (gcibiaccr *GetCustomersInfoByIdAndCountryCodeRequest) SetCountryCode(countryCode string) {
	gcibiaccr.CountryCode = countryCode
}

func (gcr *GetCustomerRequest) GetBankAddress() (bankAddress string) {
	if gcr != nil {
		bankAddress = gcr.BankAddress
	}
	return
}

func (gcr *GetCustomerRequest) SetBankAddress(bankAddress string) {
	gcr.BankAddress = bankAddress
}

func (gcr *GetCustomerRequest) GetIdentifier() (identifier string) {
	if gcr != nil {
		identifier = gcr.Identifier
	}
	return
}

func (gcr *GetCustomerRequest) SetIdentifier(identifier string) {
	gcr.Identifier = identifier
}

func (gcr *GetCustomerRequest) GetCountryCode() (countryCode string) {
	if gcr != nil {
		countryCode = gcr.CountryCode
	}
	return
}

func (gcr *GetCustomerRequest) SetCountryCode(countryCode string) {
	gcr.CountryCode = countryCode
}

func (gcpr *GetContractPageRequest) GetPageSize() (pageSize int32) {
	if gcpr != nil {
		pageSize = gcpr.PageSize
	}
	return
}

func (gcpr *GetContractPageRequest) SetPageSize(pageSize int32) {
	gcpr.PageSize = pageSize
}

func (gcpr *GetContractPageRequest) GetBookmark() (bookmark string) {
	if gcpr != nil {
		bookmark = gcpr.Bookmark
	}
	return
}

func (gcpr *GetContractPageRequest) SetBookmark(bookmark string) {
	gcpr.Bookmark = bookmark
}

func (gcpr *GetContractPageRequest) GetEndDate() (endDate int64) {
	if gcpr != nil {
		endDate = gcpr.EndDate
	}
	return
}

func (gcpr *GetContractPageRequest) SetEndDate(endDate int64) {
	gcpr.EndDate = endDate
}

func (gcpr *GetContractPageRequest) GetStatus() (status filtercontractstateenum.FilterContractState) {
	if gcpr != nil {
		status = gcpr.Status
	}
	return
}

func (gcpr *GetContractPageRequest) SetStatus(status filtercontractstateenum.FilterContractState) {
	gcpr.Status = status
}

func (gcpr *GetContractPageRequest) GetOperationType() (operationType operationdealtypeenum.OperationDealType) {
	if gcpr != nil {
		operationType = gcpr.OperationType
	}
	return
}

func (gcpr *GetContractPageRequest) SetOperationType(operationType operationdealtypeenum.OperationDealType) {
	gcpr.OperationType = operationType
}

func (gcpr *GetContractPageRequest) GetAddress() (address string) {
	if gcpr != nil {
		address = gcpr.Address
	}
	return
}

func (gcpr *GetContractPageRequest) SetAddress(address string) {
	gcpr.Address = address
}

func (gcpr *GetContractPageRequest) GetCurrencyCode() (currencyCode int) {
	if gcpr != nil {
		currencyCode = gcpr.CurrencyCode
	}
	return
}

func (gcpr *GetContractPageRequest) SetCurrencyCode(currencyCode int) {
	gcpr.CurrencyCode = currencyCode
}

func (gcpr *GetContractPageRequest) GetCategory() (category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	if gcpr != nil {
		category = gcpr.Category
	}
	return
}

func (gcpr *GetContractPageRequest) SetCategory(category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	gcpr.Category = category
}

func (gcpbbr *GetContractPageByBankRequest) GetBankAddress() (bankAddress string) {
	if gcpbbr != nil {
		bankAddress = gcpbbr.BankAddress
	}
	return
}

func (gcpbbr *GetContractPageByBankRequest) SetBankAddress(bankAddress string) {
	gcpbbr.BankAddress = bankAddress
}

func (gcbir *GetContractByIdRequest) GetId() (id string) {
	if gcbir != nil {
		id = gcbir.Id
	}
	return
}

func (gcbir *GetContractByIdRequest) SetId(id string) {
	gcbir.Id = id
}

func (gcbbar *GetClientBankByAddressRequest) GetAddress() (address string) {
	if gcbbar != nil {
		address = gcbbar.Address
	}
	return
}

func (gcbbar *GetClientBankByAddressRequest) SetAddress(address string) {
	gcbbar.Address = address
}

func (gcbir *GetClearingByIdRequest) GetId() (id string) {
	if gcbir != nil {
		id = gcbir.Id
	}
	return
}

func (gcbir *GetClearingByIdRequest) SetId(id string) {
	gcbir.Id = id
}

func (gbir *GetByIdentifierRequest) GetIdentifier() (identifier string) {
	if gbir != nil {
		identifier = gbir.Identifier
	}
	return
}

func (gbir *GetByIdentifierRequest) SetIdentifier(identifier string) {
	gbir.Identifier = identifier
}

func (gbcr *GetByCodeRequest) GetCode() (code int) {
	if gbcr != nil {
		code = gbcr.Code
	}
	return
}

func (gbcr *GetByCodeRequest) SetCode(code int) {
	gbcr.Code = code
}

func (gbbr *GetByBikRequest) GetBik() (bik string) {
	if gbbr != nil {
		bik = gbbr.Bik
	}
	return
}

func (gbbr *GetByBikRequest) SetBik(bik string) {
	gbbr.Bik = bik
}

func (gbar *GetByAddressRequest) GetAddress() (address string) {
	if gbar != nil {
		address = gbar.Address
	}
	return
}

func (gbar *GetByAddressRequest) SetAddress(address string) {
	gbar.Address = address
}

func (gbrr *GetBestRoutesRequest) GetAmount() (amount int64) {
	if gbrr != nil {
		amount = gbrr.Amount
	}
	return
}

func (gbrr *GetBestRoutesRequest) SetAmount(amount int64) {
	gbrr.Amount = amount
}

func (gbrr *GetBestRoutesRequest) GetCurrencyCodeFrom() (currencyCodeFrom int) {
	if gbrr != nil {
		currencyCodeFrom = gbrr.CurrencyCodeFrom
	}
	return
}

func (gbrr *GetBestRoutesRequest) SetCurrencyCodeFrom(currencyCodeFrom int) {
	gbrr.CurrencyCodeFrom = currencyCodeFrom
}

func (gbrr *GetBestRoutesRequest) GetCurrencyCodeTo() (currencyCodeTo int) {
	if gbrr != nil {
		currencyCodeTo = gbrr.CurrencyCodeTo
	}
	return
}

func (gbrr *GetBestRoutesRequest) SetCurrencyCodeTo(currencyCodeTo int) {
	gbrr.CurrencyCodeTo = currencyCodeTo
}

func (gbrr *GetBestRoutesRequest) GetCustomerIdentifier() (customerIdentifier string) {
	if gbrr != nil {
		customerIdentifier = gbrr.CustomerIdentifier
	}
	return
}

func (gbrr *GetBestRoutesRequest) SetCustomerIdentifier(customerIdentifier string) {
	gbrr.CustomerIdentifier = customerIdentifier
}

func (gbrr *GetBestRoutesRequest) GetCountryCode() (countryCode string) {
	if gbrr != nil {
		countryCode = gbrr.CountryCode
	}
	return
}

func (gbrr *GetBestRoutesRequest) SetCountryCode(countryCode string) {
	gbrr.CountryCode = countryCode
}

func (gbrr *GetBestRoutesRequest) GetTo() (to string) {
	if gbrr != nil {
		to = gbrr.To
	}
	return
}

func (gbrr *GetBestRoutesRequest) SetTo(to string) {
	gbrr.To = to
}

func (gbrr *GetBestRoutesRequest) GetCategory() (category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	if gbrr != nil {
		category = gbrr.Category
	}
	return
}

func (gbrr *GetBestRoutesRequest) SetCategory(category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	gbrr.Category = category
}

func (gbr *GetBankRequest) GetMSPId() (mSPId string) {
	if gbr != nil {
		mSPId = gbr.MSPId
	}
	return
}

func (gbr *GetBankRequest) SetMSPId(mSPId string) {
	gbr.MSPId = mSPId
}

func (gbr *GetBankRequest) GetAddress() (address string) {
	if gbr != nil {
		address = gbr.Address
	}
	return
}

func (gbr *GetBankRequest) SetAddress(address string) {
	gbr.Address = address
}

func (gbclr *GetBankClaimsLiabilitiesRequest) GetCurrencyCode() (currencyCode int) {
	if gbclr != nil {
		currencyCode = gbclr.CurrencyCode
	}
	return
}

func (gbclr *GetBankClaimsLiabilitiesRequest) SetCurrencyCode(currencyCode int) {
	gbclr.CurrencyCode = currencyCode
}

func (gbclr *GetBankClaimsLiabilitiesRequest) GetBank() (bank string) {
	if gbclr != nil {
		bank = gbclr.Bank
	}
	return
}

func (gbclr *GetBankClaimsLiabilitiesRequest) SetBank(bank string) {
	gbclr.Bank = bank
}

func (gbbtr *GetBankBalanceTotalRequest) GetCurrencyCode() (currencyCode int) {
	if gbbtr != nil {
		currencyCode = gbbtr.CurrencyCode
	}
	return
}

func (gbbtr *GetBankBalanceTotalRequest) SetCurrencyCode(currencyCode int) {
	gbbtr.CurrencyCode = currencyCode
}

func (gbbr *GetBankBalanceRequest) GetAddress() (address string) {
	if gbbr != nil {
		address = gbbr.Address
	}
	return
}

func (gbbr *GetBankBalanceRequest) SetAddress(address string) {
	gbbr.Address = address
}

func (gbbr *GetBankBalanceRequest) GetCurrencyCode() (currencyCode int) {
	if gbbr != nil {
		currencyCode = gbbr.CurrencyCode
	}
	return
}

func (gbbr *GetBankBalanceRequest) SetCurrencyCode(currencyCode int) {
	gbbr.CurrencyCode = currencyCode
}

func (gacr *GetAllClaimsRequest) GetCurrencyCode() (currencyCode int) {
	if gacr != nil {
		currencyCode = gacr.CurrencyCode
	}
	return
}

func (gacr *GetAllClaimsRequest) SetCurrencyCode(currencyCode int) {
	gacr.CurrencyCode = currencyCode
}

func (galr *GetAccountLimitsRequest) GetCurrencyCode() (currencyCode int) {
	if galr != nil {
		currencyCode = galr.CurrencyCode
	}
	return
}

func (galr *GetAccountLimitsRequest) SetCurrencyCode(currencyCode int) {
	galr.CurrencyCode = currencyCode
}

func (galr *GetAccountLimitsRequest) GetAddress() (address string) {
	if galr != nil {
		address = galr.Address
	}
	return
}

func (galr *GetAccountLimitsRequest) SetAddress(address string) {
	galr.Address = address
}

func (gabr *GetAccountBalanceRequest) GetAddress() (address string) {
	if gabr != nil {
		address = gabr.Address
	}
	return
}

func (gabr *GetAccountBalanceRequest) SetAddress(address string) {
	gabr.Address = address
}

func (gabr *GetAccountBalanceRequest) GetCurrencyCode() (currencyCode int) {
	if gabr != nil {
		currencyCode = gabr.CurrencyCode
	}
	return
}

func (gabr *GetAccountBalanceRequest) SetCurrencyCode(currencyCode int) {
	gabr.CurrencyCode = currencyCode
}

func (ecr *ExecuteContractRequest) GetContractInfo() (contractInfo models.CurrencyContractRoutingItem) {
	if ecr != nil {
		contractInfo = ecr.ContractInfo
	}
	return
}

func (ecr *ExecuteContractRequest) SetContractInfo(contractInfo models.CurrencyContractRoutingItem) {
	ecr.ContractInfo = contractInfo
}

func (ecr *ExecuteContractRequest) GetAddressFrom() (addressFrom string) {
	if ecr != nil {
		addressFrom = ecr.AddressFrom
	}
	return
}

func (ecr *ExecuteContractRequest) SetAddressFrom(addressFrom string) {
	ecr.AddressFrom = addressFrom
}

func (ecr *ExecuteContractRequest) GetTo() (to string) {
	if ecr != nil {
		to = ecr.To
	}
	return
}

func (ecr *ExecuteContractRequest) SetTo(to string) {
	ecr.To = to
}

func (ecr *ExecuteContractRequest) GetAmount() (amount int64) {
	if ecr != nil {
		amount = ecr.Amount
	}
	return
}

func (ecr *ExecuteContractRequest) SetAmount(amount int64) {
	ecr.Amount = amount
}

func (ecr *ExecuteContractRequest) GetTransactionId() (transactionId string) {
	if ecr != nil {
		transactionId = ecr.TransactionId
	}
	return
}

func (ecr *ExecuteContractRequest) SetTransactionId(transactionId string) {
	ecr.TransactionId = transactionId
}

func (ecr *ExecuteContractRequest) GetInvoiceNumber() (invoiceNumber string) {
	if ecr != nil {
		invoiceNumber = ecr.InvoiceNumber
	}
	return
}

func (ecr *ExecuteContractRequest) SetInvoiceNumber(invoiceNumber string) {
	ecr.InvoiceNumber = invoiceNumber
}

func (ecr *ExecuteContractRequest) GetPayload() (payload string) {
	if ecr != nil {
		payload = ecr.Payload
	}
	return
}

func (ecr *ExecuteContractRequest) SetPayload(payload string) {
	ecr.Payload = payload
}

func (ecr *ExecuteClearingRequest) GetCurrencyCode() (currencyCode int) {
	if ecr != nil {
		currencyCode = ecr.CurrencyCode
	}
	return
}

func (ecr *ExecuteClearingRequest) SetCurrencyCode(currencyCode int) {
	ecr.CurrencyCode = currencyCode
}

func (dar *DismissApplicationRequest) GetId() (id string) {
	if dar != nil {
		id = dar.Id
	}
	return
}

func (dar *DismissApplicationRequest) SetId(id string) {
	dar.Id = id
}

func (dar *DismissApplicationRequest) GetAddressOwner() (addressOwner string) {
	if dar != nil {
		addressOwner = dar.AddressOwner
	}
	return
}

func (dar *DismissApplicationRequest) SetAddressOwner(addressOwner string) {
	dar.AddressOwner = addressOwner
}

func (dar *DismissApplicationRequest) GetMsgHash() (msgHash string) {
	if dar != nil {
		msgHash = dar.MsgHash
	}
	return
}

func (dar *DismissApplicationRequest) SetMsgHash(msgHash string) {
	dar.MsgHash = msgHash
}

func (dar *DismissApplicationRequest) GetSig() (sig SignDto) {
	if dar != nil {
		sig = dar.Sig
	}
	return
}

func (dar *DismissApplicationRequest) SetSig(sig SignDto) {
	dar.Sig = sig
}

func (dar *DismissApplicationRequest) GetExp() (exp int64) {
	if dar != nil {
		exp = dar.Exp
	}
	return
}

func (dar *DismissApplicationRequest) SetExp(exp int64) {
	dar.Exp = exp
}

func (cwrr *CrossWithdrawResultRequest) GetCurrencyCode() (currencyCode int) {
	if cwrr != nil {
		currencyCode = cwrr.CurrencyCode
	}
	return
}

func (cwrr *CrossWithdrawResultRequest) SetCurrencyCode(currencyCode int) {
	cwrr.CurrencyCode = currencyCode
}

func (cwrr *CrossWithdrawResultRequest) GetBankAddress() (bankAddress string) {
	if cwrr != nil {
		bankAddress = cwrr.BankAddress
	}
	return
}

func (cwrr *CrossWithdrawResultRequest) SetBankAddress(bankAddress string) {
	cwrr.BankAddress = bankAddress
}

func (cwr *CrossWithdrawRequest) GetBankAddress() (bankAddress string) {
	if cwr != nil {
		bankAddress = cwr.BankAddress
	}
	return
}

func (cwr *CrossWithdrawRequest) SetBankAddress(bankAddress string) {
	cwr.BankAddress = bankAddress
}

func (cwrr *CrossWithdrawRejectRequest) GetBankAddress() (bankAddress string) {
	if cwrr != nil {
		bankAddress = cwrr.BankAddress
	}
	return
}

func (cwrr *CrossWithdrawRejectRequest) SetBankAddress(bankAddress string) {
	cwrr.BankAddress = bankAddress
}

func (cwcr *CrossWithdrawConfirmRequest) GetBankAddress() (bankAddress string) {
	if cwcr != nil {
		bankAddress = cwcr.BankAddress
	}
	return
}

func (cwcr *CrossWithdrawConfirmRequest) SetBankAddress(bankAddress string) {
	cwcr.BankAddress = bankAddress
}

func (ctr *CrossTransferRequest) GetRoutes() (routes []models.CurrencyContractRoutingItem) {
	if ctr != nil {
		routes = ctr.Routes
	}
	return
}

func (ctr *CrossTransferRequest) SetRoutes(routes []models.CurrencyContractRoutingItem) {
	ctr.Routes = routes
}

func (ctr *CrossTransferRequest) GetAddressFrom() (addressFrom string) {
	if ctr != nil {
		addressFrom = ctr.AddressFrom
	}
	return
}

func (ctr *CrossTransferRequest) SetAddressFrom(addressFrom string) {
	ctr.AddressFrom = addressFrom
}

func (ctr *CrossTransferRequest) GetTo() (to string) {
	if ctr != nil {
		to = ctr.To
	}
	return
}

func (ctr *CrossTransferRequest) SetTo(to string) {
	ctr.To = to
}

func (ctr *CrossTransferRequest) GetEncryptedSecretKeys() (encryptedSecretKeys []models.AccountSecretKey) {
	if ctr != nil {
		encryptedSecretKeys = ctr.EncryptedSecretKeys
	}
	return
}

func (ctr *CrossTransferRequest) SetEncryptedSecretKeys(encryptedSecretKeys []models.AccountSecretKey) {
	ctr.EncryptedSecretKeys = encryptedSecretKeys
}

func (ctr *CrossTransferRequest) GetAmount() (amount int64) {
	if ctr != nil {
		amount = ctr.Amount
	}
	return
}

func (ctr *CrossTransferRequest) SetAmount(amount int64) {
	ctr.Amount = amount
}

func (ctr *CrossTransferRequest) GetCurrencyCodeFrom() (currencyCodeFrom int) {
	if ctr != nil {
		currencyCodeFrom = ctr.CurrencyCodeFrom
	}
	return
}

func (ctr *CrossTransferRequest) SetCurrencyCodeFrom(currencyCodeFrom int) {
	ctr.CurrencyCodeFrom = currencyCodeFrom
}

func (ctr *CrossTransferRequest) GetCurrencyCodeTo() (currencyCodeTo int) {
	if ctr != nil {
		currencyCodeTo = ctr.CurrencyCodeTo
	}
	return
}

func (ctr *CrossTransferRequest) SetCurrencyCodeTo(currencyCodeTo int) {
	ctr.CurrencyCodeTo = currencyCodeTo
}

func (ctr *CrossTransferRequest) GetCustomerIdentifier() (customerIdentifier string) {
	if ctr != nil {
		customerIdentifier = ctr.CustomerIdentifier
	}
	return
}

func (ctr *CrossTransferRequest) SetCustomerIdentifier(customerIdentifier string) {
	ctr.CustomerIdentifier = customerIdentifier
}

func (ctr *CrossTransferRequest) GetCountryCode() (countryCode string) {
	if ctr != nil {
		countryCode = ctr.CountryCode
	}
	return
}

func (ctr *CrossTransferRequest) SetCountryCode(countryCode string) {
	ctr.CountryCode = countryCode
}

func (ctr *CrossTransferRequest) GetPayload() (payload string) {
	if ctr != nil {
		payload = ctr.Payload
	}
	return
}

func (ctr *CrossTransferRequest) SetPayload(payload string) {
	ctr.Payload = payload
}

func (ctr *CrossTransferRequest) GetInvoiceNumber() (invoiceNumber string) {
	if ctr != nil {
		invoiceNumber = ctr.InvoiceNumber
	}
	return
}

func (ctr *CrossTransferRequest) SetInvoiceNumber(invoiceNumber string) {
	ctr.InvoiceNumber = invoiceNumber
}

func (ctr *CrossTransferRequest) GetMsgHash() (msgHash string) {
	if ctr != nil {
		msgHash = ctr.MsgHash
	}
	return
}

func (ctr *CrossTransferRequest) SetMsgHash(msgHash string) {
	ctr.MsgHash = msgHash
}

func (ctr *CrossTransferRequest) GetSig() (sig SignDto) {
	if ctr != nil {
		sig = ctr.Sig
	}
	return
}

func (ctr *CrossTransferRequest) SetSig(sig SignDto) {
	ctr.Sig = sig
}

func (ctr *CrossTransferRequest) GetExp() (exp int64) {
	if ctr != nil {
		exp = ctr.Exp
	}
	return
}

func (ctr *CrossTransferRequest) SetExp(exp int64) {
	ctr.Exp = exp
}

func (ctr *CrossTransferRequest) GetTransactionId() (transactionId string) {
	if ctr != nil {
		transactionId = ctr.TransactionId
	}
	return
}

func (ctr *CrossTransferRequest) SetTransactionId(transactionId string) {
	ctr.TransactionId = transactionId
}

func (ctr *CrossTransferRequest) GetBankAddress() (bankAddress string) {
	if ctr != nil {
		bankAddress = ctr.BankAddress
	}
	return
}

func (ctr *CrossTransferRequest) SetBankAddress(bankAddress string) {
	ctr.BankAddress = bankAddress
}

func (cir *CreateInvoiceRequest) GetNumber() (number string) {
	if cir != nil {
		number = cir.Number
	}
	return
}

func (cir *CreateInvoiceRequest) SetNumber(number string) {
	cir.Number = number
}

func (cir *CreateInvoiceRequest) GetCurrencyCode() (currencyCode int) {
	if cir != nil {
		currencyCode = cir.CurrencyCode
	}
	return
}

func (cir *CreateInvoiceRequest) SetCurrencyCode(currencyCode int) {
	cir.CurrencyCode = currencyCode
}

func (cir *CreateInvoiceRequest) GetAmount() (amount int64) {
	if cir != nil {
		amount = cir.Amount
	}
	return
}

func (cir *CreateInvoiceRequest) SetAmount(amount int64) {
	cir.Amount = amount
}

func (cir *CreateInvoiceRequest) GetDescription() (description string) {
	if cir != nil {
		description = cir.Description
	}
	return
}

func (cir *CreateInvoiceRequest) SetDescription(description string) {
	cir.Description = description
}

func (cir *CreateInvoiceRequest) GetRecipient() (recipient string) {
	if cir != nil {
		recipient = cir.Recipient
	}
	return
}

func (cir *CreateInvoiceRequest) SetRecipient(recipient string) {
	cir.Recipient = recipient
}

func (cir *CreateInvoiceRequest) GetPayer() (payer string) {
	if cir != nil {
		payer = cir.Payer
	}
	return
}

func (cir *CreateInvoiceRequest) SetPayer(payer string) {
	cir.Payer = payer
}

func (ccr *CreateCustomerRequest) GetIdentifier() (identifier string) {
	if ccr != nil {
		identifier = ccr.Identifier
	}
	return
}

func (ccr *CreateCustomerRequest) SetIdentifier(identifier string) {
	ccr.Identifier = identifier
}

func (ccr *CreateCustomerRequest) GetCustomerDisplayName() (customerDisplayName string) {
	if ccr != nil {
		customerDisplayName = ccr.CustomerDisplayName
	}
	return
}

func (ccr *CreateCustomerRequest) SetCustomerDisplayName(customerDisplayName string) {
	ccr.CustomerDisplayName = customerDisplayName
}

func (ccr *CreateCustomerRequest) GetBankAddress() (bankAddress string) {
	if ccr != nil {
		bankAddress = ccr.BankAddress
	}
	return
}

func (ccr *CreateCustomerRequest) SetBankAddress(bankAddress string) {
	ccr.BankAddress = bankAddress
}

func (ccr *CreateCurrencyRequest) GetCode() (code int) {
	if ccr != nil {
		code = ccr.Code
	}
	return
}

func (ccr *CreateCurrencyRequest) SetCode(code int) {
	ccr.Code = code
}

func (ccr *CreateCurrencyRequest) GetName() (name string) {
	if ccr != nil {
		name = ccr.Name
	}
	return
}

func (ccr *CreateCurrencyRequest) SetName(name string) {
	ccr.Name = name
}

func (ccr *CreateCurrencyRequest) GetType() (_type currencytypeenum.CurrencyType) {
	if ccr != nil {
		_type = ccr.Type
	}
	return
}

func (ccr *CreateCurrencyRequest) SetType(_type currencytypeenum.CurrencyType) {
	ccr.Type = _type
}

func (ccr *CreateCurrencyRequest) GetUnit() (unit string) {
	if ccr != nil {
		unit = ccr.Unit
	}
	return
}

func (ccr *CreateCurrencyRequest) SetUnit(unit string) {
	ccr.Unit = unit
}

func (ccr *CreateCurrencyRequest) GetSymbol() (symbol string) {
	if ccr != nil {
		symbol = ccr.Symbol
	}
	return
}

func (ccr *CreateCurrencyRequest) SetSymbol(symbol string) {
	ccr.Symbol = symbol
}

func (ccr *CreateCurrencyRequest) GetDecimals() (decimals int) {
	if ccr != nil {
		decimals = ccr.Decimals
	}
	return
}

func (ccr *CreateCurrencyRequest) SetDecimals(decimals int) {
	ccr.Decimals = decimals
}

func (ccr *CreateCurrencyRequest) GetEnabled() (enabled bool) {
	if ccr != nil {
		enabled = ccr.Enabled
	}
	return
}

func (ccr *CreateCurrencyRequest) SetEnabled(enabled bool) {
	ccr.Enabled = enabled
}

func (ccbr *CreateClientBankRequest) GetAddress() (address string) {
	if ccbr != nil {
		address = ccbr.Address
	}
	return
}

func (ccbr *CreateClientBankRequest) SetAddress(address string) {
	ccbr.Address = address
}

func (ccbr *CreateClientBankRequest) GetBankDisplayName() (bankDisplayName string) {
	if ccbr != nil {
		bankDisplayName = ccbr.BankDisplayName
	}
	return
}

func (ccbr *CreateClientBankRequest) SetBankDisplayName(bankDisplayName string) {
	ccbr.BankDisplayName = bankDisplayName
}

func (ccbr *CreateClientBankRequest) GetCountryCode() (countryCode string) {
	if ccbr != nil {
		countryCode = ccbr.CountryCode
	}
	return
}

func (ccbr *CreateClientBankRequest) SetCountryCode(countryCode string) {
	ccbr.CountryCode = countryCode
}

func (cbr *CreateBankRequest) GetAddress() (address string) {
	if cbr != nil {
		address = cbr.Address
	}
	return
}

func (cbr *CreateBankRequest) SetAddress(address string) {
	cbr.Address = address
}

func (cbr *CreateBankRequest) GetState() (state stateenum.State) {
	if cbr != nil {
		state = cbr.State
	}
	return
}

func (cbr *CreateBankRequest) SetState(state stateenum.State) {
	cbr.State = state
}

func (cbr *CreateBankRequest) GetName() (name string) {
	if cbr != nil {
		name = cbr.Name
	}
	return
}

func (cbr *CreateBankRequest) SetName(name string) {
	cbr.Name = name
}

func (cbr *CreateBankRequest) GetBIK() (bIK string) {
	if cbr != nil {
		bIK = cbr.BIK
	}
	return
}

func (cbr *CreateBankRequest) SetBIK(bIK string) {
	cbr.BIK = bIK
}

func (cbr *CreateBankRequest) GetMspId() (mspId string) {
	if cbr != nil {
		mspId = cbr.MspId
	}
	return
}

func (cbr *CreateBankRequest) SetMspId(mspId string) {
	cbr.MspId = mspId
}

func (cbr *CreateBankRequest) GetIsOwner() (isOwner bool) {
	if cbr != nil {
		isOwner = cbr.IsOwner
	}
	return
}

func (cbr *CreateBankRequest) SetIsOwner(isOwner bool) {
	cbr.IsOwner = isOwner
}

func (cbr *CreateBankRequest) GetConf() (conf string) {
	if cbr != nil {
		conf = cbr.Conf
	}
	return
}

func (cbr *CreateBankRequest) SetConf(conf string) {
	cbr.Conf = conf
}

func (car *CreateArbitratorRequest) GetAddress() (address string) {
	if car != nil {
		address = car.Address
	}
	return
}

func (car *CreateArbitratorRequest) SetAddress(address string) {
	car.Address = address
}

func (car *CreateArbitratorRequest) GetName() (name string) {
	if car != nil {
		name = car.Name
	}
	return
}

func (car *CreateArbitratorRequest) SetName(name string) {
	car.Name = name
}

func (car *CreateApplicationRequest) GetId() (id string) {
	if car != nil {
		id = car.Id
	}
	return
}

func (car *CreateApplicationRequest) SetId(id string) {
	car.Id = id
}

func (car *CreateApplicationRequest) GetOfferId() (offerId string) {
	if car != nil {
		offerId = car.OfferId
	}
	return
}

func (car *CreateApplicationRequest) SetOfferId(offerId string) {
	car.OfferId = offerId
}

func (car *CreateApplicationRequest) GetOwner() (owner string) {
	if car != nil {
		owner = car.Owner
	}
	return
}

func (car *CreateApplicationRequest) SetOwner(owner string) {
	car.Owner = owner
}

func (car *CreateApplicationRequest) GetTerms() (terms models.TermsDeal) {
	if car != nil {
		terms = car.Terms
	}
	return
}

func (car *CreateApplicationRequest) SetTerms(terms models.TermsDeal) {
	car.Terms = terms
}

func (car *CreateApplicationRequest) GetMsgHash() (msgHash string) {
	if car != nil {
		msgHash = car.MsgHash
	}
	return
}

func (car *CreateApplicationRequest) SetMsgHash(msgHash string) {
	car.MsgHash = msgHash
}

func (car *CreateApplicationRequest) GetSig() (sig SignDto) {
	if car != nil {
		sig = car.Sig
	}
	return
}

func (car *CreateApplicationRequest) SetSig(sig SignDto) {
	car.Sig = sig
}

func (car *CreateApplicationRequest) GetExp() (exp int64) {
	if car != nil {
		exp = car.Exp
	}
	return
}

func (car *CreateApplicationRequest) SetExp(exp int64) {
	car.Exp = exp
}

func (car *CreateAccountRequest) GetAddress() (address string) {
	if car != nil {
		address = car.Address
	}
	return
}

func (car *CreateAccountRequest) SetAddress(address string) {
	car.Address = address
}

func (car *CreateAccountRequest) GetState() (state stateenum.State) {
	if car != nil {
		state = car.State
	}
	return
}

func (car *CreateAccountRequest) SetState(state stateenum.State) {
	car.State = state
}

func (car *CreateAccountRequest) GetCurrencyCode() (currencyCode int) {
	if car != nil {
		currencyCode = car.CurrencyCode
	}
	return
}

func (car *CreateAccountRequest) SetCurrencyCode(currencyCode int) {
	car.CurrencyCode = currencyCode
}

func (car *CreateAccountRequest) GetJuridicalType() (juridicalType juridicaltypeenum.JuridicalType) {
	if car != nil {
		juridicalType = car.JuridicalType
	}
	return
}

func (car *CreateAccountRequest) SetJuridicalType(juridicalType juridicaltypeenum.JuridicalType) {
	car.JuridicalType = juridicalType
}

func (car *CreateAccountRequest) GetIdentityType() (identityType identitytypeenum.IdentityType) {
	if car != nil {
		identityType = car.IdentityType
	}
	return
}

func (car *CreateAccountRequest) SetIdentityType(identityType identitytypeenum.IdentityType) {
	car.IdentityType = identityType
}

func (car *CreateAccountRequest) GetType() (_type accounttypeenum.AccountType) {
	if car != nil {
		_type = car.Type
	}
	return
}

func (car *CreateAccountRequest) SetType(_type accounttypeenum.AccountType) {
	car.Type = _type
}

func (car *CreateAccountRequest) GetIdentifiers() (identifiers []string) {
	if car != nil {
		identifiers = car.Identifiers
	}
	return
}

func (car *CreateAccountRequest) SetIdentifiers(identifiers []string) {
	car.Identifiers = identifiers
}

func (car *CreateAccountRequest) GetPublicKey() (publicKey string) {
	if car != nil {
		publicKey = car.PublicKey
	}
	return
}

func (car *CreateAccountRequest) SetPublicKey(publicKey string) {
	car.PublicKey = publicKey
}

func (car *CreateAccountRequest) GetOwner() (owner string) {
	if car != nil {
		owner = car.Owner
	}
	return
}

func (car *CreateAccountRequest) SetOwner(owner string) {
	car.Owner = owner
}

func (car *CreateAccountRequest) GetMsgHash() (msgHash string) {
	if car != nil {
		msgHash = car.MsgHash
	}
	return
}

func (car *CreateAccountRequest) SetMsgHash(msgHash string) {
	car.MsgHash = msgHash
}

func (car *CreateAccountRequest) GetSig() (sig SignDto) {
	if car != nil {
		sig = car.Sig
	}
	return
}

func (car *CreateAccountRequest) SetSig(sig SignDto) {
	car.Sig = sig
}

func (cur *ContractUpdateRequest) GetBankAddress() (bankAddress string) {
	if cur != nil {
		bankAddress = cur.BankAddress
	}
	return
}

func (cur *ContractUpdateRequest) SetBankAddress(bankAddress string) {
	cur.BankAddress = bankAddress
}

func (cur *ContractUpdateRequest) GetSig() (sig SignDto) {
	if cur != nil {
		sig = cur.Sig
	}
	return
}

func (cur *ContractUpdateRequest) SetSig(sig SignDto) {
	cur.Sig = sig
}

func (cur *ContractUpdateRequest) GetMsgHash() (msgHash string) {
	if cur != nil {
		msgHash = cur.MsgHash
	}
	return
}

func (cur *ContractUpdateRequest) SetMsgHash(msgHash string) {
	cur.MsgHash = msgHash
}

func (cur *ContractUpdateRequest) GetExp() (exp int64) {
	if cur != nil {
		exp = cur.Exp
	}
	return
}

func (cur *ContractUpdateRequest) SetExp(exp int64) {
	cur.Exp = exp
}

func (ccr *ContractCreateRequest) GetId() (id string) {
	if ccr != nil {
		id = ccr.Id
	}
	return
}

func (ccr *ContractCreateRequest) SetId(id string) {
	ccr.Id = id
}

func (ccr *ContractCreateRequest) GetAddressAccountSell() (addressAccountSell string) {
	if ccr != nil {
		addressAccountSell = ccr.AddressAccountSell
	}
	return
}

func (ccr *ContractCreateRequest) SetAddressAccountSell(addressAccountSell string) {
	ccr.AddressAccountSell = addressAccountSell
}

func (ccr *ContractCreateRequest) GetAddressAccountBuy() (addressAccountBuy string) {
	if ccr != nil {
		addressAccountBuy = ccr.AddressAccountBuy
	}
	return
}

func (ccr *ContractCreateRequest) SetAddressAccountBuy(addressAccountBuy string) {
	ccr.AddressAccountBuy = addressAccountBuy
}

func (ccr *ContractCreateRequest) GetAddressCommission() (addressCommission string) {
	if ccr != nil {
		addressCommission = ccr.AddressCommission
	}
	return
}

func (ccr *ContractCreateRequest) SetAddressCommission(addressCommission string) {
	ccr.AddressCommission = addressCommission
}

func (ccr *ContractCreateRequest) GetCurrencyInfoSell() (currencyInfoSell models.CurrencyInfo) {
	if ccr != nil {
		currencyInfoSell = ccr.CurrencyInfoSell
	}
	return
}

func (ccr *ContractCreateRequest) SetCurrencyInfoSell(currencyInfoSell models.CurrencyInfo) {
	ccr.CurrencyInfoSell = currencyInfoSell
}

func (ccr *ContractCreateRequest) GetCurrencyInfoBuy() (currencyInfoBuy models.CurrencyInfo) {
	if ccr != nil {
		currencyInfoBuy = ccr.CurrencyInfoBuy
	}
	return
}

func (ccr *ContractCreateRequest) SetCurrencyInfoBuy(currencyInfoBuy models.CurrencyInfo) {
	ccr.CurrencyInfoBuy = currencyInfoBuy
}

func (ccr *ContractCreateRequest) GetCategory() (category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	if ccr != nil {
		category = ccr.Category
	}
	return
}

func (ccr *ContractCreateRequest) SetCategory(category currencyexchangecontractcategoryenum.CurrencyExchangeContractCategory) {
	ccr.Category = category
}

func (ccr *ContractCreateRequest) GetType() (_type currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	if ccr != nil {
		_type = ccr.Type
	}
	return
}

func (ccr *ContractCreateRequest) SetType(_type currencyexchangecontracttypeenum.CurrencyExchangeContractType) {
	ccr.Type = _type
}

func (ccr *ContractCreateRequest) GetPrice() (price float64) {
	if ccr != nil {
		price = ccr.Price
	}
	return
}

func (ccr *ContractCreateRequest) SetPrice(price float64) {
	ccr.Price = price
}

func (ccr *ContractCreateRequest) GetFractionalCommission() (fractionalCommission float64) {
	if ccr != nil {
		fractionalCommission = ccr.FractionalCommission
	}
	return
}

func (ccr *ContractCreateRequest) SetFractionalCommission(fractionalCommission float64) {
	ccr.FractionalCommission = fractionalCommission
}

func (ccr *ContractCreateRequest) GetMaxCommission() (maxCommission int64) {
	if ccr != nil {
		maxCommission = ccr.MaxCommission
	}
	return
}

func (ccr *ContractCreateRequest) SetMaxCommission(maxCommission int64) {
	ccr.MaxCommission = maxCommission
}

func (ccr *ContractCreateRequest) GetMinAmount() (minAmount int64) {
	if ccr != nil {
		minAmount = ccr.MinAmount
	}
	return
}

func (ccr *ContractCreateRequest) SetMinAmount(minAmount int64) {
	ccr.MinAmount = minAmount
}

func (ccr *ContractCreateRequest) GetMaxAmount() (maxAmount int64) {
	if ccr != nil {
		maxAmount = ccr.MaxAmount
	}
	return
}

func (ccr *ContractCreateRequest) SetMaxAmount(maxAmount int64) {
	ccr.MaxAmount = maxAmount
}

func (ccr *ContractCreateRequest) GetStartDate() (startDate int64) {
	if ccr != nil {
		startDate = ccr.StartDate
	}
	return
}

func (ccr *ContractCreateRequest) SetStartDate(startDate int64) {
	ccr.StartDate = startDate
}

func (ccr *ContractCreateRequest) GetEndDate() (endDate int64) {
	if ccr != nil {
		endDate = ccr.EndDate
	}
	return
}

func (ccr *ContractCreateRequest) SetEndDate(endDate int64) {
	ccr.EndDate = endDate
}

func (ccr *ContractCreateRequest) GetBankAddress() (bankAddress string) {
	if ccr != nil {
		bankAddress = ccr.BankAddress
	}
	return
}

func (ccr *ContractCreateRequest) SetBankAddress(bankAddress string) {
	ccr.BankAddress = bankAddress
}

func (ccr *ContractCreateRequest) GetSig() (sig SignDto) {
	if ccr != nil {
		sig = ccr.Sig
	}
	return
}

func (ccr *ContractCreateRequest) SetSig(sig SignDto) {
	ccr.Sig = sig
}

func (ccr *ContractCreateRequest) GetMsgHash() (msgHash string) {
	if ccr != nil {
		msgHash = ccr.MsgHash
	}
	return
}

func (ccr *ContractCreateRequest) SetMsgHash(msgHash string) {
	ccr.MsgHash = msgHash
}

func (ccr *ContractCreateRequest) GetExp() (exp int64) {
	if ccr != nil {
		exp = ccr.Exp
	}
	return
}

func (ccr *ContractCreateRequest) SetExp(exp int64) {
	ccr.Exp = exp
}

func (ccr *ContractCompleteRequest) GetId() (id string) {
	if ccr != nil {
		id = ccr.Id
	}
	return
}

func (ccr *ContractCompleteRequest) SetId(id string) {
	ccr.Id = id
}

func (car *ContractAwardedRequest) GetTransferRequests() (transferRequests []TransferRequest) {
	if car != nil {
		transferRequests = car.TransferRequests
	}
	return
}

func (car *ContractAwardedRequest) SetTransferRequests(transferRequests []TransferRequest) {
	car.TransferRequests = transferRequests
}

func (cir *ConfirmInvitationRequest) GetId() (id string) {
	if cir != nil {
		id = cir.Id
	}
	return
}

func (cir *ConfirmInvitationRequest) SetId(id string) {
	cir.Id = id
}

func (cir *ConfirmInvitationRequest) GetAddress() (address string) {
	if cir != nil {
		address = cir.Address
	}
	return
}

func (cir *ConfirmInvitationRequest) SetAddress(address string) {
	cir.Address = address
}

func (cir *ConfirmInvitationRequest) GetAmount() (amount int64) {
	if cir != nil {
		amount = cir.Amount
	}
	return
}

func (cir *ConfirmInvitationRequest) SetAmount(amount int64) {
	cir.Amount = amount
}

func (cir *ConfirmInvitationRequest) GetObligatoryAmount() (obligatoryAmount int64) {
	if cir != nil {
		obligatoryAmount = cir.ObligatoryAmount
	}
	return
}

func (cir *ConfirmInvitationRequest) SetObligatoryAmount(obligatoryAmount int64) {
	cir.ObligatoryAmount = obligatoryAmount
}

func (cir *ConfirmInvitationRequest) GetMsgHash() (msgHash string) {
	if cir != nil {
		msgHash = cir.MsgHash
	}
	return
}

func (cir *ConfirmInvitationRequest) SetMsgHash(msgHash string) {
	cir.MsgHash = msgHash
}

func (cir *ConfirmInvitationRequest) GetSig() (sig SignDto) {
	if cir != nil {
		sig = cir.Sig
	}
	return
}

func (cir *ConfirmInvitationRequest) SetSig(sig SignDto) {
	cir.Sig = sig
}

func (cir *ConfirmInvitationRequest) GetExp() (exp int64) {
	if cir != nil {
		exp = cir.Exp
	}
	return
}

func (cir *ConfirmInvitationRequest) SetExp(exp int64) {
	cir.Exp = exp
}

func (csddr *CompleteSafeDealDepositRequest) GetSafeDealId() (safeDealId string) {
	if csddr != nil {
		safeDealId = csddr.SafeDealId
	}
	return
}

func (csddr *CompleteSafeDealDepositRequest) SetSafeDealId(safeDealId string) {
	csddr.SafeDealId = safeDealId
}

func (csddr *CompleteSafeDealDepositRequest) GetAddressTo() (addressTo string) {
	if csddr != nil {
		addressTo = csddr.AddressTo
	}
	return
}

func (csddr *CompleteSafeDealDepositRequest) SetAddressTo(addressTo string) {
	csddr.AddressTo = addressTo
}

func (csddr *CompleteSafeDealDepositRequest) GetCurrencyInfo() (currencyInfo models.CurrencyDealInfo) {
	if csddr != nil {
		currencyInfo = csddr.CurrencyInfo
	}
	return
}

func (csddr *CompleteSafeDealDepositRequest) SetCurrencyInfo(currencyInfo models.CurrencyDealInfo) {
	csddr.CurrencyInfo = currencyInfo
}

func (csr *CheckSignRequest) GetMsgHash() (msgHash string) {
	if csr != nil {
		msgHash = csr.MsgHash
	}
	return
}

func (csr *CheckSignRequest) SetMsgHash(msgHash string) {
	csr.MsgHash = msgHash
}

func (csr *CheckSignRequest) GetExp() (exp int64) {
	if csr != nil {
		exp = csr.Exp
	}
	return
}

func (csr *CheckSignRequest) SetExp(exp int64) {
	csr.Exp = exp
}

func (csr *CheckSignRequest) GetSig() (sig SignDto) {
	if csr != nil {
		sig = csr.Sig
	}
	return
}

func (csr *CheckSignRequest) SetSig(sig SignDto) {
	csr.Sig = sig
}

func (ccr *CancelContractRequest) GetId() (id string) {
	if ccr != nil {
		id = ccr.Id
	}
	return
}

func (ccr *CancelContractRequest) SetId(id string) {
	ccr.Id = id
}

func (ccr *CancelContractRequest) GetAddress() (address string) {
	if ccr != nil {
		address = ccr.Address
	}
	return
}

func (ccr *CancelContractRequest) SetAddress(address string) {
	ccr.Address = address
}

func (ccr *CancelContractRequest) GetMsgHash() (msgHash string) {
	if ccr != nil {
		msgHash = ccr.MsgHash
	}
	return
}

func (ccr *CancelContractRequest) SetMsgHash(msgHash string) {
	ccr.MsgHash = msgHash
}

func (ccr *CancelContractRequest) GetSig() (sig SignDto) {
	if ccr != nil {
		sig = ccr.Sig
	}
	return
}

func (ccr *CancelContractRequest) SetSig(sig SignDto) {
	ccr.Sig = sig
}

func (ccr *CancelContractRequest) GetExp() (exp int64) {
	if ccr != nil {
		exp = ccr.Exp
	}
	return
}

func (ccr *CancelContractRequest) SetExp(exp int64) {
	ccr.Exp = exp
}

func (arr *AddRegulatorRequest) SetAddress(address string) {
	arr.Address = address
}

func (air *AddIdentifierRequest) GetAddress() (address string) {
	if air != nil {
		address = air.Address
	}
	return
}

func (air *AddIdentifierRequest) SetAddress(address string) {
	air.Address = address
}

func (air *AddIdentifierRequest) GetIdentifier() (identifier string) {
	if air != nil {
		identifier = air.Identifier
	}
	return
}

func (air *AddIdentifierRequest) SetIdentifier(identifier string) {
	air.Identifier = identifier
}

func (air *AddIdentifierRequest) GetMsgHash() (msgHash string) {
	if air != nil {
		msgHash = air.MsgHash
	}
	return
}

func (air *AddIdentifierRequest) SetMsgHash(msgHash string) {
	air.MsgHash = msgHash
}

func (air *AddIdentifierRequest) GetSig() (sig SignDto) {
	if air != nil {
		sig = air.Sig
	}
	return
}

func (air *AddIdentifierRequest) SetSig(sig SignDto) {
	air.Sig = sig
}

func (aar *AcceptApplicationRequest) GetId() (id string) {
	if aar != nil {
		id = aar.Id
	}
	return
}

func (aar *AcceptApplicationRequest) SetId(id string) {
	aar.Id = id
}

func (aar *AcceptApplicationRequest) GetAddressAcceptor() (addressAcceptor string) {
	if aar != nil {
		addressAcceptor = aar.AddressAcceptor
	}
	return
}

func (aar *AcceptApplicationRequest) SetAddressAcceptor(addressAcceptor string) {
	aar.AddressAcceptor = addressAcceptor
}

func (aar *AcceptApplicationRequest) GetMsgHash() (msgHash string) {
	if aar != nil {
		msgHash = aar.MsgHash
	}
	return
}

func (aar *AcceptApplicationRequest) SetMsgHash(msgHash string) {
	aar.MsgHash = msgHash
}

func (aar *AcceptApplicationRequest) GetSig() (sig SignDto) {
	if aar != nil {
		sig = aar.Sig
	}
	return
}

func (aar *AcceptApplicationRequest) SetSig(sig SignDto) {
	aar.Sig = sig
}

func (aar *AcceptApplicationRequest) GetExp() (exp int64) {
	if aar != nil {
		exp = aar.Exp
	}
	return
}

func (aar *AcceptApplicationRequest) SetExp(exp int64) {
	aar.Exp = exp
}
