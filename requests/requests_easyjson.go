// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package requests

import (
	json "encoding/json"
	account_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/account-type-enum"
	currency_exchange_contracts_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-exchange-contracts-type-enum"
	currency_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-type-enum"
	filter_contract_state_enum "github.com/SolarLabRU/fastpay-go-commons/enums/filter-contract-state-enum"
	identity_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/identity-type-enum"
	invoice_state_enum "github.com/SolarLabRU/fastpay-go-commons/enums/invoice-state-enum"
	juridical_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/juridical-type-enum"
	limit_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/limit-type-enum"
	member_deal_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/member-deal-type-enum"
	operation_deal_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/operation-deal-type-enum"
	state_enum "github.com/SolarLabRU/fastpay-go-commons/enums/state_enum"
	transaction_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/transaction-type-enum"
	models "github.com/SolarLabRU/fastpay-go-commons/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests(in *jlexer.Lexer, out *WithdrawWithoutSignRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "payload":
			out.Payload = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests(out *jwriter.Writer, in WithdrawWithoutSignRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawWithoutSignRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawWithoutSignRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawWithoutSignRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawWithoutSignRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests1(in *jlexer.Lexer, out *WithdrawResultRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "txId":
			out.TxId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests1(out *jwriter.Writer, in WithdrawResultRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawResultRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawResultRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawResultRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawResultRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests1(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests2(in *jlexer.Lexer, out *WithdrawRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgHash":
			out.MsgHash = string(in.String())
		case "exp":
			out.Exp = int64(in.Int64())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "payload":
			out.Payload = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests2(out *jwriter.Writer, in WithdrawRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix[1:])
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests2(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests3(in *jlexer.Lexer, out *WithdrawConfirmRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "txId":
			out.TxId = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests3(out *jwriter.Writer, in WithdrawConfirmRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawConfirmRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawConfirmRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawConfirmRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawConfirmRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests3(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests4(in *jlexer.Lexer, out *UpdateStateClientBankRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = state_enum.State(in.Int())
		case "bankId":
			out.BankId = string(in.String())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests4(out *jwriter.Writer, in UpdateStateClientBankRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix[1:])
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateStateClientBankRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateStateClientBankRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateStateClientBankRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateStateClientBankRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests4(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests5(in *jlexer.Lexer, out *UpdateJuridicalRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "juridicalType":
			out.JuridicalType = juridical_type_enum.JuridicalType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests5(out *jwriter.Writer, in UpdateJuridicalRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"juridicalType\":"
		out.RawString(prefix)
		out.Int(int(in.JuridicalType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateJuridicalRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateJuridicalRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateJuridicalRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateJuridicalRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests5(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests6(in *jlexer.Lexer, out *UpdateInvoiceStateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "state":
			out.State = invoice_state_enum.InvoiceState(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests6(out *jwriter.Writer, in UpdateInvoiceStateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInvoiceStateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInvoiceStateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInvoiceStateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInvoiceStateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests6(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests7(in *jlexer.Lexer, out *UpdateInvoiceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		case "payer":
			out.Payer = string(in.String())
		case "state":
			out.State = invoice_state_enum.InvoiceState(in.Int())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests7(out *jwriter.Writer, in UpdateInvoiceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix)
		out.String(string(in.Payer))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateInvoiceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateInvoiceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateInvoiceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateInvoiceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests7(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests8(in *jlexer.Lexer, out *UpdateIdentityRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "identityType":
			out.IdentityType = identity_type_enum.IdentityType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests8(out *jwriter.Writer, in UpdateIdentityRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"identityType\":"
		out.RawString(prefix)
		out.Int(int(in.IdentityType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateIdentityRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateIdentityRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateIdentityRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateIdentityRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests8(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests9(in *jlexer.Lexer, out *UpdateBankStateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests9(out *jwriter.Writer, in UpdateBankStateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateBankStateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateBankStateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateBankStateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateBankStateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests9(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests10(in *jlexer.Lexer, out *UpdateAccountStateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests10(out *jwriter.Writer, in UpdateAccountStateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateAccountStateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateAccountStateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateAccountStateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateAccountStateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests10(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests11(in *jlexer.Lexer, out *TransfersFromTo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to":
			out.To = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "payload":
			out.Payload = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests11(out *jwriter.Writer, in TransfersFromTo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix[1:])
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransfersFromTo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransfersFromTo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransfersFromTo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransfersFromTo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests11(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests12(in *jlexer.Lexer, out *TransfersFromRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				in.Delim('[')
				if out.To == nil {
					if !in.IsDelim(']') {
						out.To = make([]TransfersFromTo, 0, 1)
					} else {
						out.To = []TransfersFromTo{}
					}
				} else {
					out.To = (out.To)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TransfersFromTo
					(v1).UnmarshalEasyJSON(in)
					out.To = append(out.To, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests12(out *jwriter.Writer, in TransfersFromRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		if in.To == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.To {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransfersFromRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransfersFromRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransfersFromRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransfersFromRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests12(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests13(in *jlexer.Lexer, out *TransferRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "to":
			out.To = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "amount":
			out.Amount = int64(in.Int64())
		case "payload":
			out.Payload = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "invoiceNumber":
			out.InvoiceNumber = string(in.String())
		case "exp":
			out.Exp = int64(in.Int64())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "txType":
			out.TxType = transaction_type_enum.TransactionType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests13(out *jwriter.Writer, in TransferRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"invoiceNumber\":"
		out.RawString(prefix)
		out.String(string(in.InvoiceNumber))
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"txType\":"
		out.RawString(prefix)
		out.Int(int(in.TxType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests13(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests14(in *jlexer.Lexer, out *TransferBatchRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transfers":
			if in.IsNull() {
				in.Skip()
				out.Transfers = nil
			} else {
				in.Delim('[')
				if out.Transfers == nil {
					if !in.IsDelim(']') {
						out.Transfers = make([]TransferRequest, 0, 1)
					} else {
						out.Transfers = []TransferRequest{}
					}
				} else {
					out.Transfers = (out.Transfers)[:0]
				}
				for !in.IsDelim(']') {
					var v4 TransferRequest
					(v4).UnmarshalEasyJSON(in)
					out.Transfers = append(out.Transfers, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests14(out *jwriter.Writer, in TransferBatchRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transfers\":"
		out.RawString(prefix[1:])
		if in.Transfers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Transfers {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferBatchRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferBatchRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferBatchRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferBatchRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests14(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests15(in *jlexer.Lexer, out *TopupRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressTo":
			out.AddressTo = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "payload":
			out.Payload = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests15(out *jwriter.Writer, in TopupRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopupRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopupRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopupRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopupRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests15(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests16(in *jlexer.Lexer, out *TopUpDepositRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "safeDealId":
			out.SafeDealId = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "addressTo":
			out.AddressTo = string(in.String())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		case "amount":
			out.Amount = int64(in.Int64())
		case "needAmount":
			out.NeedAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests16(out *jwriter.Writer, in TopUpDepositRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"safeDealId\":"
		out.RawString(prefix[1:])
		out.String(string(in.SafeDealId))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"needAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.NeedAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TopUpDepositRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TopUpDepositRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TopUpDepositRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TopUpDepositRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests16(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests17(in *jlexer.Lexer, out *TechnicalSignRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests17(out *jwriter.Writer, in TechnicalSignRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix[1:])
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TechnicalSignRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TechnicalSignRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TechnicalSignRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TechnicalSignRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests17(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests18(in *jlexer.Lexer, out *SignDto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "r":
			out.R = string(in.String())
		case "s":
			out.S = string(in.String())
		case "v":
			out.V = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests18(out *jwriter.Writer, in SignDto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix[1:])
		out.String(string(in.R))
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.String(string(in.S))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.Int(int(in.V))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignDto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignDto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignDto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignDto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests18(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests19(in *jlexer.Lexer, out *SetPaymentErrorRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests19(out *jwriter.Writer, in SetPaymentErrorRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetPaymentErrorRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetPaymentErrorRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetPaymentErrorRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetPaymentErrorRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests19(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests20(in *jlexer.Lexer, out *SetLimitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int64(in.Int64())
		case "limitType":
			out.LimitType = limit_type_enum.LimitType(in.Int())
		case "identityType":
			out.IdentityType = identity_type_enum.IdentityType(in.Int())
		case "juridicalType":
			out.JuridicalType = juridical_type_enum.JuridicalType(in.Int())
		case "accountType":
			out.AccountType = account_type_enum.AccountType(in.Int())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests20(out *jwriter.Writer, in SetLimitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Value))
	}
	{
		const prefix string = ",\"limitType\":"
		out.RawString(prefix)
		out.Int(int(in.LimitType))
	}
	{
		const prefix string = ",\"identityType\":"
		out.RawString(prefix)
		out.Int(int(in.IdentityType))
	}
	{
		const prefix string = ",\"juridicalType\":"
		out.RawString(prefix)
		out.Int(int(in.JuridicalType))
	}
	{
		const prefix string = ",\"accountType\":"
		out.RawString(prefix)
		out.Int(int(in.AccountType))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetLimitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetLimitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetLimitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetLimitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests20(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests21(in *jlexer.Lexer, out *SetIssueLimitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "value":
			out.Value = int64(in.Int64())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests21(out *jwriter.Writer, in SetIssueLimitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int64(int64(in.Value))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetIssueLimitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetIssueLimitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetIssueLimitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetIssueLimitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests21(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests22(in *jlexer.Lexer, out *SetEnabledByCodeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests22(out *jwriter.Writer, in SetEnabledByCodeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetEnabledByCodeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetEnabledByCodeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetEnabledByCodeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetEnabledByCodeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests22(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests23(in *jlexer.Lexer, out *SetBankConfRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "conf":
			out.Conf = string(in.String())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests23(out *jwriter.Writer, in SetBankConfRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"conf\":"
		out.RawString(prefix[1:])
		out.String(string(in.Conf))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetBankConfRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetBankConfRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetBankConfRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetBankConfRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests23(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests24(in *jlexer.Lexer, out *SetAvailablePlatformsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availablePlatforms":
			out.AvailablePlatforms = string(in.String())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests24(out *jwriter.Writer, in SetAvailablePlatformsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"availablePlatforms\":"
		out.RawString(prefix[1:])
		out.String(string(in.AvailablePlatforms))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetAvailablePlatformsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetAvailablePlatformsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetAvailablePlatformsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetAvailablePlatformsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests24(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests25(in *jlexer.Lexer, out *SaveClaimsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "claims":
			if in.IsNull() {
				in.Skip()
				out.Claims = nil
			} else {
				in.Delim('[')
				if out.Claims == nil {
					if !in.IsDelim(']') {
						out.Claims = make([]models.ClaimsItem, 0, 1)
					} else {
						out.Claims = []models.ClaimsItem{}
					}
				} else {
					out.Claims = (out.Claims)[:0]
				}
				for !in.IsDelim(']') {
					var v7 models.ClaimsItem
					(v7).UnmarshalEasyJSON(in)
					out.Claims = append(out.Claims, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests25(out *jwriter.Writer, in SaveClaimsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix[1:])
		if in.Claims == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Claims {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SaveClaimsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SaveClaimsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SaveClaimsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SaveClaimsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests25(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests26(in *jlexer.Lexer, out *RemovedRegulatorRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests26(out *jwriter.Writer, in RemovedRegulatorRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemovedRegulatorRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemovedRegulatorRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemovedRegulatorRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemovedRegulatorRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests26(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests27(in *jlexer.Lexer, out *RemoveIdentifierRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests27(out *jwriter.Writer, in RemoveIdentifierRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoveIdentifierRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoveIdentifierRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoveIdentifierRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoveIdentifierRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests27(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests28(in *jlexer.Lexer, out *RemoveArbitratorRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests28(out *jwriter.Writer, in RemoveArbitratorRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RemoveArbitratorRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RemoveArbitratorRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RemoveArbitratorRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RemoveArbitratorRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests28(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests29(in *jlexer.Lexer, out *RejectInvitationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests29(out *jwriter.Writer, in RejectInvitationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RejectInvitationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RejectInvitationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RejectInvitationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RejectInvitationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests29(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests30(in *jlexer.Lexer, out *RejectApplicationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests30(out *jwriter.Writer, in RejectApplicationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RejectApplicationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RejectApplicationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RejectApplicationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RejectApplicationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests30(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests31(in *jlexer.Lexer, out *RefundRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "payload":
			out.Payload = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests31(out *jwriter.Writer, in RefundRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RefundRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RefundRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RefundRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RefundRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests31(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests32(in *jlexer.Lexer, out *PublishApplicationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "addressOwner":
			out.AddressOwner = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests32(out *jwriter.Writer, in PublishApplicationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressOwner\":"
		out.RawString(prefix)
		out.String(string(in.AddressOwner))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublishApplicationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublishApplicationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublishApplicationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublishApplicationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests32(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests33(in *jlexer.Lexer, out *PerformContractRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests33(out *jwriter.Writer, in PerformContractRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PerformContractRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PerformContractRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PerformContractRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PerformContractRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests33(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests34(in *jlexer.Lexer, out *PartialPerformContractRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actualAmountInitiator":
			out.ActualAmountInitiator = int64(in.Int64())
		case "actualAmountAcceptor":
			out.ActualAmountAcceptor = int64(in.Int64())
		case "id":
			out.Id = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests34(out *jwriter.Writer, in PartialPerformContractRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actualAmountInitiator\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ActualAmountInitiator))
	}
	{
		const prefix string = ",\"actualAmountAcceptor\":"
		out.RawString(prefix)
		out.Int64(int64(in.ActualAmountAcceptor))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PartialPerformContractRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartialPerformContractRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PartialPerformContractRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartialPerformContractRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests34(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests35(in *jlexer.Lexer, out *PartialCompleteSafeDealDepositRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "safeDealId":
			out.SafeDealId = string(in.String())
		case "addressAcceptor":
			out.AddressTo = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests35(out *jwriter.Writer, in PartialCompleteSafeDealDepositRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"safeDealId\":"
		out.RawString(prefix[1:])
		out.String(string(in.SafeDealId))
	}
	{
		const prefix string = ",\"addressAcceptor\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PartialCompleteSafeDealDepositRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PartialCompleteSafeDealDepositRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PartialCompleteSafeDealDepositRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PartialCompleteSafeDealDepositRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests35(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests36(in *jlexer.Lexer, out *MakeDepositRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "addressTo":
			out.AddressTo = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests36(out *jwriter.Writer, in MakeDepositRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MakeDepositRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MakeDepositRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MakeDepositRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MakeDepositRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests36(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests37(in *jlexer.Lexer, out *InvoicePaymentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		case "payer":
			out.Payer = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "amount":
			out.Amount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests37(out *jwriter.Writer, in InvoicePaymentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix)
		out.String(string(in.Payer))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoicePaymentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoicePaymentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoicePaymentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoicePaymentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests37(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests38(in *jlexer.Lexer, out *InviteParticipantRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "memberType":
			out.MemberType = member_deal_type_enum.MemberDealType(in.Int())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests38(out *jwriter.Writer, in InviteParticipantRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"memberType\":"
		out.RawString(prefix)
		out.Int(int(in.MemberType))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InviteParticipantRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InviteParticipantRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InviteParticipantRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InviteParticipantRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests38(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests39(in *jlexer.Lexer, out *GetSafeDealByIdRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests39(out *jwriter.Writer, in GetSafeDealByIdRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetSafeDealByIdRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetSafeDealByIdRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetSafeDealByIdRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetSafeDealByIdRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests39(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests40(in *jlexer.Lexer, out *GetPageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pageSize":
			out.PageSize = int32(in.Int32())
		case "bookmark":
			out.Bookmark = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests40(out *jwriter.Writer, in GetPageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.PageSize))
	}
	{
		const prefix string = ",\"bookmark\":"
		out.RawString(prefix)
		out.String(string(in.Bookmark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests40(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests41(in *jlexer.Lexer, out *GetPageCustomersByBankIdRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "pageSize":
			out.PageSize = int32(in.Int32())
		case "bookmark":
			out.Bookmark = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests41(out *jwriter.Writer, in GetPageCustomersByBankIdRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int32(int32(in.PageSize))
	}
	{
		const prefix string = ",\"bookmark\":"
		out.RawString(prefix)
		out.String(string(in.Bookmark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPageCustomersByBankIdRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPageCustomersByBankIdRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPageCustomersByBankIdRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPageCustomersByBankIdRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests41(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests42(in *jlexer.Lexer, out *GetPageCurrencyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = currency_type_enum.CurrencyType(in.Int())
		case "pageSize":
			out.PageSize = int32(in.Int32())
		case "bookmark":
			out.Bookmark = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests42(out *jwriter.Writer, in GetPageCurrencyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int32(int32(in.PageSize))
	}
	{
		const prefix string = ",\"bookmark\":"
		out.RawString(prefix)
		out.String(string(in.Bookmark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPageCurrencyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPageCurrencyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPageCurrencyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPageCurrencyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests42(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests43(in *jlexer.Lexer, out *GetPageByPayerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payer":
			out.Payer = string(in.String())
		case "pageSize":
			out.PageSize = int32(in.Int32())
		case "bookmark":
			out.Bookmark = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests43(out *jwriter.Writer, in GetPageByPayerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix[1:])
		out.String(string(in.Payer))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int32(int32(in.PageSize))
	}
	{
		const prefix string = ",\"bookmark\":"
		out.RawString(prefix)
		out.String(string(in.Bookmark))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetPageByPayerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetPageByPayerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetPageByPayerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetPageByPayerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests43(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests44(in *jlexer.Lexer, out *GetListCurrencyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = currency_type_enum.CurrencyType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests44(out *jwriter.Writer, in GetListCurrencyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetListCurrencyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetListCurrencyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetListCurrencyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetListCurrencyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests44(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests45(in *jlexer.Lexer, out *GetListByPayerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payer":
			out.Payer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests45(out *jwriter.Writer, in GetListByPayerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix[1:])
		out.String(string(in.Payer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetListByPayerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetListByPayerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetListByPayerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetListByPayerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests45(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests46(in *jlexer.Lexer, out *GetLimitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limitType":
			out.LimitType = limit_type_enum.LimitType(in.Int())
		case "identityType":
			out.IdentityType = identity_type_enum.IdentityType(in.Int())
		case "juridicalType":
			out.JuridicalType = juridical_type_enum.JuridicalType(in.Int())
		case "accountType":
			out.AccountType = account_type_enum.AccountType(in.Int())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests46(out *jwriter.Writer, in GetLimitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"limitType\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LimitType))
	}
	{
		const prefix string = ",\"identityType\":"
		out.RawString(prefix)
		out.Int(int(in.IdentityType))
	}
	{
		const prefix string = ",\"juridicalType\":"
		out.RawString(prefix)
		out.Int(int(in.JuridicalType))
	}
	{
		const prefix string = ",\"accountType\":"
		out.RawString(prefix)
		out.Int(int(in.AccountType))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetLimitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetLimitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetLimitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetLimitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests46(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests47(in *jlexer.Lexer, out *GetIssueLimitRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests47(out *jwriter.Writer, in GetIssueLimitRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetIssueLimitRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetIssueLimitRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetIssueLimitRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetIssueLimitRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests47(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests48(in *jlexer.Lexer, out *GetInvoiceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests48(out *jwriter.Writer, in GetInvoiceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetInvoiceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetInvoiceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetInvoiceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetInvoiceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests48(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests49(in *jlexer.Lexer, out *GetCustomersInfoByIdAndCountryCodeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identifier":
			out.Identifier = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests49(out *jwriter.Writer, in GetCustomersInfoByIdAndCountryCodeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCustomersInfoByIdAndCountryCodeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCustomersInfoByIdAndCountryCodeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCustomersInfoByIdAndCountryCodeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCustomersInfoByIdAndCountryCodeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests49(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests50(in *jlexer.Lexer, out *GetCustomerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests50(out *jwriter.Writer, in GetCustomerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCustomerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCustomerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCustomerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCustomerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests50(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests51(in *jlexer.Lexer, out *GetContractPageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pageSize":
			out.PageSize = int32(in.Int32())
		case "bookmark":
			out.Bookmark = string(in.String())
		case "endDate":
			out.EndDate = int64(in.Int64())
		case "status":
			out.Status = filter_contract_state_enum.FilterContractState(in.Int())
		case "operationType":
			out.OperationType = operation_deal_type_enum.OperationDealType(in.Int())
		case "address":
			out.Address = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests51(out *jwriter.Writer, in GetContractPageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.PageSize))
	}
	{
		const prefix string = ",\"bookmark\":"
		out.RawString(prefix)
		out.String(string(in.Bookmark))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndDate))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"operationType\":"
		out.RawString(prefix)
		out.Int(int(in.OperationType))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetContractPageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetContractPageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetContractPageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetContractPageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests51(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests52(in *jlexer.Lexer, out *GetContractPageByBankRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "pageSize":
			out.PageSize = int32(in.Int32())
		case "bookmark":
			out.Bookmark = string(in.String())
		case "endDate":
			out.EndDate = int64(in.Int64())
		case "status":
			out.Status = filter_contract_state_enum.FilterContractState(in.Int())
		case "operationType":
			out.OperationType = operation_deal_type_enum.OperationDealType(in.Int())
		case "address":
			out.Address = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests52(out *jwriter.Writer, in GetContractPageByBankRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"pageSize\":"
		out.RawString(prefix)
		out.Int32(int32(in.PageSize))
	}
	{
		const prefix string = ",\"bookmark\":"
		out.RawString(prefix)
		out.String(string(in.Bookmark))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndDate))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"operationType\":"
		out.RawString(prefix)
		out.Int(int(in.OperationType))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetContractPageByBankRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetContractPageByBankRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetContractPageByBankRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetContractPageByBankRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests52(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests53(in *jlexer.Lexer, out *GetContractByIdRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests53(out *jwriter.Writer, in GetContractByIdRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetContractByIdRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetContractByIdRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetContractByIdRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetContractByIdRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests53(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests54(in *jlexer.Lexer, out *GetClientBankByIdRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests54(out *jwriter.Writer, in GetClientBankByIdRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetClientBankByIdRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetClientBankByIdRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetClientBankByIdRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetClientBankByIdRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests54(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests55(in *jlexer.Lexer, out *GetClearingByIdRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests55(out *jwriter.Writer, in GetClearingByIdRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetClearingByIdRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetClearingByIdRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetClearingByIdRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetClearingByIdRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests55(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests56(in *jlexer.Lexer, out *GetByIdentifierRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identifier":
			out.Identifier = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests56(out *jwriter.Writer, in GetByIdentifierRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Identifier))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetByIdentifierRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetByIdentifierRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetByIdentifierRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetByIdentifierRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests56(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests57(in *jlexer.Lexer, out *GetByCodeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests57(out *jwriter.Writer, in GetByCodeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetByCodeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetByCodeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetByCodeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetByCodeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests57(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests58(in *jlexer.Lexer, out *GetByBikRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bik":
			out.Bik = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests58(out *jwriter.Writer, in GetByBikRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bik\":"
		out.RawString(prefix[1:])
		out.String(string(in.Bik))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetByBikRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetByBikRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetByBikRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetByBikRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests58(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests59(in *jlexer.Lexer, out *GetByAddressRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests59(out *jwriter.Writer, in GetByAddressRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetByAddressRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetByAddressRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetByAddressRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetByAddressRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests59(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests60(in *jlexer.Lexer, out *GetBestRoutesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyCodeFrom":
			out.CurrencyCodeFrom = int(in.Int())
		case "currencyCodeTo":
			out.CurrencyCodeTo = int(in.Int())
		case "customerIdentifier":
			out.CustomerIdentifier = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "to":
			out.To = string(in.String())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests60(out *jwriter.Writer, in GetBestRoutesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyCodeFrom\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeFrom))
	}
	{
		const prefix string = ",\"currencyCodeTo\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeTo))
	}
	{
		const prefix string = ",\"customerIdentifier\":"
		out.RawString(prefix)
		out.String(string(in.CustomerIdentifier))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBestRoutesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBestRoutesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBestRoutesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBestRoutesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests60(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests61(in *jlexer.Lexer, out *GetBankRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mspId":
			out.MSPId = string(in.String())
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests61(out *jwriter.Writer, in GetBankRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mspId\":"
		out.RawString(prefix[1:])
		out.String(string(in.MSPId))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBankRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBankRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBankRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBankRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests61(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests62(in *jlexer.Lexer, out *GetBankClaimsLiabilitiesRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "bank":
			out.Bank = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests62(out *jwriter.Writer, in GetBankClaimsLiabilitiesRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"bank\":"
		out.RawString(prefix)
		out.String(string(in.Bank))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBankClaimsLiabilitiesRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBankClaimsLiabilitiesRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBankClaimsLiabilitiesRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBankClaimsLiabilitiesRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests62(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests63(in *jlexer.Lexer, out *GetBankBalanceTotalRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests63(out *jwriter.Writer, in GetBankBalanceTotalRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBankBalanceTotalRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBankBalanceTotalRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBankBalanceTotalRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBankBalanceTotalRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests63(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests64(in *jlexer.Lexer, out *GetAllClaimsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests64(out *jwriter.Writer, in GetAllClaimsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAllClaimsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAllClaimsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAllClaimsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAllClaimsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests64(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests65(in *jlexer.Lexer, out *GetAccountLimitsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "address":
			out.Address = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests65(out *jwriter.Writer, in GetAccountLimitsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAccountLimitsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAccountLimitsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAccountLimitsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAccountLimitsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests65(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests66(in *jlexer.Lexer, out *GetAccountBalanceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests66(out *jwriter.Writer, in GetAccountBalanceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAccountBalanceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAccountBalanceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAccountBalanceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAccountBalanceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests66(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests67(in *jlexer.Lexer, out *ExecuteContractRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contractInfo":
			(out.ContractInfo).UnmarshalEasyJSON(in)
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "to":
			out.To = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "payload":
			out.Payload = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests67(out *jwriter.Writer, in ExecuteContractRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contractInfo\":"
		out.RawString(prefix[1:])
		(in.ContractInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteContractRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecuteContractRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteContractRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecuteContractRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests67(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests68(in *jlexer.Lexer, out *ExecuteClearingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests68(out *jwriter.Writer, in ExecuteClearingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecuteClearingRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecuteClearingRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecuteClearingRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecuteClearingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests68(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests69(in *jlexer.Lexer, out *DismissApplicationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "addressOwner":
			out.AddressOwner = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests69(out *jwriter.Writer, in DismissApplicationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressOwner\":"
		out.RawString(prefix)
		out.String(string(in.AddressOwner))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DismissApplicationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DismissApplicationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DismissApplicationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DismissApplicationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests69(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests70(in *jlexer.Lexer, out *CrossWithdrawResultRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "bankId":
			out.BankId = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "txId":
			out.TxId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests70(out *jwriter.Writer, in CrossWithdrawResultRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossWithdrawResultRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossWithdrawResultRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossWithdrawResultRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossWithdrawResultRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests70(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests71(in *jlexer.Lexer, out *CrossWithdrawRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "exp":
			out.Exp = int64(in.Int64())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "payload":
			out.Payload = string(in.String())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests71(out *jwriter.Writer, in CrossWithdrawRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossWithdrawRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossWithdrawRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossWithdrawRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossWithdrawRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests71(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests72(in *jlexer.Lexer, out *CrossWithdrawRejectRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "txId":
			out.TxId = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests72(out *jwriter.Writer, in CrossWithdrawRejectRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossWithdrawRejectRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossWithdrawRejectRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossWithdrawRejectRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossWithdrawRejectRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests72(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests73(in *jlexer.Lexer, out *CrossWithdrawConfirmRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "txId":
			out.TxId = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "transactionId":
			out.TransactionId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests73(out *jwriter.Writer, in CrossWithdrawConfirmRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossWithdrawConfirmRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossWithdrawConfirmRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossWithdrawConfirmRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossWithdrawConfirmRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests73(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests74(in *jlexer.Lexer, out *CrossTransferRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "routes":
			if in.IsNull() {
				in.Skip()
				out.Routes = nil
			} else {
				in.Delim('[')
				if out.Routes == nil {
					if !in.IsDelim(']') {
						out.Routes = make([]models.CurrencyContractRoutingItem, 0, 1)
					} else {
						out.Routes = []models.CurrencyContractRoutingItem{}
					}
				} else {
					out.Routes = (out.Routes)[:0]
				}
				for !in.IsDelim(']') {
					var v10 models.CurrencyContractRoutingItem
					(v10).UnmarshalEasyJSON(in)
					out.Routes = append(out.Routes, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "to":
			out.To = string(in.String())
		case "encryptedSecretKeys":
			if in.IsNull() {
				in.Skip()
				out.EncryptedSecretKeys = nil
			} else {
				in.Delim('[')
				if out.EncryptedSecretKeys == nil {
					if !in.IsDelim(']') {
						out.EncryptedSecretKeys = make([]models.AccountSecretKey, 0, 2)
					} else {
						out.EncryptedSecretKeys = []models.AccountSecretKey{}
					}
				} else {
					out.EncryptedSecretKeys = (out.EncryptedSecretKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v11 models.AccountSecretKey
					(v11).UnmarshalEasyJSON(in)
					out.EncryptedSecretKeys = append(out.EncryptedSecretKeys, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyCodeFrom":
			out.CurrencyCodeFrom = int(in.Int())
		case "currencyCodeTo":
			out.CurrencyCodeTo = int(in.Int())
		case "customerIdentifier":
			out.CustomerIdentifier = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "payload":
			out.Payload = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "bankId":
			out.BankId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests74(out *jwriter.Writer, in CrossTransferRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"routes\":"
		out.RawString(prefix[1:])
		if in.Routes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Routes {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"encryptedSecretKeys\":"
		out.RawString(prefix)
		if in.EncryptedSecretKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.EncryptedSecretKeys {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyCodeFrom\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeFrom))
	}
	{
		const prefix string = ",\"currencyCodeTo\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeTo))
	}
	{
		const prefix string = ",\"customerIdentifier\":"
		out.RawString(prefix)
		out.String(string(in.CustomerIdentifier))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossTransferRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossTransferRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossTransferRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossTransferRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests74(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests75(in *jlexer.Lexer, out *CreateInvoiceRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "amount":
			out.Amount = int64(in.Int64())
		case "description":
			out.Description = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		case "payer":
			out.Payer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests75(out *jwriter.Writer, in CreateInvoiceRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix)
		out.String(string(in.Payer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateInvoiceRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateInvoiceRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateInvoiceRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateInvoiceRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests75(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests76(in *jlexer.Lexer, out *CreateCustomerRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identifier":
			out.Identifier = string(in.String())
		case "customerDisplayName":
			out.CustomerDisplayName = string(in.String())
		case "bankId":
			out.BankId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests76(out *jwriter.Writer, in CreateCustomerRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"customerDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.CustomerDisplayName))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCustomerRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCustomerRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCustomerRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCustomerRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests76(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests77(in *jlexer.Lexer, out *CreateCurrencyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = currency_type_enum.CurrencyType(in.Int())
		case "unit":
			out.Unit = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "decimals":
			out.Decimals = int(in.Int())
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]string)
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 string
					v16 = string(in.String())
					(out.Properties)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "enabled":
			out.Enabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests77(out *jwriter.Writer, in CreateCurrencyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"decimals\":"
		out.RawString(prefix)
		out.Int(int(in.Decimals))
	}
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		if in.Properties == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Properties {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateCurrencyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateCurrencyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateCurrencyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateCurrencyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests77(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests78(in *jlexer.Lexer, out *CreateClientBankRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "bankDisplayName":
			out.BankDisplayName = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(map[string]string)
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 string
					v18 = string(in.String())
					(out.Params)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests78(out *jwriter.Writer, in CreateClientBankRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"bankDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.BankDisplayName))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Params {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				out.String(string(v19Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateClientBankRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateClientBankRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateClientBankRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateClientBankRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests78(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests79(in *jlexer.Lexer, out *CreateBankRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		case "name":
			out.Name = string(in.String())
		case "bik":
			out.BIK = string(in.String())
		case "mspId":
			out.MspId = string(in.String())
		case "isOwner":
			out.IsOwner = bool(in.Bool())
		case "conf":
			out.Conf = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests79(out *jwriter.Writer, in CreateBankRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"bik\":"
		out.RawString(prefix)
		out.String(string(in.BIK))
	}
	{
		const prefix string = ",\"mspId\":"
		out.RawString(prefix)
		out.String(string(in.MspId))
	}
	{
		const prefix string = ",\"isOwner\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOwner))
	}
	{
		const prefix string = ",\"conf\":"
		out.RawString(prefix)
		out.String(string(in.Conf))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateBankRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateBankRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateBankRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateBankRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests79(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests80(in *jlexer.Lexer, out *CreateArbitratorRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests80(out *jwriter.Writer, in CreateArbitratorRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateArbitratorRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateArbitratorRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateArbitratorRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateArbitratorRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests80(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests81(in *jlexer.Lexer, out *CreateApplicationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "offerId":
			out.OfferId = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "terms":
			(out.Terms).UnmarshalEasyJSON(in)
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests81(out *jwriter.Writer, in CreateApplicationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"offerId\":"
		out.RawString(prefix)
		out.String(string(in.OfferId))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"terms\":"
		out.RawString(prefix)
		(in.Terms).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateApplicationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateApplicationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateApplicationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateApplicationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests81(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests82(in *jlexer.Lexer, out *CreateAccountRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "juridicalType":
			out.JuridicalType = juridical_type_enum.JuridicalType(in.Int())
		case "identityType":
			out.IdentityType = identity_type_enum.IdentityType(in.Int())
		case "type":
			out.Type = account_type_enum.AccountType(in.Int())
		case "identifiers":
			if in.IsNull() {
				in.Skip()
				out.Identifiers = nil
			} else {
				in.Delim('[')
				if out.Identifiers == nil {
					if !in.IsDelim(']') {
						out.Identifiers = make([]string, 0, 4)
					} else {
						out.Identifiers = []string{}
					}
				} else {
					out.Identifiers = (out.Identifiers)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Identifiers = append(out.Identifiers, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "publicKey":
			out.PublicKey = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests82(out *jwriter.Writer, in CreateAccountRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"juridicalType\":"
		out.RawString(prefix)
		out.Int(int(in.JuridicalType))
	}
	{
		const prefix string = ",\"identityType\":"
		out.RawString(prefix)
		out.Int(int(in.IdentityType))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"identifiers\":"
		out.RawString(prefix)
		if in.Identifiers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Identifiers {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"publicKey\":"
		out.RawString(prefix)
		out.String(string(in.PublicKey))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateAccountRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateAccountRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateAccountRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateAccountRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests82(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests83(in *jlexer.Lexer, out *ContractUpdateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "addressAccountSell":
			out.AddressAccountSell = string(in.String())
		case "addressAccountBuy":
			out.AddressAccountBuy = string(in.String())
		case "addressCommission":
			out.AddressCommission = string(in.String())
		case "currencyCodeSell":
			out.CurrencyCodeSell = int(in.Int())
		case "currencyCodeBuy":
			out.CurrencyCodeBuy = int(in.Int())
		case "currencySymbolSell":
			out.CurrencySymbolSell = string(in.String())
		case "currencySymbolBuy":
			out.CurrencySymbolBuy = string(in.String())
		case "currencyUnitSell":
			out.CurrencyUnitSell = string(in.String())
		case "currencyUnitBuy":
			out.CurrencyUnitBuy = string(in.String())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		case "fractionalCommission":
			out.FractionalCommission = float64(in.Float64())
		case "maxCommission":
			out.MaxCommission = int64(in.Int64())
		case "minAmount":
			out.MinAmount = int64(in.Int64())
		case "maxAmount":
			out.MaxAmount = int64(in.Int64())
		case "startDate":
			out.StartDate = int64(in.Int64())
		case "endDate":
			out.EndDate = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests83(out *jwriter.Writer, in ContractUpdateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressAccountSell\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountSell))
	}
	{
		const prefix string = ",\"addressAccountBuy\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountBuy))
	}
	{
		const prefix string = ",\"addressCommission\":"
		out.RawString(prefix)
		out.String(string(in.AddressCommission))
	}
	{
		const prefix string = ",\"currencyCodeSell\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeSell))
	}
	{
		const prefix string = ",\"currencyCodeBuy\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeBuy))
	}
	{
		const prefix string = ",\"currencySymbolSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolSell))
	}
	{
		const prefix string = ",\"currencySymbolBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolBuy))
	}
	{
		const prefix string = ",\"currencyUnitSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitSell))
	}
	{
		const prefix string = ",\"currencyUnitBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitBuy))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"fractionalCommission\":"
		out.RawString(prefix)
		out.Float64(float64(in.FractionalCommission))
	}
	{
		const prefix string = ",\"maxCommission\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxCommission))
	}
	{
		const prefix string = ",\"minAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinAmount))
	}
	{
		const prefix string = ",\"maxAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxAmount))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractUpdateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContractUpdateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractUpdateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContractUpdateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests83(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests84(in *jlexer.Lexer, out *ContractCreateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "addressAccountSell":
			out.AddressAccountSell = string(in.String())
		case "addressAccountBuy":
			out.AddressAccountBuy = string(in.String())
		case "addressCommission":
			out.AddressCommission = string(in.String())
		case "currencyCodeSell":
			out.CurrencyCodeSell = int(in.Int())
		case "currencyCodeBuy":
			out.CurrencyCodeBuy = int(in.Int())
		case "currencySymbolSell":
			out.CurrencySymbolSell = string(in.String())
		case "currencySymbolBuy":
			out.CurrencySymbolBuy = string(in.String())
		case "currencyUnitSell":
			out.CurrencyUnitSell = string(in.String())
		case "currencyUnitBuy":
			out.CurrencyUnitBuy = string(in.String())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		case "fractionalCommission":
			out.FractionalCommission = float64(in.Float64())
		case "maxCommission":
			out.MaxCommission = int64(in.Int64())
		case "minAmount":
			out.MinAmount = int64(in.Int64())
		case "maxAmount":
			out.MaxAmount = int64(in.Int64())
		case "startDate":
			out.StartDate = int64(in.Int64())
		case "endDate":
			out.EndDate = int64(in.Int64())
		case "bankId":
			out.BankId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests84(out *jwriter.Writer, in ContractCreateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressAccountSell\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountSell))
	}
	{
		const prefix string = ",\"addressAccountBuy\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountBuy))
	}
	{
		const prefix string = ",\"addressCommission\":"
		out.RawString(prefix)
		out.String(string(in.AddressCommission))
	}
	{
		const prefix string = ",\"currencyCodeSell\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeSell))
	}
	{
		const prefix string = ",\"currencyCodeBuy\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeBuy))
	}
	{
		const prefix string = ",\"currencySymbolSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolSell))
	}
	{
		const prefix string = ",\"currencySymbolBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolBuy))
	}
	{
		const prefix string = ",\"currencyUnitSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitSell))
	}
	{
		const prefix string = ",\"currencyUnitBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitBuy))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"fractionalCommission\":"
		out.RawString(prefix)
		out.Float64(float64(in.FractionalCommission))
	}
	{
		const prefix string = ",\"maxCommission\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxCommission))
	}
	{
		const prefix string = ",\"minAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinAmount))
	}
	{
		const prefix string = ",\"maxAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxAmount))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndDate))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractCreateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContractCreateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractCreateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContractCreateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests84(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests85(in *jlexer.Lexer, out *ContractAwardedRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "isLastDepositNoNeedTransfers":
			out.IsLastDepositNoNeedTransfers = bool(in.Bool())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		case "id":
			out.Id = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "addressTo":
			out.AddressTo = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests85(out *jwriter.Writer, in ContractAwardedRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"isLastDepositNoNeedTransfers\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsLastDepositNoNeedTransfers))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractAwardedRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContractAwardedRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractAwardedRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContractAwardedRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests85(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests86(in *jlexer.Lexer, out *ConfirmInvitationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "obligatoryAmount":
			out.ObligatoryAmount = int64(in.Int64())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests86(out *jwriter.Writer, in ConfirmInvitationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"obligatoryAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.ObligatoryAmount))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmInvitationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmInvitationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmInvitationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmInvitationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests86(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests87(in *jlexer.Lexer, out *CompleteSafeDealDepositRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "safeDealId":
			out.SafeDealId = string(in.String())
		case "addressAcceptor":
			out.AddressTo = string(in.String())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests87(out *jwriter.Writer, in CompleteSafeDealDepositRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"safeDealId\":"
		out.RawString(prefix[1:])
		out.String(string(in.SafeDealId))
	}
	{
		const prefix string = ",\"addressAcceptor\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompleteSafeDealDepositRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompleteSafeDealDepositRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompleteSafeDealDepositRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompleteSafeDealDepositRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests87(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests88(in *jlexer.Lexer, out *CheckSignRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgHash":
			out.MsgHash = string(in.String())
		case "exp":
			out.Exp = int64(in.Int64())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests88(out *jwriter.Writer, in CheckSignRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix[1:])
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CheckSignRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CheckSignRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CheckSignRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CheckSignRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests88(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests89(in *jlexer.Lexer, out *CancelContractRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests89(out *jwriter.Writer, in CancelContractRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelContractRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelContractRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelContractRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelContractRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests89(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests90(in *jlexer.Lexer, out *AddRegulatorRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "technicalMsgHash":
			out.TechnicalMsgHash = string(in.String())
		case "technicalAddress":
			out.TechnicalAddress = string(in.String())
		case "technicalSig":
			(out.TechnicalSig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests90(out *jwriter.Writer, in AddRegulatorRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"technicalMsgHash\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalMsgHash))
	}
	{
		const prefix string = ",\"technicalAddress\":"
		out.RawString(prefix)
		out.String(string(in.TechnicalAddress))
	}
	{
		const prefix string = ",\"technicalSig\":"
		out.RawString(prefix)
		(in.TechnicalSig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddRegulatorRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddRegulatorRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddRegulatorRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddRegulatorRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests90(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests91(in *jlexer.Lexer, out *AddIdentifierRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "identifier":
			out.Identifier = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests91(out *jwriter.Writer, in AddIdentifierRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix)
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddIdentifierRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddIdentifierRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddIdentifierRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddIdentifierRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests91(l, v)
}
func easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests92(in *jlexer.Lexer, out *AcceptApplicationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "addressAcceptor":
			out.AddressAcceptor = string(in.String())
		case "msgHash":
			out.MsgHash = string(in.String())
		case "sig":
			(out.Sig).UnmarshalEasyJSON(in)
		case "exp":
			out.Exp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests92(out *jwriter.Writer, in AcceptApplicationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressAcceptor\":"
		out.RawString(prefix)
		out.String(string(in.AddressAcceptor))
	}
	{
		const prefix string = ",\"msgHash\":"
		out.RawString(prefix)
		out.String(string(in.MsgHash))
	}
	{
		const prefix string = ",\"sig\":"
		out.RawString(prefix)
		(in.Sig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AcceptApplicationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AcceptApplicationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson11d1a9baEncodeGithubComSolarLabRUFastpayGoCommonsRequests92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AcceptApplicationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AcceptApplicationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson11d1a9baDecodeGithubComSolarLabRUFastpayGoCommonsRequests92(l, v)
}
