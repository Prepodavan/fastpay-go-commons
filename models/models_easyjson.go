// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	account_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/account-type-enum"
	cross_transaction_payload_enum "github.com/SolarLabRU/fastpay-go-commons/enums/cross-transaction-payload-enum"
	cross_transaction_status_enum "github.com/SolarLabRU/fastpay-go-commons/enums/cross-transaction-status-enum"
	currency_exchange_contracts_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-exchange-contracts-type-enum"
	currency_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/currency-type-enum"
	deal_state_enum "github.com/SolarLabRU/fastpay-go-commons/enums/deal-state-enum"
	deal_transfer_status_enum "github.com/SolarLabRU/fastpay-go-commons/enums/deal-transfer-status-enum"
	identity_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/identity-type-enum"
	invite_status_enum "github.com/SolarLabRU/fastpay-go-commons/enums/invite-status-enum"
	invoice_state_enum "github.com/SolarLabRU/fastpay-go-commons/enums/invoice-state-enum"
	juridical_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/juridical-type-enum"
	member_deal_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/member-deal-type-enum"
	operation_deal_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/operation-deal-type-enum"
	safe_deal_deposit_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/safe-deal-deposit-type-enum"
	state_enum "github.com/SolarLabRU/fastpay-go-commons/enums/state_enum"
	transaction_status_enum "github.com/SolarLabRU/fastpay-go-commons/enums/transaction-status-enum"
	transaction_type_enum "github.com/SolarLabRU/fastpay-go-commons/enums/transaction-type-enum"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels(in *jlexer.Lexer, out *WithdrawResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountAmount":
			out.AccountAmount = int64(in.Int64())
		case "issueBankAmount":
			out.IssueBankAmount = int64(in.Int64())
		case "banksTotalAmount":
			out.BanksTotalAmount = int64(in.Int64())
		case "txId":
			out.TxId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels(out *jwriter.Writer, in WithdrawResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountAmount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AccountAmount))
	}
	{
		const prefix string = ",\"issueBankAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.IssueBankAmount))
	}
	{
		const prefix string = ",\"banksTotalAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.BanksTotalAmount))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WithdrawResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WithdrawResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WithdrawResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WithdrawResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels1(in *jlexer.Lexer, out *TransferSafeDeal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "addressTo":
			out.AddressTo = string(in.String())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		case "amount":
			out.Amount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels1(out *jwriter.Writer, in TransferSafeDeal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferSafeDeal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferSafeDeal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferSafeDeal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferSafeDeal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels2(in *jlexer.Lexer, out *TransferHistoryLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transferHistoryLimitAddress":
			out.TransferHistoryAddress = string(in.String())
		case "yearMonth":
			out.YearMonth = int(in.Int())
		case "day":
			out.Day = int(in.Int())
		case "value":
			out.Value = int64(in.Int64())
		case "txID":
			out.TxID = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels2(out *jwriter.Writer, in TransferHistoryLimit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transferHistoryLimitAddress\":"
		out.RawString(prefix[1:])
		out.String(string(in.TransferHistoryAddress))
	}
	{
		const prefix string = ",\"yearMonth\":"
		out.RawString(prefix)
		out.Int(int(in.YearMonth))
	}
	{
		const prefix string = ",\"day\":"
		out.RawString(prefix)
		out.Int(int(in.Day))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int64(int64(in.Value))
	}
	{
		const prefix string = ",\"txID\":"
		out.RawString(prefix)
		out.String(string(in.TxID))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferHistoryLimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferHistoryLimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferHistoryLimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferHistoryLimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels3(in *jlexer.Lexer, out *TransactionHistoryEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "history":
			(out.History).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels3(out *jwriter.Writer, in TransactionHistoryEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix[1:])
		(in.History).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionHistoryEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionHistoryEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionHistoryEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionHistoryEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels4(in *jlexer.Lexer, out *TransactionHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "txId":
			out.TxId = string(in.String())
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "addressTo":
			out.AddressTo = string(in.String())
		case "txType":
			out.TxType = transaction_type_enum.TransactionType(in.Int())
		case "status":
			out.Status = transaction_status_enum.TransactionStatus(in.Int())
		case "amount":
			out.Amount = int64(in.Int64())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "payload":
			out.Payload = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "senderAddress":
			out.SenderAddress = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "invoiceNumber":
			out.InvoiceNumber = string(in.String())
		case "ordinalNumber":
			out.OrdinalNumber = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels4(out *jwriter.Writer, in TransactionHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TxId))
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"txType\":"
		out.RawString(prefix)
		out.Int(int(in.TxType))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"invoiceNumber\":"
		out.RawString(prefix)
		out.String(string(in.InvoiceNumber))
	}
	{
		const prefix string = ",\"ordinalNumber\":"
		out.RawString(prefix)
		out.Int(int(in.OrdinalNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels5(in *jlexer.Lexer, out *TransactionEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]TransactionHistory, 0, 1)
					} else {
						out.Data = []TransactionHistory{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TransactionHistory
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels5(out *jwriter.Writer, in TransactionEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels6(in *jlexer.Lexer, out *TermsDeal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressInitiator":
			out.AddressInitiator = string(in.String())
		case "currencyInfoInitiator":
			(out.CurrencyInfoInitiator).UnmarshalEasyJSON(in)
		case "amountInitiator":
			out.AmountInitiator = int64(in.Int64())
		case "operationTypeInitiator":
			out.OperationTypeInitiator = operation_deal_type_enum.OperationDealType(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		case "minAmount":
			out.MinAmount = int64(in.Int64())
		case "maxAmount":
			out.MaxAmount = int64(in.Int64())
		case "addressAcceptor":
			out.AddressAcceptor = string(in.String())
		case "currencyInfoAcceptor":
			(out.CurrencyInfoAcceptor).UnmarshalEasyJSON(in)
		case "operationTypeAcceptor":
			out.OperationTypeAcceptor = operation_deal_type_enum.OperationDealType(in.Int())
		case "amountAcceptor":
			out.AmountAcceptor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels6(out *jwriter.Writer, in TermsDeal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressInitiator\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressInitiator))
	}
	{
		const prefix string = ",\"currencyInfoInitiator\":"
		out.RawString(prefix)
		(in.CurrencyInfoInitiator).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"amountInitiator\":"
		out.RawString(prefix)
		out.Int64(int64(in.AmountInitiator))
	}
	{
		const prefix string = ",\"operationTypeInitiator\":"
		out.RawString(prefix)
		out.Int(int(in.OperationTypeInitiator))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"minAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinAmount))
	}
	{
		const prefix string = ",\"maxAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxAmount))
	}
	{
		const prefix string = ",\"addressAcceptor\":"
		out.RawString(prefix)
		out.String(string(in.AddressAcceptor))
	}
	{
		const prefix string = ",\"currencyInfoAcceptor\":"
		out.RawString(prefix)
		(in.CurrencyInfoAcceptor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"operationTypeAcceptor\":"
		out.RawString(prefix)
		out.Int(int(in.OperationTypeAcceptor))
	}
	{
		const prefix string = ",\"amountAcceptor\":"
		out.RawString(prefix)
		out.Int64(int64(in.AmountAcceptor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TermsDeal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TermsDeal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TermsDeal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TermsDeal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels7(in *jlexer.Lexer, out *TermsContractConclude) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "addressTo":
			out.AddressTo = string(in.String())
		case "memberTypeTo":
			out.MemberTypeTo = member_deal_type_enum.MemberDealType(in.Int())
		case "txIds":
			if in.IsNull() {
				in.Skip()
				out.TxIds = nil
			} else {
				in.Delim('[')
				if out.TxIds == nil {
					if !in.IsDelim(']') {
						out.TxIds = make([]string, 0, 4)
					} else {
						out.TxIds = []string{}
					}
				} else {
					out.TxIds = (out.TxIds)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.TxIds = append(out.TxIds, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "isComplete":
			out.IsComplete = bool(in.Bool())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		case "obligatoryAmount":
			out.ObligatoryAmount = int64(in.Int64())
		case "currentAmount":
			out.CurrentAmount = int64(in.Int64())
		case "needAmount":
			out.NeedAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels7(out *jwriter.Writer, in TermsContractConclude) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"memberTypeTo\":"
		out.RawString(prefix)
		out.Int(int(in.MemberTypeTo))
	}
	{
		const prefix string = ",\"txIds\":"
		out.RawString(prefix)
		if in.TxIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.TxIds {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"isComplete\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsComplete))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"obligatoryAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.ObligatoryAmount))
	}
	{
		const prefix string = ",\"currentAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.CurrentAmount))
	}
	{
		const prefix string = ",\"needAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.NeedAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TermsContractConclude) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TermsContractConclude) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TermsContractConclude) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TermsContractConclude) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels8(in *jlexer.Lexer, out *SetBalanceAccountParam) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Address":
			out.Address = string(in.String())
		case "AddressBank":
			out.AddressBank = string(in.String())
		case "Value":
			out.Value = int64(in.Int64())
		case "Operation":
			out.Operation = string(in.String())
		case "TxId":
			out.TxId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels8(out *jwriter.Writer, in SetBalanceAccountParam) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"AddressBank\":"
		out.RawString(prefix)
		out.String(string(in.AddressBank))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Int64(int64(in.Value))
	}
	{
		const prefix string = ",\"Operation\":"
		out.RawString(prefix)
		out.String(string(in.Operation))
	}
	{
		const prefix string = ",\"TxId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetBalanceAccountParam) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetBalanceAccountParam) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetBalanceAccountParam) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetBalanceAccountParam) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels9(in *jlexer.Lexer, out *SafeDealEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels9(out *jwriter.Writer, in SafeDealEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafeDealEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafeDealEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafeDealEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafeDealEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels10(in *jlexer.Lexer, out *SafeDealDeposit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "safeDealId":
			out.SafeDealId = string(in.String())
		case "deposits":
			if in.IsNull() {
				in.Skip()
				out.Deposits = nil
			} else {
				in.Delim('[')
				if out.Deposits == nil {
					if !in.IsDelim(']') {
						out.Deposits = make([]DepositDetails, 0, 1)
					} else {
						out.Deposits = []DepositDetails{}
					}
				} else {
					out.Deposits = (out.Deposits)[:0]
				}
				for !in.IsDelim(']') {
					var v7 DepositDetails
					(v7).UnmarshalEasyJSON(in)
					out.Deposits = append(out.Deposits, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "currentBalance":
			if in.IsNull() {
				in.Skip()
				out.CurrentBalance = nil
			} else {
				in.Delim('[')
				if out.CurrentBalance == nil {
					if !in.IsDelim(']') {
						out.CurrentBalance = make([]SetBalanceAccountParam, 0, 1)
					} else {
						out.CurrentBalance = []SetBalanceAccountParam{}
					}
				} else {
					out.CurrentBalance = (out.CurrentBalance)[:0]
				}
				for !in.IsDelim(']') {
					var v8 SetBalanceAccountParam
					(v8).UnmarshalEasyJSON(in)
					out.CurrentBalance = append(out.CurrentBalance, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "forCompleteBalance":
			if in.IsNull() {
				in.Skip()
				out.ForCompleteBalance = nil
			} else {
				in.Delim('[')
				if out.ForCompleteBalance == nil {
					if !in.IsDelim(']') {
						out.ForCompleteBalance = make([]SetBalanceAccountParam, 0, 1)
					} else {
						out.ForCompleteBalance = []SetBalanceAccountParam{}
					}
				} else {
					out.ForCompleteBalance = (out.ForCompleteBalance)[:0]
				}
				for !in.IsDelim(']') {
					var v9 SetBalanceAccountParam
					(v9).UnmarshalEasyJSON(in)
					out.ForCompleteBalance = append(out.ForCompleteBalance, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "addressTo":
			out.AddressTo = string(in.String())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		case "isComplete":
			out.IsComplete = bool(in.Bool())
		case "currentAmount":
			out.CurrentAmount = int64(in.Int64())
		case "needAmount":
			out.NeedAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels10(out *jwriter.Writer, in SafeDealDeposit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"safeDealId\":"
		out.RawString(prefix[1:])
		out.String(string(in.SafeDealId))
	}
	{
		const prefix string = ",\"deposits\":"
		out.RawString(prefix)
		if in.Deposits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Deposits {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"currentBalance\":"
		out.RawString(prefix)
		if in.CurrentBalance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.CurrentBalance {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"forCompleteBalance\":"
		out.RawString(prefix)
		if in.ForCompleteBalance == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.ForCompleteBalance {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"isComplete\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsComplete))
	}
	{
		const prefix string = ",\"currentAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.CurrentAmount))
	}
	{
		const prefix string = ",\"needAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.NeedAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SafeDealDeposit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SafeDealDeposit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SafeDealDeposit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SafeDealDeposit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels11(in *jlexer.Lexer, out *Participant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		case "memberType":
			out.MemberType = member_deal_type_enum.MemberDealType(in.Int())
		case "created":
			out.Created = int64(in.Int64())
		case "wasInvited":
			out.WasInvited = bool(in.Bool())
		case "transferStatus":
			out.TransferStatus = deal_transfer_status_enum.DealTransferStatus(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels11(out *jwriter.Writer, in Participant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"memberType\":"
		out.RawString(prefix)
		out.Int(int(in.MemberType))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"wasInvited\":"
		out.RawString(prefix)
		out.Bool(bool(in.WasInvited))
	}
	{
		const prefix string = ",\"transferStatus\":"
		out.RawString(prefix)
		out.Int(int(in.TransferStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Participant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Participant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Participant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Participant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels12(in *jlexer.Lexer, out *LimitsAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "daily":
			out.Daily = int64(in.Int64())
		case "monthly":
			out.Monthly = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels12(out *jwriter.Writer, in LimitsAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"daily\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Daily))
	}
	{
		const prefix string = ",\"monthly\":"
		out.RawString(prefix)
		out.Int64(int64(in.Monthly))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LimitsAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LimitsAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LimitsAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LimitsAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels13(in *jlexer.Lexer, out *InvoiceEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels13(out *jwriter.Writer, in InvoiceEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InvoiceEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InvoiceEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InvoiceEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InvoiceEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels14(in *jlexer.Lexer, out *Invoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "amount":
			out.Amount = int64(in.Int64())
		case "description":
			out.Description = string(in.String())
		case "recipient":
			out.Recipient = string(in.String())
		case "payer":
			out.Payer = string(in.String())
		case "state":
			out.State = invoice_state_enum.InvoiceState(in.Int())
		case "created":
			out.Created = int64(in.Int64())
		case "updated":
			out.Updated = int64(in.Int64())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "owner":
			out.Owner = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels14(out *jwriter.Writer, in Invoice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.String(string(in.Number))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"recipient\":"
		out.RawString(prefix)
		out.String(string(in.Recipient))
	}
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix)
		out.String(string(in.Payer))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Int64(int64(in.Updated))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels15(in *jlexer.Lexer, out *Invitation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "inviteAddress":
			out.InviteAddress = string(in.String())
		case "inviteCurrencyInfo":
			(out.InviteCurrencyInfo).UnmarshalEasyJSON(in)
		case "created":
			out.Created = int64(in.Int64())
		case "inviteStatus":
			out.InviteStatus = invite_status_enum.InviteStatus(in.Int())
		case "memberType":
			out.MemberType = member_deal_type_enum.MemberDealType(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels15(out *jwriter.Writer, in Invitation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"inviteAddress\":"
		out.RawString(prefix)
		out.String(string(in.InviteAddress))
	}
	{
		const prefix string = ",\"inviteCurrencyInfo\":"
		out.RawString(prefix)
		(in.InviteCurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"inviteStatus\":"
		out.RawString(prefix)
		out.Int(int(in.InviteStatus))
	}
	{
		const prefix string = ",\"memberType\":"
		out.RawString(prefix)
		out.Int(int(in.MemberType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invitation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invitation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invitation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invitation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels16(in *jlexer.Lexer, out *ExecutedTransactionCurrencyExchangeContractItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "amount":
			out.Amount = int64(in.Int64())
		case "payload":
			out.Payload = cross_transaction_payload_enum.CrossTransactionPayload(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels16(out *jwriter.Writer, in ExecutedTransactionCurrencyExchangeContractItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix[1:])
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecutedTransactionCurrencyExchangeContractItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecutedTransactionCurrencyExchangeContractItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecutedTransactionCurrencyExchangeContractItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecutedTransactionCurrencyExchangeContractItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels16(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels17(in *jlexer.Lexer, out *DepositedBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issueBankAddress":
			out.IssueBankAddress = string(in.String())
		case "banksBalance":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BanksBalance = make(map[string]int64)
				} else {
					out.BanksBalance = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 int64
					v16 = int64(in.Int64())
					(out.BanksBalance)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "accountAmount":
			out.AccountAmount = int64(in.Int64())
		case "issueBankAmount":
			out.IssueBankAmount = int64(in.Int64())
		case "banksTotalAmount":
			out.BanksTotalAmount = int64(in.Int64())
		case "txId":
			out.TxId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels17(out *jwriter.Writer, in DepositedBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issueBankAddress\":"
		out.RawString(prefix[1:])
		out.String(string(in.IssueBankAddress))
	}
	{
		const prefix string = ",\"banksBalance\":"
		out.RawString(prefix)
		if in.BanksBalance == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.BanksBalance {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.Int64(int64(v17Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"accountAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountAmount))
	}
	{
		const prefix string = ",\"issueBankAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.IssueBankAmount))
	}
	{
		const prefix string = ",\"banksTotalAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.BanksTotalAmount))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DepositedBalance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DepositedBalance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DepositedBalance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DepositedBalance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels17(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels18(in *jlexer.Lexer, out *DepositSafeDealHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "addressTo":
			out.AddressTo = string(in.String())
		case "currencyInfo":
			(out.CurrencyInfo).UnmarshalEasyJSON(in)
		case "amount":
			out.Amount = int64(in.Int64())
		case "type":
			out.Type = safe_deal_deposit_type_enum.SafeDealDepositType(in.Int())
		case "txID":
			out.TxID = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "ordinalNumber":
			out.OrdinalNumber = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels18(out *jwriter.Writer, in DepositSafeDealHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix)
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"currencyInfo\":"
		out.RawString(prefix)
		(in.CurrencyInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"txID\":"
		out.RawString(prefix)
		out.String(string(in.TxID))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"ordinalNumber\":"
		out.RawString(prefix)
		out.Int(int(in.OrdinalNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DepositSafeDealHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DepositSafeDealHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DepositSafeDealHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DepositSafeDealHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels18(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels19(in *jlexer.Lexer, out *DepositDetails) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "txID":
			out.TxID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels19(out *jwriter.Writer, in DepositDetails) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"txID\":"
		out.RawString(prefix)
		out.String(string(in.TxID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DepositDetails) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DepositDetails) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DepositDetails) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DepositDetails) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels19(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels20(in *jlexer.Lexer, out *DealResponseData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "offerId":
			out.OfferId = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "state":
			out.State = deal_state_enum.DealState(in.Int())
		case "terms":
			(out.Terms).UnmarshalEasyJSON(in)
		case "actualTerms":
			(out.ActualTerms).UnmarshalEasyJSON(in)
		case "invitations":
			if in.IsNull() {
				in.Skip()
				out.Invitations = nil
			} else {
				in.Delim('[')
				if out.Invitations == nil {
					if !in.IsDelim(']') {
						out.Invitations = make([]Invitation, 0, 1)
					} else {
						out.Invitations = []Invitation{}
					}
				} else {
					out.Invitations = (out.Invitations)[:0]
				}
				for !in.IsDelim(']') {
					var v18 Invitation
					(v18).UnmarshalEasyJSON(in)
					out.Invitations = append(out.Invitations, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "participants":
			if in.IsNull() {
				in.Skip()
				out.Participants = nil
			} else {
				in.Delim('[')
				if out.Participants == nil {
					if !in.IsDelim(']') {
						out.Participants = make([]Participant, 0, 1)
					} else {
						out.Participants = []Participant{}
					}
				} else {
					out.Participants = (out.Participants)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Participant
					(v19).UnmarshalEasyJSON(in)
					out.Participants = append(out.Participants, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "termsContractConclude":
			if in.IsNull() {
				in.Skip()
				out.TermsContractConclude = nil
			} else {
				in.Delim('[')
				if out.TermsContractConclude == nil {
					if !in.IsDelim(']') {
						out.TermsContractConclude = make([]TermsContractConclude, 0, 1)
					} else {
						out.TermsContractConclude = []TermsContractConclude{}
					}
				} else {
					out.TermsContractConclude = (out.TermsContractConclude)[:0]
				}
				for !in.IsDelim(']') {
					var v20 TermsContractConclude
					(v20).UnmarshalEasyJSON(in)
					out.TermsContractConclude = append(out.TermsContractConclude, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "necessaryTransfers":
			if in.IsNull() {
				in.Skip()
				out.NecessaryTransfers = nil
			} else {
				in.Delim('[')
				if out.NecessaryTransfers == nil {
					if !in.IsDelim(']') {
						out.NecessaryTransfers = make([]TransferSafeDeal, 0, 1)
					} else {
						out.NecessaryTransfers = []TransferSafeDeal{}
					}
				} else {
					out.NecessaryTransfers = (out.NecessaryTransfers)[:0]
				}
				for !in.IsDelim(']') {
					var v21 TransferSafeDeal
					(v21).UnmarshalEasyJSON(in)
					out.NecessaryTransfers = append(out.NecessaryTransfers, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "depositHistory":
			if in.IsNull() {
				in.Skip()
				out.DepositHistory = nil
			} else {
				in.Delim('[')
				if out.DepositHistory == nil {
					if !in.IsDelim(']') {
						out.DepositHistory = make([]DepositSafeDealHistory, 0, 1)
					} else {
						out.DepositHistory = []DepositSafeDealHistory{}
					}
				} else {
					out.DepositHistory = (out.DepositHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v22 DepositSafeDealHistory
					(v22).UnmarshalEasyJSON(in)
					out.DepositHistory = append(out.DepositHistory, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels20(out *jwriter.Writer, in DealResponseData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"offerId\":"
		out.RawString(prefix)
		out.String(string(in.OfferId))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"terms\":"
		out.RawString(prefix)
		(in.Terms).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"actualTerms\":"
		out.RawString(prefix)
		(in.ActualTerms).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"invitations\":"
		out.RawString(prefix)
		if in.Invitations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Invitations {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Participants {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"termsContractConclude\":"
		out.RawString(prefix)
		if in.TermsContractConclude == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.TermsContractConclude {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"necessaryTransfers\":"
		out.RawString(prefix)
		if in.NecessaryTransfers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.NecessaryTransfers {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"depositHistory\":"
		out.RawString(prefix)
		if in.DepositHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.DepositHistory {
				if v31 > 0 {
					out.RawByte(',')
				}
				(v32).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DealResponseData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DealResponseData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DealResponseData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DealResponseData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels20(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels21(in *jlexer.Lexer, out *Deal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "offerId":
			out.OfferId = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "state":
			out.State = deal_state_enum.DealState(in.Int())
		case "terms":
			(out.Terms).UnmarshalEasyJSON(in)
		case "actualTerms":
			(out.ActualTerms).UnmarshalEasyJSON(in)
		case "invitations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Invitations = make(map[string]*Invitation)
				} else {
					out.Invitations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v33 *Invitation
					if in.IsNull() {
						in.Skip()
						v33 = nil
					} else {
						if v33 == nil {
							v33 = new(Invitation)
						}
						(*v33).UnmarshalEasyJSON(in)
					}
					(out.Invitations)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		case "participants":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Participants = make(map[string]*Participant)
				} else {
					out.Participants = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v34 *Participant
					if in.IsNull() {
						in.Skip()
						v34 = nil
					} else {
						if v34 == nil {
							v34 = new(Participant)
						}
						(*v34).UnmarshalEasyJSON(in)
					}
					(out.Participants)[key] = v34
					in.WantComma()
				}
				in.Delim('}')
			}
		case "termsContractConclude":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TermsContractConclude = make(map[string]*TermsContractConclude)
				} else {
					out.TermsContractConclude = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v35 *TermsContractConclude
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						if v35 == nil {
							v35 = new(TermsContractConclude)
						}
						(*v35).UnmarshalEasyJSON(in)
					}
					(out.TermsContractConclude)[key] = v35
					in.WantComma()
				}
				in.Delim('}')
			}
		case "necessaryTransfers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NecessaryTransfers = make(map[string]*TransferSafeDeal)
				} else {
					out.NecessaryTransfers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v36 *TransferSafeDeal
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(TransferSafeDeal)
						}
						(*v36).UnmarshalEasyJSON(in)
					}
					(out.NecessaryTransfers)[key] = v36
					in.WantComma()
				}
				in.Delim('}')
			}
		case "depositHistory":
			if in.IsNull() {
				in.Skip()
				out.DepositHistory = nil
			} else {
				in.Delim('[')
				if out.DepositHistory == nil {
					if !in.IsDelim(']') {
						out.DepositHistory = make([]DepositSafeDealHistory, 0, 1)
					} else {
						out.DepositHistory = []DepositSafeDealHistory{}
					}
				} else {
					out.DepositHistory = (out.DepositHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v37 DepositSafeDealHistory
					(v37).UnmarshalEasyJSON(in)
					out.DepositHistory = append(out.DepositHistory, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels21(out *jwriter.Writer, in Deal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"offerId\":"
		out.RawString(prefix)
		out.String(string(in.OfferId))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"terms\":"
		out.RawString(prefix)
		(in.Terms).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"actualTerms\":"
		out.RawString(prefix)
		(in.ActualTerms).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"invitations\":"
		out.RawString(prefix)
		if in.Invitations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v38First := true
			for v38Name, v38Value := range in.Invitations {
				if v38First {
					v38First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v38Name))
				out.RawByte(':')
				if v38Value == nil {
					out.RawString("null")
				} else {
					(*v38Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"participants\":"
		out.RawString(prefix)
		if in.Participants == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v39First := true
			for v39Name, v39Value := range in.Participants {
				if v39First {
					v39First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v39Name))
				out.RawByte(':')
				if v39Value == nil {
					out.RawString("null")
				} else {
					(*v39Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"termsContractConclude\":"
		out.RawString(prefix)
		if in.TermsContractConclude == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v40First := true
			for v40Name, v40Value := range in.TermsContractConclude {
				if v40First {
					v40First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v40Name))
				out.RawByte(':')
				if v40Value == nil {
					out.RawString("null")
				} else {
					(*v40Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"necessaryTransfers\":"
		out.RawString(prefix)
		if in.NecessaryTransfers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v41First := true
			for v41Name, v41Value := range in.NecessaryTransfers {
				if v41First {
					v41First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v41Name))
				out.RawByte(':')
				if v41Value == nil {
					out.RawString("null")
				} else {
					(*v41Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"depositHistory\":"
		out.RawString(prefix)
		if in.DepositHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.DepositHistory {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Deal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Deal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Deal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Deal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels21(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels22(in *jlexer.Lexer, out *CustomerEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels22(out *jwriter.Writer, in CustomerEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomerEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomerEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomerEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomerEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels22(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels23(in *jlexer.Lexer, out *Customer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "identifier":
			out.Identifier = string(in.String())
		case "bankId":
			out.BankId = string(in.String())
		case "bankDisplayName":
			out.BankDisplayName = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "customerDisplayName":
			out.CustomerDisplayName = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels23(out *jwriter.Writer, in Customer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"identifier\":"
		out.RawString(prefix[1:])
		out.String(string(in.Identifier))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"bankDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.BankDisplayName))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	{
		const prefix string = ",\"customerDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.CustomerDisplayName))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Customer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Customer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Customer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Customer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels23(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels24(in *jlexer.Lexer, out *CurrencyExchangeContractMutable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "addressAccountSell":
			out.AddressAccountSell = string(in.String())
		case "addressAccountBuy":
			out.AddressAccountBuy = string(in.String())
		case "addressCommission":
			out.AddressCommission = string(in.String())
		case "currencyCodeSell":
			out.CurrencyCodeSell = int(in.Int())
		case "currencyCodeBuy":
			out.CurrencyCodeBuy = int(in.Int())
		case "currencySymbolSell":
			out.CurrencySymbolSell = string(in.String())
		case "currencySymbolBuy":
			out.CurrencySymbolBuy = string(in.String())
		case "currencyUnitSell":
			out.CurrencyUnitSell = string(in.String())
		case "currencyUnitBuy":
			out.CurrencyUnitBuy = string(in.String())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		case "fractionalCommission":
			out.FractionalCommission = float64(in.Float64())
		case "maxCommission":
			out.MaxCommission = int64(in.Int64())
		case "minAmount":
			out.MinAmount = int64(in.Int64())
		case "maxAmount":
			out.MaxAmount = int64(in.Int64())
		case "startDate":
			out.StartDate = int64(in.Int64())
		case "endDate":
			out.EndDate = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels24(out *jwriter.Writer, in CurrencyExchangeContractMutable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressAccountSell\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountSell))
	}
	{
		const prefix string = ",\"addressAccountBuy\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountBuy))
	}
	{
		const prefix string = ",\"addressCommission\":"
		out.RawString(prefix)
		out.String(string(in.AddressCommission))
	}
	{
		const prefix string = ",\"currencyCodeSell\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeSell))
	}
	{
		const prefix string = ",\"currencyCodeBuy\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeBuy))
	}
	{
		const prefix string = ",\"currencySymbolSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolSell))
	}
	{
		const prefix string = ",\"currencySymbolBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolBuy))
	}
	{
		const prefix string = ",\"currencyUnitSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitSell))
	}
	{
		const prefix string = ",\"currencyUnitBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitBuy))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"fractionalCommission\":"
		out.RawString(prefix)
		out.Float64(float64(in.FractionalCommission))
	}
	{
		const prefix string = ",\"maxCommission\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxCommission))
	}
	{
		const prefix string = ",\"minAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinAmount))
	}
	{
		const prefix string = ",\"maxAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxAmount))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyExchangeContractMutable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyExchangeContractMutable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyExchangeContractMutable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyExchangeContractMutable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels24(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels25(in *jlexer.Lexer, out *CurrencyExchangeContract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "bankDisplayName":
			out.BankDisplayName = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "addressAccountSell":
			out.AddressAccountSell = string(in.String())
		case "addressAccountBuy":
			out.AddressAccountBuy = string(in.String())
		case "addressCommission":
			out.AddressCommission = string(in.String())
		case "currencyCodeSell":
			out.CurrencyCodeSell = int(in.Int())
		case "currencyCodeBuy":
			out.CurrencyCodeBuy = int(in.Int())
		case "currencySymbolSell":
			out.CurrencySymbolSell = string(in.String())
		case "currencySymbolBuy":
			out.CurrencySymbolBuy = string(in.String())
		case "currencyUnitSell":
			out.CurrencyUnitSell = string(in.String())
		case "currencyUnitBuy":
			out.CurrencyUnitBuy = string(in.String())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		case "fractionalCommission":
			out.FractionalCommission = float64(in.Float64())
		case "maxCommission":
			out.MaxCommission = int64(in.Int64())
		case "minAmount":
			out.MinAmount = int64(in.Int64())
		case "maxAmount":
			out.MaxAmount = int64(in.Int64())
		case "startDate":
			out.StartDate = int64(in.Int64())
		case "endDate":
			out.EndDate = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels25(out *jwriter.Writer, in CurrencyExchangeContract) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"bankDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.BankDisplayName))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressAccountSell\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountSell))
	}
	{
		const prefix string = ",\"addressAccountBuy\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountBuy))
	}
	{
		const prefix string = ",\"addressCommission\":"
		out.RawString(prefix)
		out.String(string(in.AddressCommission))
	}
	{
		const prefix string = ",\"currencyCodeSell\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeSell))
	}
	{
		const prefix string = ",\"currencyCodeBuy\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeBuy))
	}
	{
		const prefix string = ",\"currencySymbolSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolSell))
	}
	{
		const prefix string = ",\"currencySymbolBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolBuy))
	}
	{
		const prefix string = ",\"currencyUnitSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitSell))
	}
	{
		const prefix string = ",\"currencyUnitBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitBuy))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"fractionalCommission\":"
		out.RawString(prefix)
		out.Float64(float64(in.FractionalCommission))
	}
	{
		const prefix string = ",\"maxCommission\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxCommission))
	}
	{
		const prefix string = ",\"minAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinAmount))
	}
	{
		const prefix string = ",\"maxAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxAmount))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyExchangeContract) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyExchangeContract) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyExchangeContract) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyExchangeContract) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels25(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels26(in *jlexer.Lexer, out *CurrencyEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels26(out *jwriter.Writer, in CurrencyEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels26(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels27(in *jlexer.Lexer, out *CurrencyDealInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "unit":
			out.Unit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels27(out *jwriter.Writer, in CurrencyDealInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyDealInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyDealInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyDealInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyDealInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels27(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels28(in *jlexer.Lexer, out *CurrencyContractRoutingItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amountInput":
			out.AmountInput = int64(in.Int64())
		case "amountOutput":
			out.AmountOutput = int64(in.Int64())
		case "bankId":
			out.BankId = string(in.String())
		case "bankDisplayName":
			out.BankDisplayName = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "addressAccountSell":
			out.AddressAccountSell = string(in.String())
		case "addressAccountBuy":
			out.AddressAccountBuy = string(in.String())
		case "addressCommission":
			out.AddressCommission = string(in.String())
		case "currencyCodeSell":
			out.CurrencyCodeSell = int(in.Int())
		case "currencyCodeBuy":
			out.CurrencyCodeBuy = int(in.Int())
		case "currencySymbolSell":
			out.CurrencySymbolSell = string(in.String())
		case "currencySymbolBuy":
			out.CurrencySymbolBuy = string(in.String())
		case "currencyUnitSell":
			out.CurrencyUnitSell = string(in.String())
		case "currencyUnitBuy":
			out.CurrencyUnitBuy = string(in.String())
		case "type":
			out.Type = currency_exchange_contracts_type_enum.CurrencyExchangeContractsType(in.Int())
		case "price":
			out.Price = float64(in.Float64())
		case "fractionalCommission":
			out.FractionalCommission = float64(in.Float64())
		case "maxCommission":
			out.MaxCommission = int64(in.Int64())
		case "minAmount":
			out.MinAmount = int64(in.Int64())
		case "maxAmount":
			out.MaxAmount = int64(in.Int64())
		case "startDate":
			out.StartDate = int64(in.Int64())
		case "endDate":
			out.EndDate = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels28(out *jwriter.Writer, in CurrencyContractRoutingItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amountInput\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.AmountInput))
	}
	{
		const prefix string = ",\"amountOutput\":"
		out.RawString(prefix)
		out.Int64(int64(in.AmountOutput))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"bankDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.BankDisplayName))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"addressAccountSell\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountSell))
	}
	{
		const prefix string = ",\"addressAccountBuy\":"
		out.RawString(prefix)
		out.String(string(in.AddressAccountBuy))
	}
	{
		const prefix string = ",\"addressCommission\":"
		out.RawString(prefix)
		out.String(string(in.AddressCommission))
	}
	{
		const prefix string = ",\"currencyCodeSell\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeSell))
	}
	{
		const prefix string = ",\"currencyCodeBuy\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeBuy))
	}
	{
		const prefix string = ",\"currencySymbolSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolSell))
	}
	{
		const prefix string = ",\"currencySymbolBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencySymbolBuy))
	}
	{
		const prefix string = ",\"currencyUnitSell\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitSell))
	}
	{
		const prefix string = ",\"currencyUnitBuy\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyUnitBuy))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"fractionalCommission\":"
		out.RawString(prefix)
		out.Float64(float64(in.FractionalCommission))
	}
	{
		const prefix string = ",\"maxCommission\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxCommission))
	}
	{
		const prefix string = ",\"minAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MinAmount))
	}
	{
		const prefix string = ",\"maxAmount\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxAmount))
	}
	{
		const prefix string = ",\"startDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartDate))
	}
	{
		const prefix string = ",\"endDate\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyContractRoutingItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyContractRoutingItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyContractRoutingItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyContractRoutingItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels28(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels29(in *jlexer.Lexer, out *Currency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "type":
			out.Type = currency_type_enum.CurrencyType(in.Int())
		case "unit":
			out.Unit = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "decimals":
			out.Decimals = int(in.Int())
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]string)
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v44 string
					v44 = string(in.String())
					(out.Properties)[key] = v44
					in.WantComma()
				}
				in.Delim('}')
			}
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels29(out *jwriter.Writer, in Currency) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"decimals\":"
		out.RawString(prefix)
		out.Int(int(in.Decimals))
	}
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		if in.Properties == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v45First := true
			for v45Name, v45Value := range in.Properties {
				if v45First {
					v45First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v45Name))
				out.RawByte(':')
				out.String(string(v45Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Enabled))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels29(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels30(in *jlexer.Lexer, out *CrossTransactionHistoryEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "history":
			(out.Data).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels30(out *jwriter.Writer, in CrossTransactionHistoryEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossTransactionHistoryEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossTransactionHistoryEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossTransactionHistoryEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossTransactionHistoryEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels30(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels31(in *jlexer.Lexer, out *CrossTransactionHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "routes":
			if in.IsNull() {
				in.Skip()
				out.Routes = nil
			} else {
				in.Delim('[')
				if out.Routes == nil {
					if !in.IsDelim(']') {
						out.Routes = make([]CurrencyContractRoutingItem, 0, 1)
					} else {
						out.Routes = []CurrencyContractRoutingItem{}
					}
				} else {
					out.Routes = (out.Routes)[:0]
				}
				for !in.IsDelim(']') {
					var v46 CurrencyContractRoutingItem
					(v46).UnmarshalEasyJSON(in)
					out.Routes = append(out.Routes, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "addressFrom":
			out.AddressFrom = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "transactionId":
			out.TransactionId = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "payload":
			out.Payload = string(in.String())
		case "to":
			out.To = string(in.String())
		case "encryptedSecretKeys":
			if in.IsNull() {
				in.Skip()
				out.EncryptedSecretKeys = nil
			} else {
				in.Delim('[')
				if out.EncryptedSecretKeys == nil {
					if !in.IsDelim(']') {
						out.EncryptedSecretKeys = make([]AccountSecretKey, 0, 2)
					} else {
						out.EncryptedSecretKeys = []AccountSecretKey{}
					}
				} else {
					out.EncryptedSecretKeys = (out.EncryptedSecretKeys)[:0]
				}
				for !in.IsDelim(']') {
					var v47 AccountSecretKey
					(v47).UnmarshalEasyJSON(in)
					out.EncryptedSecretKeys = append(out.EncryptedSecretKeys, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "currencyCodeFrom":
			out.CurrencyCodeFrom = int(in.Int())
		case "currencyCodeTo":
			out.CurrencyCodeTo = int(in.Int())
		case "customerIdentifier":
			out.CustomerIdentifier = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "details":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				in.Delim('[')
				if out.Details == nil {
					if !in.IsDelim(']') {
						out.Details = make([]ExecutedTransactionCurrencyExchangeContractItem, 0, 1)
					} else {
						out.Details = []ExecutedTransactionCurrencyExchangeContractItem{}
					}
				} else {
					out.Details = (out.Details)[:0]
				}
				for !in.IsDelim(']') {
					var v48 ExecutedTransactionCurrencyExchangeContractItem
					(v48).UnmarshalEasyJSON(in)
					out.Details = append(out.Details, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "senderAddress":
			out.SenderAddress = string(in.String())
		case "bankId":
			out.BankId = string(in.String())
		case "status":
			out.Status = cross_transaction_status_enum.CrossTransactionStatus(in.Int())
		case "txId":
			out.TxId = string(in.String())
		case "errorCode":
			out.ErrorCode = int(in.Int())
		case "errorMessage":
			out.ErrorMessage = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "transactionHistories":
			if in.IsNull() {
				in.Skip()
				out.TransactionHistories = nil
			} else {
				in.Delim('[')
				if out.TransactionHistories == nil {
					if !in.IsDelim(']') {
						out.TransactionHistories = make([]TransactionHistory, 0, 1)
					} else {
						out.TransactionHistories = []TransactionHistory{}
					}
				} else {
					out.TransactionHistories = (out.TransactionHistories)[:0]
				}
				for !in.IsDelim(']') {
					var v49 TransactionHistory
					(v49).UnmarshalEasyJSON(in)
					out.TransactionHistories = append(out.TransactionHistories, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels31(out *jwriter.Writer, in CrossTransactionHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"routes\":"
		out.RawString(prefix[1:])
		if in.Routes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Routes {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"addressFrom\":"
		out.RawString(prefix)
		out.String(string(in.AddressFrom))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"transactionId\":"
		out.RawString(prefix)
		out.String(string(in.TransactionId))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"encryptedSecretKeys\":"
		out.RawString(prefix)
		if in.EncryptedSecretKeys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.EncryptedSecretKeys {
				if v52 > 0 {
					out.RawByte(',')
				}
				(v53).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"currencyCodeFrom\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeFrom))
	}
	{
		const prefix string = ",\"currencyCodeTo\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCodeTo))
	}
	{
		const prefix string = ",\"customerIdentifier\":"
		out.RawString(prefix)
		out.String(string(in.CustomerIdentifier))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	{
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		if in.Details == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.Details {
				if v54 > 0 {
					out.RawByte(',')
				}
				(v55).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"senderAddress\":"
		out.RawString(prefix)
		out.String(string(in.SenderAddress))
	}
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix)
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"txId\":"
		out.RawString(prefix)
		out.String(string(in.TxId))
	}
	{
		const prefix string = ",\"errorCode\":"
		out.RawString(prefix)
		out.Int(int(in.ErrorCode))
	}
	{
		const prefix string = ",\"errorMessage\":"
		out.RawString(prefix)
		out.String(string(in.ErrorMessage))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"transactionHistories\":"
		out.RawString(prefix)
		if in.TransactionHistories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.TransactionHistories {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossTransactionHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossTransactionHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossTransactionHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossTransactionHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels31(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels32(in *jlexer.Lexer, out *CrossTransactionEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels32(out *jwriter.Writer, in CrossTransactionEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CrossTransactionEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CrossTransactionEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CrossTransactionEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CrossTransactionEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels32(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels33(in *jlexer.Lexer, out *ContractEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels33(out *jwriter.Writer, in ContractEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContractEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContractEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels33(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels34(in *jlexer.Lexer, out *ClientBankEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels34(out *jwriter.Writer, in ClientBankEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientBankEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientBankEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientBankEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientBankEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels34(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels35(in *jlexer.Lexer, out *ClientBank) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bankId":
			out.BankId = string(in.String())
		case "bankDisplayName":
			out.BankDisplayName = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "params":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Params = make(map[string]string)
				} else {
					out.Params = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v58 string
					v58 = string(in.String())
					(out.Params)[key] = v58
					in.WantComma()
				}
				in.Delim('}')
			}
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels35(out *jwriter.Writer, in ClientBank) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bankId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BankId))
	}
	{
		const prefix string = ",\"bankDisplayName\":"
		out.RawString(prefix)
		out.String(string(in.BankDisplayName))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"countryCode\":"
		out.RawString(prefix)
		out.String(string(in.CountryCode))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		if in.Params == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v59First := true
			for v59Name, v59Value := range in.Params {
				if v59First {
					v59First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v59Name))
				out.RawByte(':')
				out.String(string(v59Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientBank) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientBank) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientBank) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientBank) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels35(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels36(in *jlexer.Lexer, out *ClearingInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "banks":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Banks = make(map[string]*ClearingBank)
				} else {
					out.Banks = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v60 *ClearingBank
					if in.IsNull() {
						in.Skip()
						v60 = nil
					} else {
						if v60 == nil {
							v60 = new(ClearingBank)
						}
						(*v60).UnmarshalEasyJSON(in)
					}
					(out.Banks)[key] = v60
					in.WantComma()
				}
				in.Delim('}')
			}
		case "owner":
			out.Owner = string(in.String())
		case "claims":
			out.Claims = int64(in.Int64())
		case "liabilities":
			out.Liabilities = int64(in.Int64())
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]ClaimsItem, 0, 1)
					} else {
						out.History = []ClaimsItem{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v61 ClaimsItem
					(v61).UnmarshalEasyJSON(in)
					out.History = append(out.History, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "netting":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Netting = make(map[string]int64)
				} else {
					out.Netting = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v62 int64
					v62 = int64(in.Int64())
					(out.Netting)[key] = v62
					in.WantComma()
				}
				in.Delim('}')
			}
		case "procedure":
			if in.IsNull() {
				in.Skip()
				out.Procedure = nil
			} else {
				in.Delim('[')
				if out.Procedure == nil {
					if !in.IsDelim(']') {
						out.Procedure = make([]ClaimsItem, 0, 1)
					} else {
						out.Procedure = []ClaimsItem{}
					}
				} else {
					out.Procedure = (out.Procedure)[:0]
				}
				for !in.IsDelim(']') {
					var v63 ClaimsItem
					(v63).UnmarshalEasyJSON(in)
					out.Procedure = append(out.Procedure, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			out.Created = int64(in.Int64())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels36(out *jwriter.Writer, in ClearingInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"banks\":"
		out.RawString(prefix)
		if in.Banks == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v64First := true
			for v64Name, v64Value := range in.Banks {
				if v64First {
					v64First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v64Name))
				out.RawByte(':')
				if v64Value == nil {
					out.RawString("null")
				} else {
					(*v64Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix)
		out.Int64(int64(in.Claims))
	}
	{
		const prefix string = ",\"liabilities\":"
		out.RawString(prefix)
		out.Int64(int64(in.Liabilities))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.History {
				if v65 > 0 {
					out.RawByte(',')
				}
				(v66).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"netting\":"
		out.RawString(prefix)
		if in.Netting == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v67First := true
			for v67Name, v67Value := range in.Netting {
				if v67First {
					v67First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v67Name))
				out.RawByte(':')
				out.Int64(int64(v67Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"procedure\":"
		out.RawString(prefix)
		if in.Procedure == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Procedure {
				if v68 > 0 {
					out.RawByte(',')
				}
				(v69).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels36(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels37(in *jlexer.Lexer, out *ClearingEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels37(out *jwriter.Writer, in ClearingEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels37(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels38(in *jlexer.Lexer, out *ClearingData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "claims":
			out.Claims = int64(in.Int64())
		case "liabilities":
			out.Liabilities = int64(in.Int64())
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]ClaimsItemResponse, 0, 1)
					} else {
						out.History = []ClaimsItemResponse{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v70 ClaimsItemResponse
					(v70).UnmarshalEasyJSON(in)
					out.History = append(out.History, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "netting":
			if in.IsNull() {
				in.Skip()
				out.Netting = nil
			} else {
				in.Delim('[')
				if out.Netting == nil {
					if !in.IsDelim(']') {
						out.Netting = make([]AmountOfBank, 0, 2)
					} else {
						out.Netting = []AmountOfBank{}
					}
				} else {
					out.Netting = (out.Netting)[:0]
				}
				for !in.IsDelim(']') {
					var v71 AmountOfBank
					(v71).UnmarshalEasyJSON(in)
					out.Netting = append(out.Netting, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "procedure":
			if in.IsNull() {
				in.Skip()
				out.Procedure = nil
			} else {
				in.Delim('[')
				if out.Procedure == nil {
					if !in.IsDelim(']') {
						out.Procedure = make([]ClaimsItemResponse, 0, 1)
					} else {
						out.Procedure = []ClaimsItemResponse{}
					}
				} else {
					out.Procedure = (out.Procedure)[:0]
				}
				for !in.IsDelim(']') {
					var v72 ClaimsItemResponse
					(v72).UnmarshalEasyJSON(in)
					out.Procedure = append(out.Procedure, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created":
			out.Created = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels38(out *jwriter.Writer, in ClearingData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix)
		out.Int64(int64(in.Claims))
	}
	{
		const prefix string = ",\"liabilities\":"
		out.RawString(prefix)
		out.Int64(int64(in.Liabilities))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v73, v74 := range in.History {
				if v73 > 0 {
					out.RawByte(',')
				}
				(v74).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"netting\":"
		out.RawString(prefix)
		if in.Netting == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v75, v76 := range in.Netting {
				if v75 > 0 {
					out.RawByte(',')
				}
				(v76).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"procedure\":"
		out.RawString(prefix)
		if in.Procedure == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Procedure {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels38(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels39(in *jlexer.Lexer, out *ClearingBank) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "claims":
			out.Claims = int64(in.Int64())
		case "liabilities":
			out.Liabilities = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels39(out *jwriter.Writer, in ClearingBank) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"claims\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Claims))
	}
	{
		const prefix string = ",\"liabilities\":"
		out.RawString(prefix)
		out.Int64(int64(in.Liabilities))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClearingBank) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClearingBank) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClearingBank) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClearingBank) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels39(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels40(in *jlexer.Lexer, out *ClaimsItemResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "bankClaims":
			(out.BankClaims).UnmarshalEasyJSON(in)
		case "bankLiabilities":
			(out.BankLiabilities).UnmarshalEasyJSON(in)
		case "amount":
			out.Amount = int64(in.Int64())
		case "unconfirmed":
			out.Unconfirmed = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels40(out *jwriter.Writer, in ClaimsItemResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"bankClaims\":"
		out.RawString(prefix)
		(in.BankClaims).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bankLiabilities\":"
		out.RawString(prefix)
		(in.BankLiabilities).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"unconfirmed\":"
		out.RawString(prefix)
		out.Int64(int64(in.Unconfirmed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsItemResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsItemResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsItemResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsItemResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels40(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels41(in *jlexer.Lexer, out *ClaimsItemDoc) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "docType":
			out.DocType = string(in.String())
		case "id":
			out.Id = string(in.String())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "bankClaims":
			out.BankClaims = string(in.String())
		case "bankLiabilities":
			out.BankLiabilities = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "unconfirmed":
			out.Unconfirmed = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels41(out *jwriter.Writer, in ClaimsItemDoc) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix[1:])
		out.String(string(in.DocType))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.Id))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"bankClaims\":"
		out.RawString(prefix)
		out.String(string(in.BankClaims))
	}
	{
		const prefix string = ",\"bankLiabilities\":"
		out.RawString(prefix)
		out.String(string(in.BankLiabilities))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"unconfirmed\":"
		out.RawString(prefix)
		out.Int64(int64(in.Unconfirmed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsItemDoc) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsItemDoc) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsItemDoc) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsItemDoc) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels41(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels42(in *jlexer.Lexer, out *ClaimsItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "bankClaims":
			out.BankClaims = string(in.String())
		case "bankLiabilities":
			out.BankLiabilities = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "unconfirmed":
			out.Unconfirmed = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels42(out *jwriter.Writer, in ClaimsItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix[1:])
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"bankClaims\":"
		out.RawString(prefix)
		out.String(string(in.BankClaims))
	}
	{
		const prefix string = ",\"bankLiabilities\":"
		out.RawString(prefix)
		out.String(string(in.BankLiabilities))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"unconfirmed\":"
		out.RawString(prefix)
		out.Int64(int64(in.Unconfirmed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels42(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels43(in *jlexer.Lexer, out *ClaimsEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]ClaimsItem, 0, 1)
					} else {
						out.Data = []ClaimsItem{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v79 ClaimsItem
					(v79).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels43(out *jwriter.Writer, in ClaimsEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v80, v81 := range in.Data {
				if v80 > 0 {
					out.RawByte(',')
				}
				(v81).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels43(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels44(in *jlexer.Lexer, out *ClaimsAggregate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int64(in.Int64())
		case "unconfirmed":
			out.Unconfirmed = int64(in.Int64())
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.Ids = nil
			} else {
				in.Delim('[')
				if out.Ids == nil {
					if !in.IsDelim(']') {
						out.Ids = make([]string, 0, 4)
					} else {
						out.Ids = []string{}
					}
				} else {
					out.Ids = (out.Ids)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.Ids = append(out.Ids, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels44(out *jwriter.Writer, in ClaimsAggregate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"unconfirmed\":"
		out.RawString(prefix)
		out.Int64(int64(in.Unconfirmed))
	}
	{
		const prefix string = ",\"ids\":"
		out.RawString(prefix)
		if in.Ids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.Ids {
				if v83 > 0 {
					out.RawByte(',')
				}
				out.String(string(v84))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClaimsAggregate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClaimsAggregate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClaimsAggregate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClaimsAggregate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels44(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels45(in *jlexer.Lexer, out *BaseEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels45(out *jwriter.Writer, in BaseEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels45(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels46(in *jlexer.Lexer, out *BankInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "bik":
			out.Bik = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels46(out *jwriter.Writer, in BankInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"bik\":"
		out.RawString(prefix)
		out.String(string(in.Bik))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels46(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels47(in *jlexer.Lexer, out *BankEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels47(out *jwriter.Writer, in BankEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BankEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BankEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BankEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BankEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels47(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels48(in *jlexer.Lexer, out *Bank) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "bik":
			out.BIK = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		case "createdBy":
			out.CreatedBy = string(in.String())
		case "isOwner":
			out.IsOwner = bool(in.Bool())
		case "encrypted":
			out.Encrypted = bool(in.Bool())
		case "isRegulator":
			out.IsRegulator = bool(in.Bool())
		case "mspId":
			out.MSPId = string(in.String())
		case "conf":
			out.Conf = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels48(out *jwriter.Writer, in Bank) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"bik\":"
		out.RawString(prefix)
		out.String(string(in.BIK))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"createdBy\":"
		out.RawString(prefix)
		out.String(string(in.CreatedBy))
	}
	{
		const prefix string = ",\"isOwner\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsOwner))
	}
	{
		const prefix string = ",\"encrypted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Encrypted))
	}
	{
		const prefix string = ",\"isRegulator\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRegulator))
	}
	{
		const prefix string = ",\"mspId\":"
		out.RawString(prefix)
		out.String(string(in.MSPId))
	}
	{
		const prefix string = ",\"conf\":"
		out.RawString(prefix)
		out.String(string(in.Conf))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bank) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bank) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bank) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bank) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels48(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels49(in *jlexer.Lexer, out *AvailablePlatformsEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels49(out *jwriter.Writer, in AvailablePlatformsEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AvailablePlatformsEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AvailablePlatformsEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AvailablePlatformsEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AvailablePlatformsEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels49(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels50(in *jlexer.Lexer, out *ArbitratorEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels50(out *jwriter.Writer, in ArbitratorEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArbitratorEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArbitratorEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArbitratorEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArbitratorEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels50(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels51(in *jlexer.Lexer, out *Arbitrator) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels51(out *jwriter.Writer, in Arbitrator) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Arbitrator) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Arbitrator) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Arbitrator) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Arbitrator) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels51(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels52(in *jlexer.Lexer, out *AmountOfBank) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels52(out *jwriter.Writer, in AmountOfBank) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AmountOfBank) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AmountOfBank) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AmountOfBank) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AmountOfBank) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels52(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels53(in *jlexer.Lexer, out *AccountSecretKey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addressTo":
			out.AddressTo = string(in.String())
		case "encryptedSecretKey":
			out.EncryptedSecretKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels53(out *jwriter.Writer, in AccountSecretKey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addressTo\":"
		out.RawString(prefix[1:])
		out.String(string(in.AddressTo))
	}
	{
		const prefix string = ",\"encryptedSecretKey\":"
		out.RawString(prefix)
		out.String(string(in.EncryptedSecretKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountSecretKey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountSecretKey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountSecretKey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountSecretKey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels53(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels54(in *jlexer.Lexer, out *AccountEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			(out.Data).UnmarshalEasyJSON(in)
		case "chaincodeName":
			out.ChaincodeName = string(in.String())
		case "functionName":
			out.FunctionName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels54(out *jwriter.Writer, in AccountEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		(in.Data).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"chaincodeName\":"
		out.RawString(prefix)
		out.String(string(in.ChaincodeName))
	}
	{
		const prefix string = ",\"functionName\":"
		out.RawString(prefix)
		out.String(string(in.FunctionName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels54(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels55(in *jlexer.Lexer, out *AccountBalance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accountBalanceAddress":
			out.AccountBalanceAddress = string(in.String())
		case "accountBalanceAddressBank":
			out.AccountBalanceAddressBank = string(in.String())
		case "op":
			out.Op = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "txID":
			out.TxID = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels55(out *jwriter.Writer, in AccountBalance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accountBalanceAddress\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccountBalanceAddress))
	}
	{
		const prefix string = ",\"accountBalanceAddressBank\":"
		out.RawString(prefix)
		out.String(string(in.AccountBalanceAddressBank))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"txID\":"
		out.RawString(prefix)
		out.String(string(in.TxID))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AccountBalance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AccountBalance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AccountBalance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AccountBalance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels55(l, v)
}
func easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels56(in *jlexer.Lexer, out *Account) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "state":
			out.State = state_enum.State(in.Int())
		case "currencyCode":
			out.CurrencyCode = int(in.Int())
		case "juridicalType":
			out.JuridicalType = juridical_type_enum.JuridicalType(in.Int())
		case "bikBankSetterJuridicalType":
			out.BikBankSetterJuridicalType = string(in.String())
		case "identityType":
			out.IdentityType = identity_type_enum.IdentityType(in.Int())
		case "owner":
			out.Owner = string(in.String())
		case "type":
			out.Type = account_type_enum.AccountType(in.Int())
		case "identifiers":
			if in.IsNull() {
				in.Skip()
				out.Identifiers = nil
			} else {
				in.Delim('[')
				if out.Identifiers == nil {
					if !in.IsDelim(']') {
						out.Identifiers = make([]string, 0, 4)
					} else {
						out.Identifiers = []string{}
					}
				} else {
					out.Identifiers = (out.Identifiers)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.Identifiers = append(out.Identifiers, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "encrypted":
			out.Encrypted = bool(in.Bool())
		case "created":
			out.Created = int64(in.Int64())
		case "publicKey":
			out.PublicKey = string(in.String())
		case "docType":
			out.DocType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels56(out *jwriter.Writer, in Account) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"currencyCode\":"
		out.RawString(prefix)
		out.Int(int(in.CurrencyCode))
	}
	{
		const prefix string = ",\"juridicalType\":"
		out.RawString(prefix)
		out.Int(int(in.JuridicalType))
	}
	{
		const prefix string = ",\"bikBankSetterJuridicalType\":"
		out.RawString(prefix)
		out.String(string(in.BikBankSetterJuridicalType))
	}
	{
		const prefix string = ",\"identityType\":"
		out.RawString(prefix)
		out.Int(int(in.IdentityType))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"identifiers\":"
		out.RawString(prefix)
		if in.Identifiers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v86, v87 := range in.Identifiers {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.String(string(v87))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"encrypted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Encrypted))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int64(int64(in.Created))
	}
	{
		const prefix string = ",\"publicKey\":"
		out.RawString(prefix)
		out.String(string(in.PublicKey))
	}
	{
		const prefix string = ",\"docType\":"
		out.RawString(prefix)
		out.String(string(in.DocType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Account) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Account) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComSolarLabRUFastpayGoCommonsModels56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Account) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Account) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComSolarLabRUFastpayGoCommonsModels56(l, v)
}
